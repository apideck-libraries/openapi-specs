openapi: 3.0.3
info:
  version: 8.73.0
  title: Accounting API
  description: "Welcome to the Accounting API.\n\nYou can use this API to access all Accounting API endpoints.\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\nWe also provide a [Mock API](https://developers.apideck.com/mock-api) that can be used for testing purposes: `https://mock-api.apideck.com`\n\n## GraphQL\n\nUse the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Pagination\n\nAll API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\nTo fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\nIn the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n### Query Parameters\n\n| Name   | Type   | Required | Description                                                                                                        |\n| ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n| cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |\n| limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n### Response Body\n\n| Name                  | Type   | Description                                                        |\n| --------------------- | ------ | ------------------------------------------------------------------ |\n| meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n| meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n| meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n| meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n| links.previous        | String | Link to navigate to the previous page of results through the API   |\n| links.current         | String | Link to navigate to the current page of results through the API    |\n| links.next            | String | Link to navigate to the next page of results through the API       |\n\n⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n## SDKs and API Clients\n\nWe currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.\nNeed another SDK? [Request the SDK of your choice](https://integrations.apideck.com/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### RequestValidationError\n\nRequest is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n#### UnsupportedFiltersError\n\nFilters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n#### UnsupportedSortFieldError\n\nSort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n#### InvalidCursorError\n\nPagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### ConnectorRateLimitError\n\nYou sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### OAuthCredentialsNotFoundError\n\nWhen adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectionSettingsError\n\nThe connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### OAuthRedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### OAuthInvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### OAuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### OAuthConnectorError\n\nIt seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationUnsupportedError\n\nYou're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n#### PaginationNotSupportedError\n\nPagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n### Idempotence (upcoming)\n\nTo prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.\n\nUniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n\n"
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  x-apideck-api: accounting
  x-apideck-sdk-support: true
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Apideck Developer Docs
  url: 'https://developers.apideck.com'
servers:
  - url: 'https://unify.apideck.com'
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
    balanceSheetFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/BalanceSheetFilter'
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    customersFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/CustomersFilter'
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    invoiceItemsFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/InvoiceItemsFilter'
    limit:
      name: limit
      in: query
      description: Number of records to return
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    passThrough:
      name: pass_through
      in: query
      description: Optional unmapped key/values that will be passed through to downstream as query parameters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/Passthrough'
    profitAndLossFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/ProfitAndLossFilter'
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: false
    serviceId:
      name: x-apideck-service-id
      in: header
      description: 'Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.'
      schema:
        type: string
    taxRatesFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/TaxRatesFilter'
    invoicesSort:
      name: sort
      in: query
      description: Apply sorting
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/InvoicesSort'
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
      description: Bad Request
    CompanyInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompanyInfo'
      description: Company Info
    CreateBillResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBillResponse'
      description: Bill created
    CreateCreditNoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCreditNoteResponse'
      description: Credit Note created
    CreateCustomerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCustomerResponse'
      description: Customers
    CreateInvoiceItemResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateInvoiceItemResponse'
      description: InvoiceItems
    CreateInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateInvoiceResponse'
      description: Invoice created
    CreateLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLedgerAccountResponse'
      description: LedgerAccount created
    CreatePaymentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePaymentResponse'
      description: Payment created
    CreateSupplierResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSupplierResponse'
      description: Supplier created
    CreateTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTaxRateResponse'
      description: TaxRate created
    DeleteBillResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteBillResponse'
      description: Bill deleted
    DeleteCreditNoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteCreditNoteResponse'
      description: Credit Note deleted
    DeleteCustomerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteCustomerResponse'
      description: Customers
    DeleteInvoiceItemResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteTaxRateResponse'
      description: InvoiceItems
    DeleteInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteInvoiceResponse'
      description: Invoice deleted
    DeleteLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteLedgerAccountResponse'
      description: LedgerAccount deleted
    DeletePaymentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeletePaymentResponse'
      description: Payment deleted
    DeleteSupplierResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteSupplierResponse'
      description: Supplier deleted
    DeleteTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteTaxRateResponse'
      description: TaxRates deleted
    GetBalanceSheetResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetBalanceSheetResponse'
      description: BalanceSheet
    GetBillResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetBillResponse'
      description: Bill
    GetBillsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetBillsResponse'
      description: Bills
    GetCompanyInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCompanyInfoResponse'
      description: CompanyInfo
    GetCreditNoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCreditNoteResponse'
      description: Credit Note
    GetCreditNotesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCreditNotesResponse'
      description: Credit Notes
    GetCustomerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCustomerResponse'
      description: Customer
    GetCustomersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCustomersResponse'
      description: Customers
    GetInvoiceItemResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetInvoiceItemResponse'
      description: InvoiceItems
    GetInvoiceItemsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetInvoiceItemsResponse'
      description: InvoiceItems
    GetInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetInvoiceResponse'
      description: Invoice
    GetInvoicesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetInvoicesResponse'
      description: Invoices
    GetLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLedgerAccountResponse'
      description: LedgerAccount
    GetLedgerAccountsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLedgerAccountsResponse'
      description: LedgerAccounts
    GetPaymentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPaymentResponse'
      description: Payment
    GetPaymentsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPaymentsResponse'
      description: Payments
    GetSupplierResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSupplierResponse'
      description: Supplier
    GetSuppliersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSuppliersResponse'
      description: Suppliers
    GetTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTaxRateResponse'
      description: TaxRate
    GetTaxRatesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTaxRatesResponse'
      description: TaxRates
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
      description: Not Implemented
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
      description: Payment Required
    TooManyRequestsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsResponse'
      description: Too Many Requests
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
      description: Unprocessable
    UpdateBillResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateBillResponse'
      description: Bill Updated
    UpdateCreditNoteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCreditNoteResponse'
      description: Credit Note updated
    UpdateCustomerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCustomerResponse'
      description: Customers
    UpdateInvoiceItemResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateInvoiceItemsResponse'
      description: InvoiceItems
    UpdateInvoiceResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateInvoiceResponse'
      description: Invoice updated
    UpdateLedgerAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateLedgerAccountResponse'
      description: LedgerAccount updated
    UpdatePaymentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePaymentResponse'
      description: Payment Updated
    UpdateSupplierResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateSupplierResponse'
      description: Supplier updated
    UpdateTaxRateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTaxRateResponse'
      description: TaxRate updated
    GetProfitAndLossResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetProfitAndLossResponse'
      description: Profit & Loss Report
  schemas:
    AccountingCustomer:
      type: object
      x-apideck-schema-id: Customer
      x-apideck-weights:
        id: high
        display_id: edge-case
        display_name: edge-case
        company_name: high
        title: critical
        first_name: high
        middle_name: low
        last_name: high
        suffix: low
        individual: medium
        addresses: high
        notes: low
        phone_numbers: high
        emails: high
        websites: medium
        tax_rate: medium
        tax_number: medium
        currency: medium
        bank_accounts: high
        status: high
        row_version: edge-case
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: medium
      x-graphql-type-name: Customer
      properties:
        id:
          $ref: '#/components/schemas/Id'
        display_id:
          type: string
          title: Display ID
          description: Display ID
          example: EMP00101
          nullable: true
        display_name:
          type: string
          title: Display Name
          description: Display Name
          example: Windsurf Shop
          nullable: true
        company_name:
          $ref: '#/components/schemas/CompanyName'
        title:
          $ref: '#/components/schemas/Title'
        first_name:
          $ref: '#/components/schemas/FirstName'
        middle_name:
          $ref: '#/components/schemas/MiddleName'
        last_name:
          $ref: '#/components/schemas/LastName'
        suffix:
          $ref: '#/components/schemas/Suffix'
        individual:
          type: boolean
          title: Is individual
          description: Is this an individual or business customer
          example: true
          nullable: true
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        notes:
          type: string
          title: Notes
          description: Some notes about this customer
          example: Some notes about this customer
          nullable: true
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
        tax_rate:
          $ref: '#/components/schemas/LinkedTaxRate'
        tax_number:
          $ref: '#/components/schemas/TaxNumber'
        currency:
          $ref: '#/components/schemas/Currency'
        bank_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        status:
          type: string
          title: Status
          description: Customer status
          nullable: true
          example: active
          x-graphql-type-name: CustomerStatus
          x-apideck-enum-id: customers.status
          enum:
            - active
            - inactive
            - archived
            - gdpr-erasure-request
            - unknown
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    AccountingEventType:
      type: string
      x-apideck-enum-id: accounting.events
      enum:
        - '*'
        - accounting.customer.created
        - accounting.customer.updated
        - accounting.customer.deleted
        - accounting.invoice.created
        - accounting.invoice.updated
        - accounting.invoice.deleted
        - accounting.invoice_item.created
        - accounting.invoice_item.updated
        - accounting.invoice_item.deleted
        - accounting.ledger_account.created
        - accounting.ledger_account.updated
        - accounting.ledger_account.deleted
        - accounting.tax_rate.created
        - accounting.tax_rate.updated
        - accounting.tax_rate.deleted
        - accounting.bill.created
        - accounting.bill.updated
        - accounting.bill.deleted
        - accounting.payment.created
        - accounting.payment.updated
        - accounting.payment.deleted
        - accounting.supplier.created
        - accounting.supplier.updated
        - accounting.supplier.deleted
      example: accounting.invoice.created
    AccountingWebhookEvent:
      x-sdk-exclude: true
      allOf:
        - type: object
          x-apideck-schema-id: WebhookEvent
          properties:
            event_id:
              type: string
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
            service_id:
              type: string
              description: Service provider identifier
              example: close
            entity_id:
              type: string
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
            entity_type:
              type: string
              description: The type entity that triggered this event
              example: Company
            entity_url:
              type: string
              description: The url to retrieve entity detail.
              example: 'https://unify.apideck.com/crm/contacts/123456'
            execution_attempt:
              type: number
              description: The current count this request event has been attempted
              example: 2
            occurred_at:
              type: string
              description: ISO Datetime for when the original event occurred
              example: '2021-10-01T03:14:55.419Z'
        - type: object
          properties:
            event_type:
              $ref: '#/components/schemas/AccountingEventType'
    Active:
      type: boolean
      title: Is active
      example: true
      nullable: true
    Address:
      type: object
      x-apideck-schema-id: Address
      additionalProperties: false
      x-apideck-weights:
        id: edge-case
        name: edge-case
        type: critical
        line1: high
        line2: low
        line3: edge-case
        line4: edge-case
        street_number: low
        city: high
        string: low
        state: high
        postal_code: high
        country: high
        latitude: low
        longitude: low
        county: edge-case
        contact_name: edge-case
        salutation: edge-case
        phone_number: edge-case
        fax: edge-case
        email: edge-case
        website: edge-case
        row_version: edge-case
      properties:
        id:
          type: string
          example: '123'
          nullable: true
        type:
          type: string
          x-graphql-type-name: AddressType
          x-apideck-enum-id: addresses.type
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
        string:
          type: string
          title: The address string. Some APIs don't provide structured address data.
          example: '25 Spring Street, Blackburn, VIC 3130'
          nullable: true
        name:
          type: string
          example: HQ US
          nullable: true
        line1:
          type: string
          example: Main street
          description: 'Line 1 of the address e.g. number, street, suite, apt #, etc.'
          nullable: true
        line2:
          type: string
          example: 'apt #'
          description: Line 2 of the address
          nullable: true
        line3:
          type: string
          example: 'Suite #'
          description: Line 3 of the address
          nullable: true
        line4:
          type: string
          example: delivery instructions
          description: Line 4 of the address
          nullable: true
        street_number:
          type: string
          example: '25'
          description: Street number
          nullable: true
        city:
          type: string
          example: San Francisco
          description: Name of city.
          nullable: true
        state:
          type: string
          example: CA
          description: Name of state
          nullable: true
        postal_code:
          type: string
          example: '94104'
          description: Zip code or equivalent.
          nullable: true
        country:
          type: string
          example: US
          description: country code according to ISO 3166-1 alpha-2.
          nullable: true
        latitude:
          type: string
          example: '40.759211'
          nullable: true
        longitude:
          type: string
          example: '-73.984638'
          nullable: true
        county:
          type: string
          example: Santa Clara
          description: 'Address field that holds a sublocality, such as a county'
          nullable: true
        contact_name:
          type: string
          example: Elon Musk
          nullable: true
        salutation:
          type: string
          example: Mr
          nullable: true
        phone_number:
          type: string
          example: 111-111-1111
          nullable: true
        fax:
          type: string
          example: 122-111-1111
          nullable: true
        email:
          type: string
          example: elon@musk.com
          nullable: true
        website:
          type: string
          example: 'https://elonmusk.com'
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
    BadRequestResponse:
      type: object
      x-apideck-schema-id: BadRequest
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestvalidationerror'
    BalanceSheet:
      type: object
      x-apideck-schema-id: BalanceSheet
      x-apideck-weights:
        id: medium
        report_name: medium
        start_date: critical
        assets: critical
        liabilities: critical
        equity: critical
        updated_by: edge-case
        created_by: edge-case
        updated_at: low
        created_at: edge-case
      additionalProperties: false
      required:
        - report_name
        - start_date
        - assets
        - liabilities
        - equity
      properties:
        id:
          $ref: '#/components/schemas/Id'
        report_name:
          type: string
          description: The name of the report
          title: Report Name
          example: BalanceSheet
        start_date:
          type: string
          description: The start date of the report
          title: Start Date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          example: '2017-01-01'
        end_date:
          type: string
          description: The start date of the report
          title: Start Date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          example: '2017-01-01'
        assets:
          x-apideck-weights:
            total: medium
            current_assets: medium
            fixed_assets: medium
          type: object
          required:
            - total
            - current_assets
            - fixed_assets
          example:
            total: 200000
            current_assets:
              total: 100000
              accounts:
                - id: '1'
                  name: Accounts Receivable (A/R)
                  value: 10000
                - id: '2'
                  name: Accounts Payable (A/P)
                  value: 10000
            fixed_assets:
              total: 100000
              accounts:
                - id: '1'
                  name: Accounts Receivable (A/R)
                  value: 10000
                - id: '2'
                  name: Accounts Payable (A/P)
                  value: 10000
          properties:
            total:
              type: number
              description: Total assets
              title: Total Assets
              example: 100000
            current_assets:
              x-apideck-weights:
                total: medium
                accounts: medium
              type: object
              required:
                - total
                - accounts
              properties:
                total:
                  type: number
                  description: Total current assets
                  title: Total Current Assets
                  example: 100000
                accounts:
                  type: array
                  items:
                    type: object
                    x-graphql-type-name: CurrentAssetAccountsList
                    properties:
                      id:
                        $ref: '#/components/schemas/Id'
                      name:
                        type: string
                        description: The name of the current asset account
                        title: Account Name
                        example: Accounts Receivable (A/R)
                      value:
                        type: number
                        description: The value of the current asset
                        title: Value
                        example: 10000
            fixed_assets:
              x-apideck-weights:
                total: medium
                accounts: medium
              type: object
              required:
                - total
                - accounts
              properties:
                total:
                  type: number
                  description: Total fixed assets
                  title: Total Fixed Assets
                  example: 100000
                accounts:
                  type: array
                  items:
                    x-apideck-weights:
                      id: medium
                      name: medium
                      value: medium
                    type: object
                    x-graphql-type-name: FixedAssetAccountsList
                    properties:
                      id:
                        $ref: '#/components/schemas/Id'
                      name:
                        type: string
                        description: The name of the fixed asset account
                        title: Account Name
                        example: Accounts Receivable (A/R)
                      value:
                        type: number
                        description: The value of the fixed asset
                        title: Value
                        example: 10000
        liabilities:
          x-apideck-weights:
            total: medium
            accounts: medium
          type: object
          required:
            - total
            - accounts
          example:
            total: 200000
            accounts:
              - id: '1'
                name: Accounts Payable (A/P)
                value: 10000
          properties:
            total:
              type: number
              description: Total liabilities
              title: Total Liabilities
              example: 100000
            accounts:
              type: array
              items:
                x-apideck-weights:
                  id: medium
                  name: medium
                  value: medium
                type: object
                x-graphql-type-name: LiabilityAccountsList
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    type: string
                    description: The name of the liability account
                    title: Account Name
                    example: Accounts Payable (A/P)
                  value:
                    type: number
                    description: The value of the liability
                    title: Value
                    example: 10000
        equity:
          x-apideck-weights:
            total: medium
            items: medium
          type: object
          required:
            - total
            - items
          example:
            total: 200000
            items:
              - id: '1'
                name: Retained Earnings
                value: 10000
          properties:
            total:
              type: number
              description: Total equity
              title: Total Equity
              example: 100000
            items:
              type: array
              items:
                x-apideck-weights:
                  id: medium
                  name: medium
                  value: medium
                type: object
                x-graphql-type-name: EquityItemsList
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
                  name:
                    type: string
                    description: The type of the equity
                    title: Account Name
                    example: Retained Earnings
                  value:
                    type: number
                    description: The equity amount
                    title: Value
                    example: 10000
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    BalanceSheetFilter:
      type: object
      x-apideck-schema-id: BalanceSheetFilter
      x-graphql-type-name: BalanceSheetFilter
      example:
        start_date: '2021-01-01'
        end_date: '2021-12-31'
      properties:
        start_date:
          type: string
          title: Start date
          description: 'Filter by start date. If start date is given, end date is required.'
          example: '2021-01-01'
        end_date:
          type: string
          title: End date
          description: 'Filter by end date. If end date is given, start date is required.'
          example: '2021-12-31'
      additionalProperties: false
    BankAccount:
      type: object
      x-apideck-schema-id: BankAccount
      additionalProperties: false
      x-apideck-weights:
        account_number: critical
        iban: high
        bsb_number: edge-case
      properties:
        iban:
          type: string
          example: CH2989144532982975332
          nullable: true
        bic:
          type: string
          example: AUDSCHGGXXX
          nullable: true
        bsb_number:
          type: string
          title: BSB Number
          description: A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
          example: 062-001
          nullable: true
        branch_identifier:
          type: string
          title: Branch Identifier
          description: A branch identifier is a unique identifier for a branch of a bank or financial institution.
          example: '001'
          nullable: true
        bank_code:
          type: string
          title: Bank Code
          description: 'A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.'
          example: BNH
          nullable: true
        account_number:
          type: string
          title: Bank Account Number
          description: 'A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.'
          example: '123465'
          nullable: true
        account_name:
          type: string
          title: Bank Account Name
          description: The name which you used in opening your bank account.
          example: SPACEX LLC
          nullable: true
        account_type:
          type: string
          title: Account Type
          x-apideck-enum-id: bank-accounts.account_type
          enum:
            - bank_account
            - credit_card
            - other
          description: The type of bank account.
          example: credit_card
          nullable: true
        currency:
          $ref: '#/components/schemas/Currency'
    Bill:
      type: object
      x-apideck-schema-id: Bill
      additionalProperties: false
      x-apideck-weights:
        id: critical
        bill_date: critical
        due_date: critical
        paid_date: high
        downstream_id: low
        supplier: high
        terms: low
        po_number: low
        reference: low
        status: critical
        ledger_account: low
        currency: medium
        currency_rate: low
        tax_inclusive: low
        sub_total: high
        total_tax: high
        tax_code: medium
        total: critical
        notes: low
        deposit: low
        balance: high
        line_items: critical
        bill_number: high
        row_version: edge-case
        updated_by: low
        created_by: low
        created_at: edge-case
        updated_at: high
      properties:
        id:
          $ref: '#/components/schemas/Id'
        downstream_id:
          $ref: '#/components/schemas/DownstreamId'
        supplier:
          $ref: '#/components/schemas/LinkedSupplier'
        currency:
          $ref: '#/components/schemas/Currency'
        currency_rate:
          $ref: '#/components/schemas/CurrencyRate'
        tax_inclusive:
          $ref: '#/components/schemas/TaxInclusive'
        bill_date:
          type: string
          title: Bill date
          description: Date bill was issued - YYYY-MM-DD.
          format: date
          example: '2020-09-30'
        due_date:
          type: string
          title: Due date
          description: The due date is the date on which a payment is scheduled to be received by the supplier - YYYY-MM-DD.
          format: date
          example: '2020-10-30'
        paid_date:
          type: string
          title: Paid date
          description: The paid date is the date on which a payment was sent to the supplier - YYYY-MM-DD.
          format: date
          example: '2020-10-30'
          nullable: true
        po_number:
          type: string
          title: Purchase Order number
          description: A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
          example: '90000117'
          nullable: true
        reference:
          type: string
          title: Invoice reference
          description: Optional invoice reference.
          example: '123456'
          nullable: true
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/BillLineItem'
        terms:
          type: string
          title: Terms
          description: Terms of payment.
          example: Net 30 days
          nullable: true
        balance:
          type: number
          title: Balance
          description: Balance of bill due.
          example: 27500
          nullable: true
        deposit:
          type: number
          title: Deposit
          description: Amount of deposit made to this bill.
          example: 0
          nullable: true
        sub_total:
          title: Sub-total amount
          description: 'Sub-total amount, normally before tax.'
          type: number
          example: 27500
          nullable: true
        total_tax:
          type: number
          title: Total tax amount
          description: Total tax amount applied to this bill.
          example: 2500
          nullable: true
        total:
          type: number
          title: Total amount
          description: 'Total amount of bill, including tax.'
          example: 27500
          nullable: true
        tax_code:
          type: string
          title: Tax Code
          description: Applicable tax id/code override if tax is not supplied on a line item basis.
          example: '1234'
          nullable: true
        notes:
          type: string
          title: Notes
          example: Some notes about this bill.
          nullable: true
        status:
          type: string
          title: Status
          description: Invoice status
          example: draft
          x-apideck-enum-id: invoices.status
          enum:
            - draft
            - submitted
            - authorised
            - partially_paid
            - paid
            - void
            - credit
            - deleted
          nullable: true
        ledger_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        bill_number:
          type: string
          title: Bill number
          example: '10001'
          nullable: true
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        row_version:
          $ref: '#/components/schemas/RowVersion'
    BillLineItem:
      type: object
      x-apideck-schema-id: BillLineItem
      additionalProperties: false
      x-apideck-weights:
        id: critical
        row_id: edge-case
        code: high
        line_number: edge-case
        description: high
        type: high
        tax_amount: low
        total_amount: critical
        quantity: medium
        unit_price: medium
        unit_of_measure: edge-case
        discount_percentage: edge-case
        item: high
        ledger_account: low
        tax_rate: low
        row_version: edge-case
        created_at: edge-case
        updated_at: high
      properties:
        id:
          $ref: '#/components/schemas/Id'
        row_id:
          type: string
          title: Row ID
          description: Row ID
          example: '12345'
        code:
          type: string
          title: Item code
          description: User defined item code
          example: 120-C
          nullable: true
        line_number:
          type: integer
          title: Line number
          description: Line number in the invoice
          example: 1
          nullable: true
        description:
          type: string
          title: Description
          description: User defined description
          example: 'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
          nullable: true
        type:
          type: string
          title: Type
          description: Bill Line Item type
          x-graphql-type-name: BillLineItemType
          example: expense_account
          x-apideck-enum-id: bills.line_items.type
          enum:
            - expense_item
            - expense_account
          nullable: true
        tax_amount:
          type: number
          title: Tax amount
          description: Tax amount
          example: 27500
          nullable: true
        total_amount:
          type: number
          title: Total amount
          description: Total amount of the line item
          example: 27500
          nullable: true
        quantity:
          $ref: '#/components/schemas/Quantity'
        unit_price:
          $ref: '#/components/schemas/UnitPrice'
        unit_of_measure:
          $ref: '#/components/schemas/UnitOfMeasure'
        discount_percentage:
          type: number
          title: Discount amount
          description: Discount percentage
          example: 0.01
          nullable: true
        location_id:
          type: string
          title: Location id
          description: Location id
          example: '1234'
          nullable: true
        department_id:
          type: string
          title: Department id
          description: Department id
          example: '1234'
          nullable: true
        item:
          $ref: '#/components/schemas/LinkedInvoiceItem'
        ledger_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        tax_rate:
          $ref: '#/components/schemas/LinkedTaxRate'
        row_version:
          $ref: '#/components/schemas/RowVersion'
    Company:
      type: object
      x-apideck-schema-id: Company
      x-apideck-weights:
        id: critical
        name: critical
        interaction_count: edge-case
        owner_id: high
        image: low
        description: medium
        vat_number: high
        currency: medium
        status: high
        fax: low
        annual_revenue: low
        number_of_employees: low
        industry: medium
        ownership: low
        sales_tax_number: medium
        payee_number: edge-case
        abn_or_tfn: edge-case
        abn_branch: edge-case
        acn: edge-case
        first_name: edge-case
        last_name: edge-case
        parent_id: edge-case
        bank_accounts: medium
        websites: medium
        addresses: high
        social_links: low
        phone_numbers: high
        emails: high
        row_type: edge-case
        custom_fields: medium
        tags: low
        read_only: low
        last_activity_at: low
        deleted: medium
        salutation: edge-case
        birthday: edge-case
        updated_by: edge-case
        created_by: edge-case
        updated_at: high
        created_at: medium
      required:
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: '12345'
        name:
          type: string
          example: SpaceX
          minLength: 1
        interaction_count:
          type: integer
          example: 1
          readOnly: true
          nullable: true
        owner_id:
          type: string
          example: '12345'
        image:
          type: string
          example: 'https://www.spacex.com/static/images/share.jpg'
          nullable: true
        description:
          type: string
          example: 'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.'
          nullable: true
        vat_number:
          description: VAT number
          type: string
          example: BE0689615164
          nullable: true
        currency:
          $ref: '#/components/schemas/Currency'
        status:
          type: string
          example: Open
          nullable: true
        fax:
          type: string
          example: '+12129876543'
          nullable: true
        annual_revenue:
          description: Annual revenue
          type: string
          example: +$35m
          nullable: true
        number_of_employees:
          description: Number of employees
          type: string
          example: 500-1000
          nullable: true
        industry:
          description: Industry
          type: string
          example: Apparel
          nullable: true
        ownership:
          description: Ownership
          type: string
          example: Public
          nullable: true
        sales_tax_number:
          title: Sales tax number
          type: string
          example: 12456EN
          nullable: true
        payee_number:
          title: Payee number
          type: string
          example: 78932EN
          nullable: true
        abn_or_tfn:
          title: ABN or TFN
          description: 'An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.'
          type: string
          example: 46 115 614 695
          nullable: true
        abn_branch:
          title: ABN Branch
          description: An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
          type: string
          example: '123'
          nullable: true
        acn:
          title: ACN
          description: 'The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.'
          type: string
          example: XXX XXX XXX
          nullable: true
        first_name:
          $ref: '#/components/schemas/FirstName'
        last_name:
          $ref: '#/components/schemas/LastName'
        parent_id:
          description: Parent ID
          type: string
          readOnly: true
          example: '22345'
        bank_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        social_links:
          type: array
          items:
            $ref: '#/components/schemas/SocialLink'
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        row_type:
          x-apideck-weights:
            id: critical
            name: medium
          type: object
          x-graphql-type-name: CompanyRowType
          title: Company Row Type
          properties:
            id:
              type: string
              example: '12345'
            name:
              type: string
              example: Customer Account
        custom_fields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        tags:
          $ref: '#/components/schemas/Tags'
        read_only:
          type: boolean
          title: Read-only
          example: false
          nullable: true
        last_activity_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
          nullable: true
        deleted:
          type: boolean
          example: false
          readOnly: true
        salutation:
          type: string
          example: Mr
          nullable: true
        birthday:
          type: string
          example: '2000-08-12'
          format: date
          nullable: true
        updated_by:
          type: string
          example: '12345'
          readOnly: true
          nullable: true
        created_by:
          type: string
          example: '12345'
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
    CompanyInfo:
      type: object
      x-apideck-schema-id: CompanyInfo
      x-apideck-weights:
        id: medium
        company_name: critical
        status: critical
        legal_name: medium
        sales_tax_number: medium
        currency: medium
        language: low
        fiscal_year_start_month: medium
        company_start_date: medium
        addresses: medium
        phone_numbers: medium
        emails: medium
        default_sales_tax: edge-case
        sales_tax_enabled: edge-case
        automated_sales_tax: edge-case
        row_version: edge-case
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: low
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        company_name:
          $ref: '#/components/schemas/CompanyName'
        status:
          type: string
          title: Company status
          description: Based on the status some functionality is enabled or disabled.
          x-apideck-enum-id: company-info.status
          enum:
            - active
            - inactive
          example: active
        legal_name:
          type: string
          title: Legal name
          description: The legal name of the company
          example: SpaceX Inc.
        country:
          type: string
          example: US
          description: country code according to ISO 3166-1 alpha-2.
          nullable: true
        sales_tax_number:
          $ref: '#/components/schemas/SalesTaxNumber'
        automated_sales_tax:
          type: boolean
          title: Automated sales tax
          description: Whether sales tax is calculated automatically for the company
        sales_tax_enabled:
          type: boolean
          title: Sales tax enabled
          description: Whether sales tax is enabled for the company
        default_sales_tax:
          $ref: '#/components/schemas/LinkedTaxRate'
        currency:
          $ref: '#/components/schemas/Currency'
        language:
          $ref: '#/components/schemas/Language'
        fiscal_year_start_month:
          type: string
          title: The start month of fiscal year.
          description: The start month of fiscal year.
          x-apideck-enum-id: company-info.fiscal_year_start_month
          enum:
            - January
            - February
            - March
            - April
            - May
            - June
            - July
            - August
            - September
            - October
            - November
            - December
          example: January
        company_start_date:
          type: string
          title: Date when company file was created
          description: Date when company file was created
          format: date
          example: '2015-06-05'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    CompanyName:
      type: string
      title: Company name
      example: SpaceX
      nullable: true
    Contact:
      type: object
      x-apideck-schema-id: Contact
      x-apideck-weights:
        id: critical
        name: critical
        owner_id: medium
        type: medium
        company_id: high
        company_name: medium
        lead_id: medium
        first_name: high
        middle_name: low
        last_name: high
        prefix: low
        suffix: low
        title: medium
        department: medium
        language: medium
        gender: medium
        birthday: medium
        image: medium
        photo_url: medium
        lead_source: low
        fax: low
        description: low
        current_balance: edge-case
        status: edge-case
        active: edge-case
        websites: medium
        addresses: high
        social_links: low
        phone_numbers: high
        emails: high
        custom_fields: medium
        tags: low
        first_call_at: edge-case
        first_email_at: edge-case
        last_activity_at: medium
        updated_at: high
        created_at: medium
      required:
        - name
      x-pii:
        - name
        - first_name
        - middle_name
        - last_name
        - email
      properties:
        id:
          type: string
          example: '12345'
          readOnly: true
        name:
          type: string
          example: Elon Musk
          minLength: 1
        owner_id:
          type: string
          example: '54321'
          nullable: true
        type:
          type: string
          example: personal
          x-apideck-enum-id: contacts.type
          enum:
            - customer
            - supplier
            - employee
            - personal
          nullable: true
        company_id:
          type: string
          example: '23456'
          nullable: true
        company_name:
          type: string
          example: '23456'
          nullable: true
        lead_id:
          type: string
          example: '34567'
          nullable: true
        first_name:
          type: string
          example: Elon
          nullable: true
        middle_name:
          type: string
          example: D.
          nullable: true
        last_name:
          type: string
          example: Musk
          nullable: true
        prefix:
          type: string
          example: Mr.
          nullable: true
        suffix:
          type: string
          example: PhD
          nullable: true
        title:
          type: string
          example: CEO
          nullable: true
        department:
          type: string
          example: Engineering
          nullable: true
        language:
          type: string
          example: EN
          description: language code according to ISO 639-1. For the United States - EN
          nullable: true
        gender:
          type: string
          x-apideck-enum-id: contacts.gender
          enum:
            - male
            - female
            - unisex
          example: female
          nullable: true
        birthday:
          type: string
          example: '2000-08-12'
          nullable: true
        image:
          type: string
          example: 'https://unavatar.io/elon-musk'
          nullable: true
          deprecated: true
        photo_url:
          type: string
          title: Photo URL
          example: 'https://unavatar.io/elon-musk'
          nullable: true
        lead_source:
          type: string
          example: Cold Call
          nullable: true
        fax:
          type: string
          example: '+12129876543'
          nullable: true
        description:
          type: string
          title: Description
          example: Internal champion
          nullable: true
        current_balance:
          type: number
          title: Current Balance
          example: 10.5
          nullable: true
        status:
          type: string
          example: open
          nullable: true
        active:
          type: boolean
          example: true
          nullable: true
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        social_links:
          type: array
          items:
            $ref: '#/components/schemas/SocialLink'
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        custom_fields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        tags:
          $ref: '#/components/schemas/Tags'
        first_call_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
          nullable: true
        first_email_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
          nullable: true
        last_activity_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
          nullable: true
        updated_at:
          type: string
          format: date-time
          example: '2017-08-12T20:43:21.291Z'
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2017-08-12T20:43:21.291Z'
          readOnly: true
      additionalProperties: false
    CreateBillResponse:
      type: object
      x-apideck-schema-id: CreateBillResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: bills
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateCreditNoteResponse:
      type: object
      x-apideck-schema-id: CreateCreditNoteResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: credit-notes
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateCustomerResponse:
      type: object
      x-apideck-schema-id: CreateCustomerResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: customers
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreatedAt:
      type: string
      title: Created at (timestamp)
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    CreatedBy:
      type: string
      title: Created by
      example: '12345'
      readOnly: true
      nullable: true
    CreateInvoiceItemResponse:
      type: object
      x-apideck-schema-id: CreateInvoiceItemResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoice-items
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateInvoiceResponse:
      type: object
      x-apideck-schema-id: CreateInvoiceResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoices
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/InvoiceResponse'
    CreateLedgerAccountResponse:
      type: object
      x-apideck-schema-id: CreateLedgerAccountResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: ledger-accounts
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreatePaymentResponse:
      type: object
      x-apideck-schema-id: CreatePaymentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateSupplierResponse:
      type: object
      x-apideck-schema-id: CreateSupplierResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateTaxRateResponse:
      type: object
      x-apideck-schema-id: CreateTaxRateResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: tax-rates
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreditNote:
      type: object
      x-apideck-schema-id: CreditNote
      x-apideck-weights:
        id: critical
        number: low
        currency: critical
        currency_rate: medium
        balance: critical
        sub_total: critical
        total_amount: critical
        total_tax: edge-case
        tax_inclusive: low
        tax_code: edge-case
        reference: low
        account: critical
        date_paid: critical
        date_issued: edge-case
        customer: high
        status: high
        type: edge-case
        allocations: medium
        line_items: medium
        note: low
        row_version: edge-case
        created_at: edge-case
        updated_at: medium
      required:
        - total_amount
      properties:
        id:
          type: string
          title: Credit Note identifier
          description: Unique identifier representing the entity
          example: '123456'
          readOnly: true
        number:
          type: string
          title: Credit note number
          description: Credit note number.
          example: OIT00546
          nullable: true
        customer:
          $ref: '#/components/schemas/LinkedCustomer'
        currency:
          $ref: '#/components/schemas/Currency'
        currency_rate:
          $ref: '#/components/schemas/CurrencyRate'
        tax_inclusive:
          $ref: '#/components/schemas/TaxInclusive'
        sub_total:
          title: Sub-total amount
          description: 'Sub-total amount, normally before tax.'
          type: number
          example: 27500
          nullable: true
        total_amount:
          type: number
          title: Total amount
          description: Amount of transaction
          example: 49.99
        total_tax:
          type: number
          title: Total tax amount
          description: Total tax amount applied to this invoice.
          example: 2500
          nullable: true
        tax_code:
          type: string
          title: Tax Code
          description: Applicable tax id/code override if tax is not supplied on a line item basis.
          example: '1234'
          nullable: true
        balance:
          type: number
          title: Balance
          description: The balance reflecting any payments made against the transaction.
          example: 27500
          nullable: true
        remaining_credit:
          type: number
          title: Remaining Credit
          description: Indicates the total credit amount still available to apply towards the payment.
          example: 27500
          nullable: true
        status:
          type: string
          title: Credit Note status
          x-graphql-type-name: CreditNoteStatus
          description: Status of payment
          x-apideck-enum-id: payments.status
          enum:
            - draft
            - authorised
            - paid
            - voided
            - deleted
          example: authorised
        reference:
          type: string
          title: Credit Note reference
          description: 'Optional reference message ie: Debit remittance detail.'
          example: '123456'
          nullable: true
        date_issued:
          type: string
          title: Datetime
          description: 'Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD'
          format: date-time
          example: '2021-05-01T12:00:00.000Z'
        date_paid:
          type: string
          title: Datetime
          description: 'Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD'
          format: date-time
          example: '2021-05-01T12:00:00.000Z'
          nullable: true
        type:
          type: string
          title: Credit Note Type
          x-graphql-type-name: CreditNoteType
          description: Type of payment
          x-apideck-enum-id: credit-notes.type
          enum:
            - accounts_receivable_credit
            - accounts_payable_credit
          example: accounts_receivable_credit
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        allocations:
          type: array
          items:
            x-apideck-weights:
              id: medium
              type: medium
              code: medium
              amount: medium
            properties:
              id:
                type: string
                title: Linked entity ID
                description: Unique identifier of entity this payment should be attributed to.
                example: '123456'
              type:
                type: string
                title: Allocation type
                description: Type of entity this payment should be attributed to.
                x-graphql-type-name: AllocationType
                x-apideck-enum-id: allocations.type
                enum:
                  - invoice
                  - order
                  - expense
                  - credit_memo
                  - over_payment
                  - pre_payment
              code:
                type: string
                example: N091
                readOnly: true
              amount:
                type: number
                title: Amount
                description: 'Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.'
                example: 49.99
                nullable: true
        note:
          type: string
          title: Note
          description: Optional note to be associated with the credit note.
          example: Some notes about this credit note
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    Currency:
      type: string
      title: Currency
      description: 'Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).'
      example: USD
      x-apideck-enum-id: currencies
      x-apideck-enum-coverage-ignore: true
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
      x-enum-elements:
        - name: UNKNOWN_CURRENCY
          description: Unknown currency
        - name: AED
          description: United Arab Emirates dirham
        - name: AFN
          description: Afghan afghani
        - name: ALL
          description: Albanian lek
        - name: AMD
          description: Armenian dram
        - name: ANG
          description: Netherlands Antillean guilder
        - name: AOA
          description: Angolan kwanza
        - name: ARS
          description: Argentine peso
        - name: AUD
          description: Australian dollar
        - name: AWG
          description: Aruban florin
        - name: AZN
          description: Azerbaijani manat
        - name: BAM
          description: Bosnia and Herzegovina convertible mark
        - name: BBD
          description: Barbados dollar
        - name: BDT
          description: Bangladeshi taka
        - name: BGN
          description: Bulgarian lev
        - name: BHD
          description: Bahraini dinar
        - name: BIF
          description: Burundian franc
        - name: BMD
          description: Bermudian dollar
        - name: BND
          description: Brunei dollar
        - name: BOB
          description: Boliviano
        - name: BOV
          description: Bolivian Mvdol
        - name: BRL
          description: Brazilian real
        - name: BSD
          description: Bahamian dollar
        - name: BTN
          description: Bhutanese ngultrum
        - name: BWP
          description: Botswana pula
        - name: BYR
          description: Belarusian ruble
        - name: BZD
          description: Belize dollar
        - name: CAD
          description: Canadian dollar
        - name: CDF
          description: Congolese franc
        - name: CHE
          description: WIR Euro
        - name: CHF
          description: Swiss franc
        - name: CHW
          description: WIR Franc
        - name: CLF
          description: Unidad de Fomento
        - name: CLP
          description: Chilean peso
        - name: CNY
          description: Chinese yuan
        - name: COP
          description: Colombian peso
        - name: COU
          description: Unidad de Valor Real
        - name: CRC
          description: Costa Rican colon
        - name: CUC
          description: Cuban convertible peso
        - name: CUP
          description: Cuban peso
        - name: CVE
          description: Cape Verdean escudo
        - name: CZK
          description: Czech koruna
        - name: DJF
          description: Djiboutian franc
        - name: DKK
          description: Danish krone
        - name: DOP
          description: Dominican peso
        - name: DZD
          description: Algerian dinar
        - name: EGP
          description: Egyptian pound
        - name: ERN
          description: Eritrean nakfa
        - name: ETB
          description: Ethiopian birr
        - name: EUR
          description: Euro
        - name: FJD
          description: Fiji dollar
        - name: FKP
          description: Falkland Islands pound
        - name: GBP
          description: Pound sterling
        - name: GEL
          description: Georgian lari
        - name: GHS
          description: Ghanaian cedi
        - name: GIP
          description: Gibraltar pound
        - name: GMD
          description: Gambian dalasi
        - name: GNF
          description: Guinean franc
        - name: GTQ
          description: Guatemalan quetzal
        - name: GYD
          description: Guyanese dollar
        - name: HKD
          description: Hong Kong dollar
        - name: HNL
          description: Honduran lempira
        - name: HRK
          description: Croatian kuna
        - name: HTG
          description: Haitian gourde
        - name: HUF
          description: Hungarian forint
        - name: IDR
          description: Indonesian rupiah
        - name: ILS
          description: Israeli new shekel
        - name: INR
          description: Indian rupee
        - name: IQD
          description: Iraqi dinar
        - name: IRR
          description: Iranian rial
        - name: ISK
          description: Icelandic króna
        - name: JMD
          description: Jamaican dollar
        - name: JOD
          description: Jordanian dinar
        - name: JPY
          description: Japanese yen
        - name: KES
          description: Kenyan shilling
        - name: KGS
          description: Kyrgyzstani som
        - name: KHR
          description: Cambodian riel
        - name: KMF
          description: Comoro franc
        - name: KPW
          description: North Korean won
        - name: KRW
          description: South Korean won
        - name: KWD
          description: Kuwaiti dinar
        - name: KYD
          description: Cayman Islands dollar
        - name: KZT
          description: Kazakhstani tenge
        - name: LAK
          description: Lao kip
        - name: LBP
          description: Lebanese pound
        - name: LKR
          description: Sri Lankan rupee
        - name: LRD
          description: Liberian dollar
        - name: LSL
          description: Lesotho loti
        - name: LTL
          description: Lithuanian litas
        - name: LVL
          description: Latvian lats
        - name: LYD
          description: Libyan dinar
        - name: MAD
          description: Moroccan dirham
        - name: MDL
          description: Moldovan leu
        - name: MGA
          description: Malagasy ariary
        - name: MKD
          description: Macedonian denar
        - name: MMK
          description: Myanmar kyat
        - name: MNT
          description: Mongolian tögrög
        - name: MOP
          description: Macanese pataca
        - name: MRO
          description: Mauritanian ouguiya
        - name: MUR
          description: Mauritian rupee
        - name: MVR
          description: Maldivian rufiyaa
        - name: MWK
          description: Malawian kwacha
        - name: MXN
          description: Mexican peso
        - name: MXV
          description: Mexican Unidad de Inversion
        - name: MYR
          description: Malaysian ringgit
        - name: MZN
          description: Mozambican metical
        - name: NAD
          description: Namibian dollar
        - name: NGN
          description: Nigerian naira
        - name: NIO
          description: Nicaraguan córdoba
        - name: NOK
          description: Norwegian krone
        - name: NPR
          description: Nepalese rupee
        - name: NZD
          description: New Zealand dollar
        - name: OMR
          description: Omani rial
        - name: PAB
          description: Panamanian balboa
        - name: PEN
          description: Peruvian sol
        - name: PGK
          description: Papua New Guinean kina
        - name: PHP
          description: Philippine peso
        - name: PKR
          description: Pakistani rupee
        - name: PLN
          description: Polish złoty
        - name: PYG
          description: Paraguayan guaraní
        - name: QAR
          description: Qatari riyal
        - name: RON
          description: Romanian leu
        - name: RSD
          description: Serbian dinar
        - name: RUB
          description: Russian ruble
        - name: RWF
          description: Rwandan franc
        - name: SAR
          description: Saudi riyal
        - name: SBD
          description: Solomon Islands dollar
        - name: SCR
          description: Seychelles rupee
        - name: SDG
          description: Sudanese pound
        - name: SEK
          description: Swedish krona
        - name: SGD
          description: Singapore dollar
        - name: SHP
          description: Saint Helena pound
        - name: SLL
          description: Sierra Leonean leone
        - name: SOS
          description: Somali shilling
        - name: SRD
          description: Surinamese dollar
        - name: SSP
          description: South Sudanese pound
        - name: STD
          description: São Tomé and Príncipe dobra
        - name: SVC
          description: Salvadoran colón
        - name: SYP
          description: Syrian pound
        - name: SZL
          description: Swazi lilangeni
        - name: THB
          description: Thai baht
        - name: TJS
          description: Tajikstani somoni
        - name: TMT
          description: Turkmenistan manat
        - name: TND
          description: Tunisian dinar
        - name: TOP
          description: Tongan pa'anga
        - name: TRY
          description: Turkish lira
        - name: TTD
          description: Trinidad and Tobago dollar
        - name: TWD
          description: New Taiwan dollar
        - name: TZS
          description: Tanzanian shilling
        - name: UAH
          description: Ukrainian hryvnia
        - name: UGX
          description: Ugandan shilling
        - name: USD
          description: United States dollar
        - name: USN
          description: United States dollar (next day)
        - name: USS
          description: United States dollar (same day)
        - name: UYI
          description: Uruguay Peso en Unidedades Indexadas
        - name: UYU
          description: Uruguyan peso
        - name: UZS
          description: Uzbekistan som
        - name: VEF
          description: Venezuelan bolívar soberano
        - name: VND
          description: Vietnamese đồng
        - name: VUV
          description: Vanuatu vatu
        - name: WST
          description: Samoan tala
        - name: XAF
          description: CFA franc BEAC
        - name: XAG
          description: Silver
        - name: XAU
          description: Gold
        - name: XBA
          description: European Composite Unit
        - name: XBB
          description: European Monetary Unit
        - name: XBC
          description: European Unit of Account 9
        - name: XBD
          description: European Unit of Account 17
        - name: XCD
          description: East Caribbean dollar
        - name: XDR
          description: Special drawing rights (International Monetary Fund)
        - name: XOF
          description: CFA franc BCEAO
        - name: XPD
          description: Palladium
        - name: XPF
          description: CFP franc
        - name: XPT
          description: Platinum
        - name: XTS
          description: Code reserved for testing
        - name: XXX
          description: No currency
        - name: YER
          description: Yemeni rial
        - name: ZAR
          description: South African rand
        - name: ZMK
          description: Zambian kwacha
        - name: ZMW
          description: Zambian kwacha
        - name: BTC
          description: Bitcoin
      nullable: true
    CurrencyRate:
      type: number
      title: Currency Exchange Rate
      description: Currency Exchange Rate at the time entity was recorded/generated.
      nullable: true
      example: 0.69
    CustomersFilter:
      type: object
      x-apideck-schema-id: CustomersFilter
      x-graphql-type-name: CustomersFilter
      example:
        company_name: SpaceX
        display_name: Elon Musk
        first_name: Elon
        last_name: Musk
        email: elon@musk.com
      properties:
        company_name:
          type: string
          title: Company Name
          description: Company Name of customer to search for
          example: SpaceX
        display_name:
          type: string
          title: Display Name
          description: Display Name of customer to search for
          example: Techno King
        first_name:
          type: string
          title: First Name
          description: First name of customer to search for
          example: Elon
        last_name:
          type: string
          title: Last Name
          description: Last name of customer to search for
          example: Musk
        email:
          type: string
          title: Email
          description: Email of customer to search for
          example: elon@spacex.com
      additionalProperties: false
    CustomField:
      type: object
      x-apideck-schema-id: CustomField
      required:
        - id
      additionalProperties: false
      x-apideck-weights:
        id: critical
        value: critical
        name: medium
        description: edge-case
      properties:
        id:
          title: ID
          type: string
          example: '2389328923893298'
        name:
          title: Name
          type: string
          description: Name of the custom field.
          example: employee_level
        description:
          title: Description
          type: string
          description: More information about the custom field
          example: Employee Level
        value:
          anyOf:
            - type: string
              example: Uses Salesforce and Marketo
              nullable: true
            - type: number
              example: 10
              nullable: true
            - type: boolean
              example: true
              nullable: true
            - type: array
              items:
                type: string
    DeleteBillResponse:
      type: object
      x-apideck-schema-id: DeleteBillResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: bills
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteCreditNoteResponse:
      type: object
      x-apideck-schema-id: DeleteCreditNoteResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: credit-notes
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteCustomerResponse:
      type: object
      x-apideck-schema-id: DeleteCustomerResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: customers
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteInvoiceItemResponse:
      $ref: '#/components/schemas/DeleteTaxRateResponse'
    DeleteInvoiceResponse:
      type: object
      x-apideck-schema-id: DeleteInvoiceResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoices
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/InvoiceResponse'
    DeleteLedgerAccountResponse:
      type: object
      x-apideck-schema-id: DeleteLedgerAccountResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: ledger-accounts
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeletePaymentResponse:
      type: object
      x-apideck-schema-id: DeletePaymentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteSupplierResponse:
      type: object
      x-apideck-schema-id: DeleteSupplierResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: suppliers
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteTaxRateResponse:
      type: object
      x-apideck-schema-id: DeleteTaxRateResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: tax-rates
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
    DownstreamId:
      type: string
      description: The third-party API ID of original entity
      example: '12345'
      nullable: true
      readOnly: true
    Email:
      type: object
      x-apideck-schema-id: Email
      required:
        - email
      additionalProperties: false
      x-apideck-weights:
        email: critical
        type: critical
        id: edge-case
      properties:
        id:
          type: string
          example: '123'
        email:
          type: string
          format: email
          example: elon@musk.com
          minLength: 1
        type:
          type: string
          x-graphql-type-name: EmailType
          x-apideck-enum-id: emails.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
    FirstName:
      type: string
      title: First name
      example: Elon
      nullable: true
    GetBalanceSheetResponse:
      type: object
      x-apideck-schema-id: GetBalanceSheetResponse
      x-graphql-type-name: BalanceSheet
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: quickbooks
        resource:
          type: string
          description: Unified API resource name
          example: BalanceSheets
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/BalanceSheet'
    GetBillResponse:
      type: object
      x-apideck-schema-id: GetBillResponse
      x-graphql-type-name: Bill
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: bills
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Bill'
    GetBillsResponse:
      type: object
      x-apideck-schema-id: GetBillsResponse
      x-graphql-type-name: BillList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: bills
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bill'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetCompanyInfoResponse:
      type: object
      x-apideck-schema-id: GetCompanyInfoResponse
      x-graphql-type-name: CompanyInfo
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: company-info
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/CompanyInfo'
    GetCreditNoteResponse:
      type: object
      x-apideck-schema-id: GetCreditNoteResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: credit-notes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/CreditNote'
    GetCreditNotesResponse:
      type: object
      x-apideck-schema-id: GetCreditNotesResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: credit-notes
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/CreditNote'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetCustomerResponse:
      type: object
      x-apideck-schema-id: GetCustomerResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: customers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/AccountingCustomer'
    GetCustomersResponse:
      type: object
      x-apideck-schema-id: GetCustomersResponse
      x-graphql-type-name: CustomerList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: customers
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountingCustomer'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetInvoiceItemResponse:
      type: object
      x-apideck-schema-id: GetInvoiceItemResponse
      x-graphql-type-name: InvoiceItem
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoice-items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/InvoiceItem'
    GetInvoiceItemsResponse:
      type: object
      x-apideck-schema-id: GetInvoiceItemsResponse
      x-graphql-type-name: InvoiceItemList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoice-items
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetInvoiceResponse:
      type: object
      x-apideck-schema-id: GetInvoiceResponse
      x-graphql-type-name: Invoice
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoices
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Invoice'
    GetInvoicesResponse:
      type: object
      x-apideck-schema-id: GetInvoicesResponse
      x-graphql-type-name: InvoiceList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoices
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetLedgerAccountResponse:
      type: object
      x-apideck-schema-id: GetLedgerAccountResponse
      x-graphql-type-name: LedgerAccount
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: ledger-accounts
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/LedgerAccount'
    GetLedgerAccountsResponse:
      type: object
      x-apideck-schema-id: GetLedgerAccountsResponse
      x-graphql-type-name: LedgerAccountList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: ledger-accounts
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/LedgerAccount'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetPaymentResponse:
      type: object
      x-apideck-schema-id: GetPaymentResponse
      x-graphql-type-name: Payment
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Payment'
    GetPaymentsResponse:
      type: object
      x-apideck-schema-id: GetPaymentsResponse
      x-graphql-type-name: PaymentList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetProfitAndLossResponse:
      type: object
      x-apideck-schema-id: GetProfitAndLossResponse
      x-graphql-type-name: ProfitAndLoss
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: quickbooks
        resource:
          type: string
          description: Unified API resource name
          example: ProfitAndLosses
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/ProfitAndLoss'
    GetSupplierResponse:
      type: object
      x-apideck-schema-id: GetSupplierResponse
      x-graphql-type-name: Supplier
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: suppliers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Supplier'
    GetSuppliersResponse:
      type: object
      x-apideck-schema-id: GetSuppliersResponse
      x-graphql-type-name: SupplierList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: suppliers
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Supplier'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetTaxRateResponse:
      type: object
      x-apideck-schema-id: GetTaxRateResponse
      x-graphql-type-name: TaxRateOne
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: tax-rates
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/TaxRate'
    GetTaxRatesResponse:
      type: object
      x-apideck-schema-id: GetTaxRatesResponse
      x-graphql-type-name: TaxRateList
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: tax-rates
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Id:
      type: string
      example: '12345'
      readOnly: true
    Invoice:
      type: object
      x-apideck-schema-id: Invoice
      additionalProperties: false
      x-apideck-weights:
        id: critical
        type: high
        invoice_date: edge-case
        due_date: edge-case
        downstream_id: low
        number: high
        customer: high
        terms: low
        po_number: low
        reference: low
        status: critical
        invoice_sent: low
        currency: medium
        currency_rate: low
        tax_inclusive: low
        sub_total: high
        total_tax: high
        tax_code: medium
        discount_percentage: medium
        total: critical
        deposit: low
        balance: high
        customer_memo: low
        line_items: critical
        billing_address: high
        shipping_address: medium
        source_document_url: edge-case
        template_id: edge-case
        row_version: edge-case
        updated_by: low
        created_by: low
        created_at: high
        updated_at: high
      properties:
        id:
          $ref: '#/components/schemas/Id'
        downstream_id:
          $ref: '#/components/schemas/DownstreamId'
        type:
          type: string
          title: Invoice type
          description: Invoice type
          x-graphql-type-name: InvoiceType
          x-apideck-enum-id: invoices.type
          enum:
            - standard
            - credit
            - service
            - product
            - supplier
            - other
          example: service
          nullable: true
        number:
          type: string
          title: Invoice number
          description: Invoice number.
          example: OIT00546
          nullable: true
        customer:
          $ref: '#/components/schemas/LinkedCustomer'
        invoice_date:
          type: string
          title: Invoice date
          description: Date invoice was issued - YYYY-MM-DD.
          format: date
          example: '2020-09-30'
          nullable: true
        due_date:
          type: string
          title: Due date
          description: The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
          format: date
          example: '2020-09-30'
          nullable: true
        terms:
          type: string
          title: Terms
          description: Terms of payment.
          example: Net 30 days
          nullable: true
        po_number:
          type: string
          title: Purchase Order number
          description: A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
          example: '90000117'
          nullable: true
        reference:
          type: string
          title: Invoice reference
          description: Optional invoice reference.
          example: '123456'
          nullable: true
        status:
          type: string
          title: Status
          description: Invoice status
          example: draft
          x-apideck-enum-id: invoices.status
          enum:
            - draft
            - submitted
            - authorised
            - partially_paid
            - paid
            - void
            - credit
            - deleted
          nullable: true
        invoice_sent:
          type: boolean
          title: Invoice Sent
          description: Invoice sent to contact/customer.
          example: true
        currency:
          $ref: '#/components/schemas/Currency'
        currency_rate:
          $ref: '#/components/schemas/CurrencyRate'
        tax_inclusive:
          $ref: '#/components/schemas/TaxInclusive'
        sub_total:
          title: Sub-total amount
          description: 'Sub-total amount, normally before tax.'
          type: number
          example: 27500
          nullable: true
        total_tax:
          type: number
          title: Total tax amount
          description: Total tax amount applied to this invoice.
          example: 2500
          nullable: true
        tax_code:
          type: string
          title: Tax Code
          description: Applicable tax id/code override if tax is not supplied on a line item basis.
          example: '1234'
          nullable: true
        discount_percentage:
          type: number
          title: Discount
          description: Discount percentage applied to this invoice.
          example: 5.5
          nullable: true
        total:
          type: number
          title: Total amount
          description: 'Total amount of invoice, including tax.'
          example: 27500
          nullable: true
        balance:
          type: number
          title: Balance
          description: Balance of invoice due.
          example: 27500
          nullable: true
        deposit:
          type: number
          title: Deposit
          description: Amount of deposit made to this invoice.
          example: 0
          nullable: true
        customer_memo:
          type: string
          title: Customer memo
          description: Customer memo
          example: Thank you for your business and have a great day!
          nullable: true
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        billing_address:
          $ref: '#/components/schemas/Address'
        shipping_address:
          $ref: '#/components/schemas/Address'
        template_id:
          type: string
          title: Template
          description: Optional invoice template
          example: '123456'
          nullable: true
        source_document_url:
          type: string
          title: Source document URL
          description: "URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero."
          example: 'https://www.invoicesolution.com/invoice/123456'
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    InvoiceItem:
      type: object
      x-apideck-schema-id: InvoiceItem
      x-apideck-weights:
        id: critical
        name: critical
        description: medium
        code: high
        sold: edge-case
        purchased: edge-case
        tracked: edge-case
        inventory_date: high
        type: high
        sales_details: medium
        purchase_details: medium
        quantity: high
        unit_price: high
        asset_account: medium
        income_account: high
        expense_account: medium
        active: medium
        row_version: edge-case
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: medium
      additionalProperties: false
      properties:
        id:
          title: Item ID
          description: The ID of the item.
          type: string
          example: '123456'
          readOnly: true
        name:
          type: string
          title: Item name
          description: Item name
          example: Model Y
          nullable: true
        description:
          type: string
          title: Description
          description: A short description of the item
          example: 'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
          nullable: true
        code:
          type: string
          title: Item code
          description: User defined item code
          example: 120-C
          nullable: true
        sold:
          type: boolean
          title: Item sold
          description: Item will be available on sales transactions
          example: true
          nullable: true
        purchased:
          type: boolean
          title: Item purchased
          description: Item is available for purchase transactions
          example: true
          nullable: true
        tracked:
          type: boolean
          title: Item tracked
          description: Item is inventoried
          example: true
          nullable: true
        inventory_date:
          type: string
          title: Inventory date
          description: The date of opening balance if inventory item is tracked - YYYY-MM-DD.
          format: date
          example: '2020-10-30'
          nullable: true
        type:
          type: string
          title: Type
          description: Item type
          x-graphql-type-name: InvoiceItemType
          example: inventory
          x-apideck-enum-id: invoice-items.type
          enum:
            - inventory
            - service
            - other
          nullable: true
        sales_details:
          x-apideck-weights:
            unit_price: medium
            unit_of_measure: medium
            tax_inclusive: medium
            tax_rate: medium
          type: object
          properties:
            unit_price:
              $ref: '#/components/schemas/UnitPrice'
            unit_of_measure:
              $ref: '#/components/schemas/UnitOfMeasure'
            tax_inclusive:
              $ref: '#/components/schemas/TaxInclusive'
            tax_rate:
              $ref: '#/components/schemas/LinkedTaxRate'
        purchase_details:
          x-apideck-weights:
            unit_price: medium
            unit_of_measure: medium
            tax_inclusive: medium
            tax_rate: medium
          type: object
          properties:
            unit_price:
              $ref: '#/components/schemas/UnitPrice'
            unit_of_measure:
              $ref: '#/components/schemas/UnitOfMeasure'
            tax_inclusive:
              $ref: '#/components/schemas/TaxInclusive'
            tax_rate:
              $ref: '#/components/schemas/LinkedTaxRate'
        quantity:
          $ref: '#/components/schemas/Quantity'
        unit_price:
          $ref: '#/components/schemas/UnitPrice'
        asset_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        income_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        expense_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        active:
          $ref: '#/components/schemas/Active'
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    InvoiceItemAssetAccount:
      $ref: '#/components/schemas/LinkedLedgerAccount'
    InvoiceItemExpenseAccount:
      $ref: '#/components/schemas/LinkedLedgerAccount'
    InvoiceItemIncomeAccount:
      $ref: '#/components/schemas/LinkedLedgerAccount'
    InvoiceItemsFilter:
      type: object
      x-apideck-schema-id: InvoiceItemsFilter
      x-graphql-type-name: InvoiceItemsFilter
      example:
        name: Widgets Large
      properties:
        name:
          type: string
          title: Name
          description: Name of Invoice Items to search for
          example: Widgets Large
      additionalProperties: false
    InvoiceLineItem:
      type: object
      x-apideck-schema-id: InvoiceLineItem
      additionalProperties: false
      x-apideck-weights:
        id: high
        row_id: edge-case
        code: medium
        line_number: medium
        description: high
        type: medium
        tax_amount: high
        total_amount: critical
        quantity: high
        unit_price: high
        unit_of_measure: edge-case
        discount_percentage: low
        item: critical
        tax_rate: medium
        ledger_account: low
        row_version: edge-case
      properties:
        id:
          $ref: '#/components/schemas/Id'
        row_id:
          type: string
          title: Row ID
          description: Row ID
          example: '12345'
        code:
          type: string
          title: Item code
          description: User defined item code
          example: 120-C
          nullable: true
        line_number:
          type: integer
          title: Line number
          description: Line number in the invoice
          example: 1
          nullable: true
        description:
          type: string
          title: Description
          description: User defined description
          example: 'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.'
          nullable: true
        type:
          type: string
          title: Type
          description: Item type
          x-graphql-type-name: InvoiceLineItemType
          example: sales_item
          x-apideck-enum-id: invoices.lines-items.type
          enum:
            - sales_item
            - discount
            - info
            - sub_total
          nullable: true
        tax_amount:
          type: number
          title: Tax amount
          description: Tax amount
          example: 27500
          nullable: true
        total_amount:
          type: number
          title: Total amount
          description: Total amount of the line item
          example: 27500
          nullable: true
        quantity:
          $ref: '#/components/schemas/Quantity'
        unit_price:
          $ref: '#/components/schemas/UnitPrice'
        unit_of_measure:
          $ref: '#/components/schemas/UnitOfMeasure'
        discount_percentage:
          type: number
          title: Discount
          description: Discount percentage applied to the line item when supported downstream.
          example: 0.01
          nullable: true
        item:
          $ref: '#/components/schemas/LinkedInvoiceItem'
        tax_rate:
          $ref: '#/components/schemas/LinkedTaxRate'
        ledger_account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        row_version:
          $ref: '#/components/schemas/RowVersion'
    InvoicesSort:
      type: object
      x-apideck-schema-id: InvoicesSort
      x-graphql-type-name: InvoicesSort
      example:
        by: updated_at
        direction: desc
      properties:
        by:
          type: string
          x-graphql-type-name: InvoicesSortBy
          x-apideck-enum-id: invoices.sort_by
          description: The field on which to sort the Invoices
          enum:
            - updated_at
          example: updated_at
        direction:
          $ref: '#/components/schemas/SortDirection'
      additionalProperties: false
    InvoiceResponse:
      type: object
      x-apideck-schema-id: InvoiceResponse
      properties:
        id:
          $ref: '#/components/schemas/Id'
        downstream_id:
          $ref: '#/components/schemas/DownstreamId'
    Language:
      type: string
      example: EN
      description: language code according to ISO 639-1. For the United States - EN
      nullable: true
    LastName:
      type: string
      title: Last name
      example: Musk
      nullable: true
    LedgerAccount:
      type: object
      x-apideck-schema-id: LedgerAccount
      additionalProperties: true
      x-apideck-weights:
        id: critical
        display_id: low
        nominal_code: low
        code: low
        classification: edge-case
        type: high
        sub_type: edge-case
        name: high
        fully_qualified_name: edge-case
        description: edge-case
        opening_balance: edge-case
        current_balance: edge-case
        currency: edge-case
        tax_type: edge-case
        tax_rate: edge-case
        level: edge-case
        active: edge-case
        status: medium
        header: edge-case
        bank_account: high
        categories: high
        parent_account: high
        sub_account: medium
        sub_accounts: medium
        last_reconciliation_date: edge-case
        row_version: edge-case
        updated_by: edge-case
        created_by: edge-case
        created_at: low
        updated_at: high
      properties:
        id:
          $ref: '#/components/schemas/Id'
        display_id:
          type: string
          title: Display ID
          description: The human readable display ID used when displaying the account
          example: 1-12345
        nominal_code:
          type: string
          title: Nominal Code
          description: The nominal code of the ledger account.
          example: N091
          nullable: true
          deprecated: true
        code:
          type: string
          title: Code
          description: The code assigned to the account.
          example: '453'
          nullable: true
        classification:
          type: string
          title: Classification
          description: The classification of account.
          x-apideck-enum-id: ledger-accounts.classification
          enum:
            - asset
            - equity
            - expense
            - liability
            - revenue
            - income
            - other_income
            - other_expense
            - costs_of_sales
          example: asset
          nullable: true
        type:
          x-graphql-type-name: LedgerAccountType
          type: string
          title: Type
          description: The type of account.
          x-apideck-enum-id: ledger-accounts.type
          enum:
            - accounts_receivable
            - revenue
            - sales
            - other_income
            - bank
            - current_asset
            - fixed_asset
            - non_current_asset
            - other_asset
            - balancesheet
            - equity
            - expense
            - other_expense
            - costs_of_sales
            - accounts_payable
            - credit_card
            - current_liability
            - non_current_liability
            - other_liability
          example: bank
        sub_type:
          type: string
          title: Sub Type
          description: The sub type of account.
          example: CHECKING_ACCOUNT
          nullable: true
        name:
          type: string
          title: Name
          description: The name of the account.
          example: Bank account
          nullable: true
        fully_qualified_name:
          type: string
          title: Fully Qualified Name
          description: The fully qualified name of the account.
          example: Asset.Bank.Checking_Account
          nullable: true
        description:
          type: string
          title: Description
          description: The description of the account.
          example: Main checking account
          nullable: true
        opening_balance:
          type: number
          title: Opening balance
          description: The opening balance of the account.
          example: 75000
          nullable: true
        current_balance:
          type: number
          title: Current balance
          description: The current balance of the account.
          example: 20000
          nullable: true
        currency:
          $ref: '#/components/schemas/Currency'
        tax_type:
          type: string
          title: Tax Type
          description: The tax type of the account.
          example: NONE
          nullable: true
        tax_rate:
          $ref: '#/components/schemas/LinkedTaxRate'
        level:
          type: number
          example: 1
          nullable: true
        active:
          type: boolean
          title: Is active
          description: Whether the account is active or not.
          example: true
          nullable: true
        status:
          type: string
          title: Account status
          description: The status of the account.
          x-graphql-type-name: LedgerAccountStatus
          x-apideck-enum-id: ledger-accounts.status
          enum:
            - active
            - inactive
            - archived
          example: active
          nullable: true
        header:
          type: boolean
          title: Is header
          description: Whether the account is a header or not.
          example: true
          nullable: true
        bank_account:
          $ref: '#/components/schemas/BankAccount'
        categories:
          type: array
          title: Categories
          description: The categories of the account.
          readOnly: true
          items:
            type: object
            properties:
              id:
                type: string
                readOnly: true
                example: '12345'
              name:
                type: string
                title: Category name
                description: The name of the category.
                readOnly: true
                example: Finance Charges Expense
        parent_account:
          type: object
          properties:
            id:
              type: string
              title: Parent account ID
              description: The ID of the parent account.
              example: '12345'
            name:
              type: string
              title: Name
              description: The name of the parent account.
              example: Bank Accounts
            display_id:
              type: string
              title: Display ID
              description: The human readable display ID used when displaying the parent account
              example: 1-1100
        sub_account:
          type: boolean
          title: Is sub account
          description: Whether the account is a sub account or not.
          example: false
          nullable: true
        sub_accounts:
          type: array
          readOnly: true
          title: Sub accounts
          description: The sub accounts of the account.
          items:
            properties:
              id:
                type: string
                title: Sub account ID
                description: The ID of the sub account.
                readOnly: true
                example: '12345'
              account_sub_name:
                type: string
                title: Sub Account Name
                description: The name of the sub account.
                readOnly: true
                example: Petty Cash
        last_reconciliation_date:
          type: string
          title: Last Reconciliation Date
          description: Reconciliation Date means the last calendar day of each Reconciliation Period.
          format: date
          example: '2020-09-30'
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    LedgerAccounts:
      items:
        $ref: '#/components/schemas/LedgerAccount'
      type: array
    LinkedCustomer:
      type: object
      x-apideck-schema-id: LinkedCustomer
      title: LinkedCustomer
      description: The customer this entity is linked to.
      x-graphql-type-name: AccountingLinkedCustomer
      x-apideck-weights:
        id: medium
        display_id: medium
        display_name: medium
        company_name: medium
      nullable: true
      required:
        - id
      properties:
        id:
          type: string
          title: Customer ID
          description: The ID of the customer this entity is linked to.
          example: '12345'
        display_id:
          type: string
          title: Display ID
          description: The display ID of the customer.
          example: CUST00101
          nullable: true
          readOnly: true
        display_name:
          type: string
          title: Display Name
          description: The display name of the customer.
          example: Windsurf Shop
          nullable: true
        name:
          type: string
          title: Name
          description: 'The name of the customer. Deprecated, use display_name instead.'
          example: Windsurf Shop
          deprecated: true
        company_name:
          type: string
          title: Company Name
          description: The company name of the customer.
          example: The boring company
          nullable: true
          readOnly: true
    LinkedInvoiceItem:
      type: object
      x-apideck-schema-id: LinkedInvoiceItem
      x-graphql-type-name: LinkedInvoiceItem
      x-apideck-weights:
        id: medium
        code: medium
        name: medium
      properties:
        id:
          type: string
          title: Item ID
          description: 'ID of the linked item. A reference to the [invoice item](https://developers.apideck.com/apis/accounting/reference#tag/Invoice-Items) that was used to create this line item'
          example: '12344'
          nullable: true
        code:
          type: string
          title: Item code
          description: User defined item code
          example: 120-C
          readOnly: true
          nullable: true
        name:
          type: string
          title: Item name
          description: User defined item name
          example: Model Y
          readOnly: true
          nullable: true
    LinkedLedgerAccount:
      type: object
      x-apideck-schema-id: LinkedLedgerAccount
      x-graphql-type-name: LinkedLedgerAccount
      x-apideck-weights:
        id: medium
        nominal_code: medium
        code: medium
        name: medium
      nullable: true
      properties:
        id:
          title: Account ID
          description: The unique identifier for the account.
          type: string
          example: '123456'
        name:
          type: string
          title: Account Name
          description: The name of the account.
          example: Bank account
          readOnly: true
          nullable: true
        nominal_code:
          type: string
          title: Nominal Code
          description: The nominal code of the account.
          example: N091
          nullable: true
        code:
          type: string
          title: Code
          description: The code assigned to the account.
          example: '453'
          nullable: true
    LinkedSupplier:
      type: object
      x-apideck-schema-id: LinkedSupplier
      title: LinkedSupplier
      description: The supplier this entity is linked to.
      x-graphql-type-name: AccountingLinkedSupplier
      x-apideck-weights:
        id: medium
        display_name: high
        company_name: edge-case
        address: low
      nullable: true
      required:
        - id
      properties:
        id:
          type: string
          title: Supplier ID
          description: The ID of the supplier this entity is linked to.
          example: '12345'
        display_name:
          type: string
          title: Display Name
          description: The display name of the supplier.
          example: Windsurf Shop
          nullable: true
        company_name:
          type: string
          title: Company Name
          description: The company name of the supplier.
          example: The boring company
          nullable: true
          readOnly: true
        address:
          $ref: '#/components/schemas/Address'
    LinkedTaxRate:
      type: object
      x-apideck-schema-id: LinkedTaxRate
      x-graphql-type-name: LinkedTaxRate
      x-apideck-weights:
        id: medium
        code: medium
        name: medium
      properties:
        id:
          type: string
          title: The ID of the object.
          description: The ID of the object.
          example: '123456'
          nullable: true
        code:
          type: string
          title: Tax rate code
          description: Tax rate code
          example: N-T
          nullable: true
          readOnly: true
        name:
          type: string
          title: Name
          description: Name of the tax rate
          example: GST on Purchases
          nullable: true
          readOnly: true
    Links:
      type: object
      x-apideck-schema-id: Links
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: 'https://unify.apideck.com/crm/companies'
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
          nullable: true
    Meta:
      type: object
      x-apideck-schema-id: Meta
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    MiddleName:
      type: string
      title: Middle name
      example: D.
      nullable: true
    NotFoundResponse:
      type: object
      x-apideck-schema-id: NotFound
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#entitynotfounderror'
    NotImplementedResponse:
      type: object
      x-apideck-schema-id: NotImplemented
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#mappingerror'
    Passthrough:
      type: object
      additionalProperties: true
      properties:
        example_downstream_property:
          type: string
          description: 'All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)'
    Payment:
      type: object
      x-apideck-schema-id: Payment
      x-apideck-weights:
        id: critical
        currency: critical
        currency_rate: medium
        total_amount: critical
        reference: medium
        payment_method: medium
        payment_method_reference: medium
        accounts_receivable_account_type: edge-case
        accounts_receivable_account_id: edge-case
        account: critical
        transaction_date: critical
        customer: high
        reconciled: low
        status: high
        type: high
        allocations: critical
        note: low
        row_version: edge-case
        display_id: low
        updated_by: edge-case
        created_by: edge-case
        created_at: medium
        updated_at: medium
      required:
        - total_amount
        - transaction_date
      properties:
        id:
          type: string
          title: Payment identifier
          description: Unique identifier representing the entity
          example: '123456'
          readOnly: true
        currency:
          $ref: '#/components/schemas/Currency'
        currency_rate:
          $ref: '#/components/schemas/CurrencyRate'
        total_amount:
          type: number
          title: Total amount
          description: Amount of payment
          example: 49.99
        reference:
          type: string
          title: Payment reference
          description: 'Optional payment reference message ie: Debit remittance detail.'
          example: '123456'
          nullable: true
        payment_method:
          type: string
          title: Payment method
          description: Payment method
          example: Credit Card
          nullable: true
        payment_method_reference:
          type: string
          title: Payment method reference
          description: Optional reference message returned by payment method on processing
          example: '123456'
          nullable: true
        accounts_receivable_account_type:
          deprecated: true
          type: string
          title: Type of accounts receivable account
          description: Type of accounts receivable account.
          example: Account
          nullable: true
        accounts_receivable_account_id:
          deprecated: true
          type: string
          title: Accounts receivable account id
          description: Unique identifier for the account to allocate payment to.
          example: '123456'
          nullable: true
        account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        transaction_date:
          type: string
          title: Transaction datetime
          description: 'Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD'
          format: date-time
          example: '2021-05-01T12:00:00.000Z'
        customer:
          $ref: '#/components/schemas/LinkedCustomer'
        reconciled:
          type: boolean
          title: Reconciled
          description: Payment has been reconciled
          example: true
        status:
          type: string
          title: Payment status
          x-graphql-type-name: PaymentStatus
          description: Status of payment
          x-apideck-enum-id: payments.status
          enum:
            - authorised
            - paid
            - voided
            - deleted
          example: authorised
        type:
          type: string
          title: Payment Type
          x-graphql-type-name: PaymentType
          description: Type of payment
          x-apideck-enum-id: payments.type
          enum:
            - accounts_receivable
            - accounts_payable
            - accounts_receivable_credit
            - accounts_payable_credit
            - accounts_receivable_overpayment
            - accounts_payable_overpayment
            - accounts_receivable_prepayment
            - accounts_payable_prepayment
          example: accounts_receivable
        allocations:
          type: array
          items:
            type: object
            x-graphql-type-name: PaymentAllocation
            x-apideck-weights:
              id: medium
              type: medium
              code: medium
              amount: medium
            properties:
              id:
                type: string
                title: Linked entity ID
                description: Unique identifier of entity this payment should be attributed to.
                example: '123456'
              type:
                type: string
                title: Allocation type
                description: Type of entity this payment should be attributed to.
                x-graphql-type-name: AllocationType
                x-apideck-enum-id: allocations.type
                enum:
                  - invoice
                  - order
                  - expense
                  - credit_memo
                  - over_payment
                  - pre_payment
              code:
                type: string
                example: N091
                readOnly: true
              amount:
                type: number
                title: Amount
                description: 'Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.'
                example: 49.99
                nullable: true
        note:
          type: string
          title: Note
          description: Optional note to be associated with the payment.
          example: Some notes about this payment
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
        display_id:
          type: string
          title: Display id
          description: Payment id to be displayed.
          example: '123456'
          nullable: true
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
    PaymentRequiredResponse:
      type: object
      x-apideck-schema-id: PaymentRequired
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestlimiterror'
    PhoneNumber:
      type: object
      x-apideck-schema-id: PhoneNumber
      required:
        - number
      additionalProperties: false
      x-apideck-weights:
        number: critical
        type: critical
        id: edge-case
        country_code: edge-case
        area_code: edge-case
        extension: edge-case
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        country_code:
          title: Country code
          type: string
          example: '1'
          nullable: true
        area_code:
          title: Area code
          type: string
          example: '323'
          nullable: true
        number:
          type: string
          title: Phone number
          example: 111-111-1111
          minLength: 1
        extension:
          type: string
          title: Phone extension
          example: '105'
          nullable: true
        type:
          type: string
          x-graphql-type-name: PhoneType
          x-apideck-enum-id: phone_numbers.type
          enum:
            - primary
            - secondary
            - home
            - work
            - office
            - mobile
            - assistant
            - fax
            - direct-dial-in
            - personal
            - other
          example: primary
    ProfitAndLoss:
      type: object
      x-apideck-schema-id: ProfitAndLoss
      x-apideck-circular-ref: true
      x-apideck-weights:
        id: medium
        report_name: medium
        start_date: low
        end_date: low
        currency: critical
        customer: low
        income: critical
        expenses: critical
        net_income: medium
        net_operating_income: medium
        gross_profit: medium
      additionalProperties: false
      required:
        - report_name
        - currency
        - income
        - expenses
      properties:
        id:
          $ref: '#/components/schemas/Id'
        report_name:
          type: string
          description: The name of the report
          title: Report Name
          example: ProfitAndLoss
        start_date:
          type: string
          description: The start date of the report
          title: Start Date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          example: '2017-01-01'
        end_date:
          type: string
          description: The start date of the report
          title: Start Date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          example: '2017-01-01'
        currency:
          type: string
          title: Currency
          example: USD
        customer_id:
          type: string
          description: Customer id
          title: Customer Id
          example: '123'
        income:
          x-apideck-weights:
            total: critical
            record: critical
          type: object
          required:
            - total
            - records
          example:
            total: 200000
            records:
              - id: '123'
                name: Income 1
                amount: 10000
              - id: '456'
                name: Income 2
                amount: 20000
          properties:
            total:
              type: number
              description: Total income
              title: Total income
              nullable: true
              example: 100000
            records:
              $ref: '#/components/schemas/ProfitAndLossRecords'
        expenses:
          x-apideck-weights:
            total: critical
            record: critical
          type: object
          required:
            - total
            - records
          example:
            total: 200000
            records:
              - id: '123'
                name: Expense 1
                amount: 10000
              - id: '456'
                name: Expense 2
                amount: 20000
          properties:
            total:
              type: number
              description: Total expense
              title: Total expense
              nullable: true
              example: 100000
            records:
              $ref: '#/components/schemas/ProfitAndLossRecords'
        net_income:
          x-apideck-weights:
            total: critical
            record: critical
          type: object
          required:
            - total
            - records
          example:
            total: 200000
          nullable: true
          properties:
            total:
              type: number
              description: Total net income
              title: Total net income
              nullable: true
              example: 100000
            records:
              $ref: '#/components/schemas/ProfitAndLossRecords'
        net_operating_income:
          x-apideck-weights:
            total: critical
            record: critical
          type: object
          required:
            - total
            - records
          example:
            total: 200000
          nullable: true
          properties:
            total:
              type: number
              description: Total net operating income
              title: Total net operating income
              nullable: true
              example: 100000
            records:
              $ref: '#/components/schemas/ProfitAndLossRecords'
        gross_profit:
          x-apideck-weights:
            total: critical
            record: critical
          type: object
          required:
            - total
            - records
          example:
            total: 200000
          nullable: true
          properties:
            total:
              type: number
              description: Total gross profit
              title: Total gross profit
              nullable: true
              example: 100000
            records:
              $ref: '#/components/schemas/ProfitAndLossRecords'
    ProfitAndLossFilter:
      type: object
      x-apideck-schema-id: ProfitAndLossFilter
      x-graphql-type-name: ProfitAndLossFilter
      example:
        customer_id: 123abc
        start_date: '2021-01-01'
        end_date: '2021-12-31'
      properties:
        customer_id:
          type: string
          title: Customer Id
          description: Filter by customer id
          example: 123abc
        start_date:
          type: string
          title: Start date
          description: 'Filter by start date. If start date is given, end date is required.'
          example: '2021-01-01'
        end_date:
          type: string
          title: End date
          description: 'Filter by end date. If end date is given, start date is required.'
          example: '2021-12-31'
      additionalProperties: false
    ProfitAndLossRecord:
      type: object
      x-apideck-schema-id: ProfitAndLossRecord
      x-apideck-weights:
        type: critical
      x-graphql-type-name: ProfitAndLossRecord
      required:
        - type
      example:
        type: Record
      properties:
        id:
          type: string
          example: 123abc
          nullable: true
        title:
          type: string
          example: Income
          nullable: true
        type:
          type: string
          example: Record
        value:
          type: number
          example: 23992.34
          nullable: true
    ProfitAndLossRecords:
      type: array
      x-apideck-schema-id: ProfitAndLossRecords
      x-graphql-type-name: ProfitAndLossRecords
      nullable: true
      items:
        anyOf:
          - $ref: '#/components/schemas/ProfitAndLossSection'
          - $ref: '#/components/schemas/ProfitAndLossRecord'
    ProfitAndLossSection:
      type: object
      x-apideck-schema-id: ProfitAndLossSection
      x-apideck-weights:
        id: medium
        title: medium
        type: critical
        total: medium
        records: medium
      x-graphql-type-name: ProfitAndLossSection
      required:
        - type
      example:
        total: 200000
      properties:
        id:
          type: string
          example: 123abc
          nullable: true
        title:
          type: string
          example: Income
          nullable: true
        type:
          type: string
          example: Section
        total:
          type: number
          example: 23992.34
          nullable: true
        records:
          $ref: '#/components/schemas/ProfitAndLossRecords'
    Quantity:
      type: number
      title: Quantity
      example: 1
      nullable: true
    RowVersion:
      type: string
      title: Row version
      example: 1-12345
      nullable: true
    SalesTaxNumber:
      type: string
      title: Sales Tax Number
      example: 111.222.333
      nullable: true
    SocialLink:
      type: object
      x-apideck-schema-id: SocialLink
      required:
        - url
      additionalProperties: false
      x-apideck-weights:
        id: edge-case
        url: critical
        type: critical
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        url:
          type: string
          example: 'https://www.twitter.com/apideck-io'
          minLength: 1
        type:
          type: string
          example: twitter
          nullable: true
    SortDirection:
      type: string
      x-apideck-schema-id: SortDirection
      description: The direction in which to sort the results
      x-apideck-enum-id: sort_direction
      enum:
        - asc
        - desc
      default: asc
      x-graphql-type-name: SortDirection
    Suffix:
      type: string
      title: Suffix
      example: Jr.
      nullable: true
    Supplier:
      type: object
      x-apideck-schema-id: Supplier
      x-apideck-weights:
        id: critical
        downstream_id: edge-case
        company_name: high
        display_name: edge-case
        title: high
        first_name: high
        middle_name: low
        last_name: high
        suffix: low
        addresses: high
        notes: low
        phone_numbers: high
        emails: high
        websites: medium
        bank_accounts: high
        tax_rate: high
        tax_number: medium
        currency: high
        account: edge-case
        status: high
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: low
        row_version: edge-case
      x-graphql-type-name: Supplier
      properties:
        id:
          $ref: '#/components/schemas/Id'
        downstream_id:
          $ref: '#/components/schemas/DownstreamId'
        company_name:
          $ref: '#/components/schemas/CompanyName'
        display_name:
          type: string
          title: Display Name
          description: Display name of supplier.
          example: Windsurf Shop
          nullable: true
        title:
          $ref: '#/components/schemas/Title'
        first_name:
          $ref: '#/components/schemas/FirstName'
        middle_name:
          $ref: '#/components/schemas/MiddleName'
        last_name:
          $ref: '#/components/schemas/LastName'
        suffix:
          $ref: '#/components/schemas/Suffix'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        notes:
          type: string
          title: Notes
          example: Some notes about this supplier
          nullable: true
        phone_numbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        websites:
          type: array
          items:
            $ref: '#/components/schemas/Website'
        bank_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        tax_rate:
          $ref: '#/components/schemas/LinkedTaxRate'
        tax_number:
          $ref: '#/components/schemas/TaxNumber'
        currency:
          $ref: '#/components/schemas/Currency'
        account:
          $ref: '#/components/schemas/LinkedLedgerAccount'
        status:
          type: string
          title: Status
          description: Customer status
          nullable: true
          example: active
          x-graphql-type-name: CustomerStatus
          x-apideck-enum-id: customers.status
          enum:
            - active
            - inactive
            - archived
            - gdpr-erasure-request
            - unknown
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        row_version:
          $ref: '#/components/schemas/RowVersion'
    Tags:
      type: array
      x-apideck-schema-id: Tags
      items:
        type: string
      example:
        - New
    TaxInclusive:
      type: boolean
      title: Tax inclusive
      description: Amounts are including tax
      example: true
      nullable: true
    TaxNumber:
      type: string
      title: Tax number
      example: US123945459
      nullable: true
    TaxRate:
      type: object
      x-apideck-schema-id: TaxRate
      x-apideck-weights:
        id: critical
        name: high
        code: edge-case
        description: low
        effective_tax_rate: critical
        total_tax_rate: high
        tax_payable_account_id: high
        tax_remitted_account_id: medium
        components: medium
        type: high
        report_tax_type: edge-case
        original_tax_rate_id: edge-case
        status: high
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: low
        row_version: edge-case
      additionalProperties: false
      properties:
        id:
          type: string
          description: ID assigned to identify this tax rate.
          example: '1234'
          nullable: true
        name:
          type: string
          title: Name
          description: Name assigned to identify this tax rate.
          example: GST on Purchases
          minLength: 1
        code:
          type: string
          example: ABN
          title: Tax code
          description: Tax code assigned to identify this tax rate.
          nullable: true
        description:
          type: string
          title: Description
          description: Description of tax rate
          example: Reduced rate GST Purchases
          nullable: true
        effective_tax_rate:
          type: number
          title: Effective tax rate
          description: Effective tax rate
          example: 10
          nullable: true
        total_tax_rate:
          type: number
          title: Total tax rate
          description: Not compounded sum of the components of a tax rate
          example: 10
          nullable: true
        tax_payable_account_id:
          type: string
          title: Tax payable account id
          description: Unique identifier for the account for tax collected.
          example: '123456'
          nullable: true
        tax_remitted_account_id:
          type: string
          title: Tax remitted account id
          description: Unique identifier for the account for tax remitted.
          example: '123456'
          nullable: true
        components:
          type: array
          title: Tax components
          items:
            x-apideck-weights:
              id: medium
              name: medium
              rate: medium
              compound: medium
            properties:
              id:
                type: string
                title: TaxRate Id
                example: '10'
                nullable: true
              name:
                type: string
                example: GST
                minLength: 1
              rate:
                type: number
                title: TaxRate
                example: 10
                nullable: true
              compound:
                type: boolean
                title: Compound
                example: true
                nullable: true
          nullable: true
        type:
          type: string
          title: Tax Type
          description: Tax type used to indicate the source of tax collected or paid
          example: NONE
          nullable: true
        report_tax_type:
          type: string
          title: Report Tax Type
          description: Report Tax type to aggregate tax collected or paid for reporting purposes
          example: NONE
          nullable: true
        original_tax_rate_id:
          type: string
          title: Original tax rate ID
          description: ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
          example: '12345'
          nullable: true
        status:
          type: string
          x-apideck-enum-id: tax-rates.status
          enum:
            - active
            - inactive
            - archived
          x-graphql-type-name: TaxRateStatus
          title: Tax rate status
          description: Tax rate status
          example: active
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    TaxRatesFilter:
      type: object
      x-apideck-schema-id: TaxRatesFilter
      x-graphql-type-name: TaxRatesFilter
      example:
        assets: true
        equity: true
        expenses: true
        liabilities: true
        revenue: true
      properties:
        assets:
          type: boolean
          title: Assets
          description: Boolean to describe if tax rate can be used for asset accounts
          example: true
        equity:
          type: boolean
          title: Equity
          description: Boolean to describe if tax rate can be used for equity accounts
          example: true
        expenses:
          type: boolean
          title: Expenses
          description: Boolean to describe if tax rate can be used for expense accounts
          example: true
        liabilities:
          type: boolean
          title: Liabilities
          description: Boolean to describe if tax rate can be used for liability accounts
          example: true
        revenue:
          type: boolean
          title: Revenue
          description: Boolean to describe if tax rate can be used for revenue accounts
          example: true
      additionalProperties: false
    Title:
      type: string
      title: Job title
      example: CEO
      nullable: true
    TooManyRequestsResponse:
      type: object
      x-apideck-schema-id: TooManyRequests
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
        type_name:
          type: string
          description: The type of error returned
          example: ConnectorRateLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
        detail:
          type: object
          properties:
            context:
              type: string
            error:
              type: object
              additionalProperties: true
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#connectorratelimiterror'
    UnauthorizedResponse:
      type: object
      x-apideck-schema-id: Unauthorized
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnexpectedErrorResponse:
      type: object
      x-apideck-schema-id: Error
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnifiedId:
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
      required:
        - id
      properties:
        id:
          type: string
          readOnly: true
          example: '12345'
    UnitOfMeasure:
      type: string
      title: Unit of measure
      description: 'Description of the unit type the item is sold as, ie: kg, hour.'
      example: pc.
      nullable: true
    UnitPrice:
      type: number
      title: Unit price
      example: 27500.5
      nullable: true
    UnprocessableResponse:
      type: object
      x-apideck-schema-id: Unprocessable
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: 'Unprocessable request, please verify your request headers and body.'
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#invalidstateerror'
    UpdateBillResponse:
      type: object
      x-apideck-schema-id: UpdateBillResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: bills
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdateCreditNoteResponse:
      type: object
      x-apideck-schema-id: UpdateCreditNoteResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: credit-notes
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdateCustomerResponse:
      type: object
      x-apideck-schema-id: UpdateCustomerResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: customers
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdatedAt:
      type: string
      title: Updated at (timestamp)
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    UpdatedBy:
      type: string
      example: '12345'
      readOnly: true
      nullable: true
    UpdateInvoiceItemsResponse:
      type: object
      x-apideck-schema-id: UpdateInvoiceItemsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoice-items
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdateInvoiceResponse:
      type: object
      x-apideck-schema-id: UpdateInvoiceResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: invoices
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/InvoiceResponse'
    UpdateLedgerAccountResponse:
      type: object
      x-apideck-schema-id: UpdateLedgerAccountResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: ledger-accounts
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdatePaymentResponse:
      type: object
      x-apideck-schema-id: UpdatePaymentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: payments
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdateSupplierResponse:
      type: object
      x-apideck-schema-id: UpdateSupplierResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: suppliers
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdateTaxRateResponse:
      type: object
      x-apideck-schema-id: UpdateTaxRateResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: xero
        resource:
          type: string
          description: Unified API resource name
          example: tax-rates
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    Website:
      type: object
      x-apideck-schema-id: Website
      required:
        - url
      additionalProperties: false
      x-apideck-weights:
        url: critical
        type: critical
        id: edge-case
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        url:
          type: string
          example: 'http://example.com'
          minLength: 1
        type:
          type: string
          x-graphql-type-name: WebsiteType
          x-apideck-enum-id: websites.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Bills
    description: ''
    x-apideck-resource-id: bills
    x-apideck-model:
      $ref: '#/components/schemas/Bill'
  - name: Company Info
    description: ''
    x-apideck-resource-id: company-info
    x-apideck-model:
      $ref: '#/components/schemas/CompanyInfo'
  - name: Credit Notes
    description: ''
    x-apideck-resource-id: credit-notes
    x-apideck-model:
      $ref: '#/components/schemas/CreditNote'
  - name: Customers
    description: ''
    x-apideck-resource-id: customers
    x-apideck-model:
      $ref: '#/components/schemas/AccountingCustomer'
  - name: Invoices
    description: ''
    x-apideck-resource-id: invoices
    x-apideck-model:
      $ref: '#/components/schemas/Invoice'
  - name: Invoice Items
    description: Invoice items are stored from invoice lines to be used later on when creating new invoices.
    x-apideck-resource-id: invoice-items
    x-apideck-model:
      $ref: '#/components/schemas/InvoiceItem'
  - name: Ledger Accounts
    description: ''
    x-apideck-resource-id: ledger-accounts
    x-apideck-model:
      $ref: '#/components/schemas/LedgerAccount'
  - name: Payments
    description: ''
    x-apideck-resource-id: payments
    x-apideck-model:
      $ref: '#/components/schemas/Payment'
  - name: Suppliers
    description: ''
    x-apideck-resource-id: suppliers
    x-apideck-model:
      $ref: '#/components/schemas/Supplier'
  - name: Tax Rates
    description: ''
    x-apideck-resource-id: tax-rates
    x-apideck-model:
      $ref: '#/components/schemas/TaxRate'
  - name: Balance Sheet
    description: ''
    x-apideck-resource-id: balance-sheet
    x-apideck-model:
      $ref: '#/components/schemas/BalanceSheet'
  - name: Profit and Loss
    description: ''
    x-apideck-resource-id: profit-and-loss
    x-apideck-model:
      $ref: '#/components/schemas/ProfitAndLoss'
paths:
  /accounting/tax-rates:
    get:
      tags:
        - Tax Rates
      x-graphql-field-name: taxRates
      operationId: taxRatesAll
      summary: List Tax Rates
      description: |
        List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/taxRatesFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTaxRatesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Tax Rates
      operationId: taxRatesAdd
      summary: Create Tax Rate
      description: Create Tax Rate
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '201':
          $ref: '#/components/responses/CreateTaxRateResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              taxRate: {
                id: '1234',
                name: 'GST on Purchases',
                code: 'ABN',
                description: 'Reduced rate GST Purchases',
                effective_tax_rate: 10,
                total_tax_rate: 10,
                tax_payable_account_id: '123456',
                tax_remitted_account_id: '123456',
                components: [
                  {
                    id: '10',
                    name: 'GST',
                    rate: 10,
                    compound: true
                  }
                ],
                type: 'NONE',
                report_tax_type: 'NONE',
                original_tax_rate_id: '12345',
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.taxRatesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/tax-rates/{id}':
    get:
      tags:
        - Tax Rates
      operationId: taxRatesOne
      summary: Get Tax Rate
      description: |
        Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTaxRateResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Tax Rates
      operationId: taxRatesUpdate
      summary: Update Tax Rate
      description: Update Tax Rate
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRate'
      responses:
        '200':
          $ref: '#/components/responses/UpdateTaxRateResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              taxRate: {
                id: '1234',
                name: 'GST on Purchases',
                code: 'ABN',
                description: 'Reduced rate GST Purchases',
                effective_tax_rate: 10,
                total_tax_rate: 10,
                tax_payable_account_id: '123456',
                tax_remitted_account_id: '123456',
                components: [
                  {
                    id: '10',
                    name: 'GST',
                    rate: 10,
                    compound: true
                  }
                ],
                type: 'NONE',
                report_tax_type: 'NONE',
                original_tax_rate_id: '12345',
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.taxRatesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Tax Rates
      operationId: taxRatesDelete
      summary: Delete Tax Rate
      description: Delete Tax Rate
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteTaxRateResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.taxRatesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/bills:
    get:
      tags:
        - Bills
      x-graphql-field-name: bills
      operationId: billsAll
      summary: List Bills
      description: List Bills
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetBillsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.billsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Bills
      operationId: billsAdd
      summary: Create Bill
      description: Create Bill
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
      responses:
        '201':
          $ref: '#/components/responses/CreateBillResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              bill: {
                supplier: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  address: {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                },
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                bill_date: '2020-09-30',
                due_date: '2020-10-30',
                paid_date: '2020-10-30',
                po_number: '90000117',
                reference: '123456',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'expense_account',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    location_id: '1234',
                    department_id: '1234',
                    item: {
                      id: '12344'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    row_version: '1-12345'
                  }
                ],
                terms: 'Net 30 days',
                balance: 27500,
                deposit: 0,
                sub_total: 27500,
                total_tax: 2500,
                total: 27500,
                tax_code: '1234',
                notes: 'Some notes about this bill.',
                status: 'draft',
                ledger_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                bill_number: '10001',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.billsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/bills/{id}':
    get:
      tags:
        - Bills
      operationId: billsOne
      summary: Get Bill
      description: Get Bill
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetBillResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.billsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Bills
      operationId: billsUpdate
      summary: Update Bill
      description: Update Bill
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
      responses:
        '200':
          $ref: '#/components/responses/UpdateBillResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              bill: {
                supplier: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  address: {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                },
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                bill_date: '2020-09-30',
                due_date: '2020-10-30',
                paid_date: '2020-10-30',
                po_number: '90000117',
                reference: '123456',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'expense_account',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    location_id: '1234',
                    department_id: '1234',
                    item: {
                      id: '12344'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    row_version: '1-12345'
                  }
                ],
                terms: 'Net 30 days',
                balance: 27500,
                deposit: 0,
                sub_total: 27500,
                total_tax: 2500,
                total: 27500,
                tax_code: '1234',
                notes: 'Some notes about this bill.',
                status: 'draft',
                ledger_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                bill_number: '10001',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.billsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Bills
      operationId: billsDelete
      summary: Delete Bill
      description: Delete Bill
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteBillResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.billsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/invoices:
    get:
      tags:
        - Invoices
      x-graphql-field-name: invoices
      operationId: invoicesAll
      summary: List Invoices
      description: List Invoices
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/invoicesSort'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetInvoicesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Invoices
      operationId: invoicesAdd
      summary: Create Invoice
      description: Create Invoice
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      x-apideck-gotchas:
        - connector: quickbooks
          description: Quickbooks offers limited (regional) support for applying discount on a Line Item. Including discount_percentage applies to entire invoice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          $ref: '#/components/responses/CreateInvoiceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              invoice: {
                type: 'service',
                number: 'OIT00546',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                invoice_date: '2020-09-30',
                due_date: '2020-09-30',
                terms: 'Net 30 days',
                po_number: '90000117',
                reference: '123456',
                status: 'draft',
                invoice_sent: true,
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                sub_total: 27500,
                total_tax: 2500,
                tax_code: '1234',
                discount_percentage: 5.5,
                total: 27500,
                balance: 27500,
                deposit: 0,
                customer_memo: 'Thank you for your business and have a great day!',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'sales_item',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    item: {
                      id: '12344'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    row_version: '1-12345'
                  }
                ],
                billing_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                shipping_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                template_id: '123456',
                source_document_url: 'https://www.invoicesolution.com/invoice/123456',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.invoicesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/invoices/{id}':
    get:
      tags:
        - Invoices
      operationId: invoicesOne
      summary: Get Invoice
      description: Get Invoice
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetInvoiceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Invoices
      operationId: invoicesUpdate
      summary: Update Invoice
      description: Update Invoice
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          $ref: '#/components/responses/UpdateInvoiceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              invoice: {
                type: 'service',
                number: 'OIT00546',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                invoice_date: '2020-09-30',
                due_date: '2020-09-30',
                terms: 'Net 30 days',
                po_number: '90000117',
                reference: '123456',
                status: 'draft',
                invoice_sent: true,
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                sub_total: 27500,
                total_tax: 2500,
                tax_code: '1234',
                discount_percentage: 5.5,
                total: 27500,
                balance: 27500,
                deposit: 0,
                customer_memo: 'Thank you for your business and have a great day!',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'sales_item',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    item: {
                      id: '12344'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    row_version: '1-12345'
                  }
                ],
                billing_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                shipping_address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                template_id: '123456',
                source_document_url: 'https://www.invoicesolution.com/invoice/123456',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.invoicesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Invoices
      operationId: invoicesDelete
      summary: Delete Invoice
      description: Delete Invoice
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteInvoiceResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoicesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/ledger-accounts:
    get:
      tags:
        - Ledger Accounts
      x-graphql-field-name: ledgerAccounts
      operationId: ledgerAccountsAll
      summary: List Ledger Accounts
      description: List Ledger Accounts
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetLedgerAccountsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Ledger Accounts
      operationId: ledgerAccountsAdd
      summary: Create Ledger Account
      description: Create Ledger Account
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccount'
      responses:
        '201':
          $ref: '#/components/responses/CreateLedgerAccountResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ledgerAccount: {
                display_id: '1-12345',
                nominal_code: 'N091',
                code: '453',
                classification: 'asset',
                type: 'bank',
                sub_type: 'CHECKING_ACCOUNT',
                name: 'Bank account',
                fully_qualified_name: 'Asset.Bank.Checking_Account',
                description: 'Main checking account',
                opening_balance: 75000,
                current_balance: 20000,
                currency: 'USD',
                tax_type: 'NONE',
                tax_rate: {
                  id: '123456'
                },
                level: 1,
                active: true,
                status: 'active',
                header: true,
                bank_account: {
                  iban: 'CH2989144532982975332',
                  bic: 'AUDSCHGGXXX',
                  bsb_number: '062-001',
                  branch_identifier: '001',
                  bank_code: 'BNH',
                  account_number: '123465',
                  account_name: 'SPACEX LLC',
                  account_type: 'credit_card',
                  currency: 'USD'
                },
                parent_account: {
                  id: '12345',
                  name: 'Bank Accounts',
                  display_id: '1-1100'
                },
                sub_account: false,
                last_reconciliation_date: '2020-09-30',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.ledgerAccountsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/ledger-accounts/{id}':
    get:
      tags:
        - Ledger Accounts
      operationId: ledgerAccountsOne
      summary: Get Ledger Account
      description: Get Ledger Account
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetLedgerAccountResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Ledger Accounts
      operationId: ledgerAccountsUpdate
      summary: Update Ledger Account
      description: Update Ledger Account
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerAccount'
      responses:
        '200':
          $ref: '#/components/responses/UpdateLedgerAccountResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              ledgerAccount: {
                display_id: '1-12345',
                nominal_code: 'N091',
                code: '453',
                classification: 'asset',
                type: 'bank',
                sub_type: 'CHECKING_ACCOUNT',
                name: 'Bank account',
                fully_qualified_name: 'Asset.Bank.Checking_Account',
                description: 'Main checking account',
                opening_balance: 75000,
                current_balance: 20000,
                currency: 'USD',
                tax_type: 'NONE',
                tax_rate: {
                  id: '123456'
                },
                level: 1,
                active: true,
                status: 'active',
                header: true,
                bank_account: {
                  iban: 'CH2989144532982975332',
                  bic: 'AUDSCHGGXXX',
                  bsb_number: '062-001',
                  branch_identifier: '001',
                  bank_code: 'BNH',
                  account_number: '123465',
                  account_name: 'SPACEX LLC',
                  account_type: 'credit_card',
                  currency: 'USD'
                },
                parent_account: {
                  id: '12345',
                  name: 'Bank Accounts',
                  display_id: '1-1100'
                },
                sub_account: false,
                last_reconciliation_date: '2020-09-30',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.ledgerAccountsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Ledger Accounts
      operationId: ledgerAccountsDelete
      summary: Delete Ledger Account
      description: Delete Ledger Account
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteLedgerAccountResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.ledgerAccountsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/invoice-items:
    get:
      tags:
        - Invoice Items
      x-graphql-field-name: invoiceItems
      operationId: invoiceItemsAll
      summary: List Invoice Items
      description: List Invoice Items
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/invoiceItemsFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetInvoiceItemsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoiceItemsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Invoice Items
      operationId: invoiceItemsAdd
      summary: Create Invoice Item
      description: Create Invoice Item
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItem'
      responses:
        '201':
          $ref: '#/components/responses/CreateInvoiceItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              invoiceItem: {
                name: 'Model Y',
                description:
                  'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                code: '120-C',
                sold: true,
                purchased: true,
                tracked: true,
                inventory_date: '2020-10-30',
                type: 'inventory',
                sales_details: {
                  unit_price: 27500.5,
                  unit_of_measure: 'pc.',
                  tax_inclusive: true,
                  tax_rate: {
                    id: '123456'
                  }
                },
                purchase_details: {
                  unit_price: 27500.5,
                  unit_of_measure: 'pc.',
                  tax_inclusive: true,
                  tax_rate: {
                    id: '123456'
                  }
                },
                quantity: 1,
                unit_price: 27500.5,
                asset_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                income_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                expense_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                active: true,
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.invoiceItemsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/invoice-items/{id}':
    get:
      tags:
        - Invoice Items
      operationId: invoiceItemsOne
      summary: Get Invoice Item
      description: Get Invoice Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetInvoiceItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoiceItemsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Invoice Items
      operationId: invoiceItemsUpdate
      summary: Update Invoice Item
      description: Update Invoice Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItem'
      responses:
        '200':
          $ref: '#/components/responses/UpdateInvoiceItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              invoiceItem: {
                name: 'Model Y',
                description:
                  'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                code: '120-C',
                sold: true,
                purchased: true,
                tracked: true,
                inventory_date: '2020-10-30',
                type: 'inventory',
                sales_details: {
                  unit_price: 27500.5,
                  unit_of_measure: 'pc.',
                  tax_inclusive: true,
                  tax_rate: {
                    id: '123456'
                  }
                },
                purchase_details: {
                  unit_price: 27500.5,
                  unit_of_measure: 'pc.',
                  tax_inclusive: true,
                  tax_rate: {
                    id: '123456'
                  }
                },
                quantity: 1,
                unit_price: 27500.5,
                asset_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                income_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                expense_account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                active: true,
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.invoiceItemsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Invoice Items
      operationId: invoiceItemsDelete
      summary: Delete Invoice Item
      description: Delete Invoice Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteInvoiceItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.invoiceItemsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/credit-notes:
    get:
      tags:
        - Credit Notes
      x-graphql-field-name: CreditNotes
      operationId: creditNotesAll
      summary: List Credit Notes
      description: List Credit Notes
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCreditNotesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.creditNotesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Credit Notes
      operationId: creditNotesAdd
      summary: Create Credit Note
      description: Create Credit Note
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNote'
      responses:
        '201':
          $ref: '#/components/responses/CreateCreditNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              creditNote: {
                number: 'OIT00546',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                sub_total: 27500,
                total_amount: 49.99,
                total_tax: 2500,
                tax_code: '1234',
                balance: 27500,
                remaining_credit: 27500,
                status: 'authorised',
                reference: '123456',
                date_issued: '2021-05-01T12:00:00.000Z',
                date_paid: '2021-05-01T12:00:00.000Z',
                type: 'accounts_receivable_credit',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'sales_item',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    item: {
                      id: '12344'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    row_version: '1-12345'
                  }
                ],
                allocations: [
                  {
                    id: '123456',
                    type: 'invoice',
                    amount: 49.99
                  }
                ],
                note: 'Some notes about this credit note',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.creditNotesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/credit-notes/{id}':
    get:
      tags:
        - Credit Notes
      operationId: creditNotesOne
      summary: Get Credit Note
      description: Get Credit Note
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCreditNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.creditNotesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Credit Notes
      operationId: creditNotesUpdate
      summary: Update Credit Note
      description: Update Credit Note
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      x-apideck-gotchas:
        - connector: xero
          description: Xero will only allow updating a Credit Note when it has not yet been allocated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditNote'
      responses:
        '200':
          $ref: '#/components/responses/UpdateCreditNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              creditNote: {
                number: 'OIT00546',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                currency: 'USD',
                currency_rate: 0.69,
                tax_inclusive: true,
                sub_total: 27500,
                total_amount: 49.99,
                total_tax: 2500,
                tax_code: '1234',
                balance: 27500,
                remaining_credit: 27500,
                status: 'authorised',
                reference: '123456',
                date_issued: '2021-05-01T12:00:00.000Z',
                date_paid: '2021-05-01T12:00:00.000Z',
                type: 'accounts_receivable_credit',
                line_items: [
                  {
                    row_id: '12345',
                    code: '120-C',
                    line_number: 1,
                    description:
                      'Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection.',
                    type: 'sales_item',
                    tax_amount: 27500,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    unit_of_measure: 'pc.',
                    discount_percentage: 0.01,
                    item: {
                      id: '12344'
                    },
                    tax_rate: {
                      id: '123456'
                    },
                    ledger_account: {
                      id: '123456',
                      nominal_code: 'N091',
                      code: '453'
                    },
                    row_version: '1-12345'
                  }
                ],
                allocations: [
                  {
                    id: '123456',
                    type: 'invoice',
                    amount: 49.99
                  }
                ],
                note: 'Some notes about this credit note',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.creditNotesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Credit Notes
      operationId: creditNotesDelete
      summary: Delete Credit Note
      description: Delete Credit Note
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      x-apideck-gotchas:
        - connector: xero
          description: Xero will only allow deleting a Credit Note if it is in draft status.
      responses:
        '200':
          $ref: '#/components/responses/DeleteCreditNoteResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.creditNotesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/customers:
    get:
      tags:
        - Customers
      x-graphql-field-name: customers
      operationId: customersAll
      summary: List Customers
      description: List Customers
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/customersFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCustomersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.customersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Customers
      operationId: customersAdd
      summary: Create Customer
      description: Create Customer
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingCustomer'
      responses:
        '201':
          $ref: '#/components/responses/CreateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              customer: {
                display_id: 'EMP00101',
                display_name: 'Windsurf Shop',
                company_name: 'SpaceX',
                title: 'CEO',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                suffix: 'Jr.',
                individual: true,
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                notes: 'Some notes about this customer',
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                tax_rate: {
                  id: '123456'
                },
                tax_number: 'US123945459',
                currency: 'USD',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    branch_identifier: '001',
                    bank_code: 'BNH',
                    account_number: '123465',
                    account_name: 'SPACEX LLC',
                    account_type: 'credit_card',
                    currency: 'USD'
                  }
                ],
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.customersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/customers/{id}':
    get:
      tags:
        - Customers
      operationId: customersOne
      summary: Get Customer
      description: Get Customer
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.customersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Customers
      operationId: customersUpdate
      summary: Update Customer
      description: Update Customer
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingCustomer'
      responses:
        '200':
          $ref: '#/components/responses/UpdateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              customer: {
                display_id: 'EMP00101',
                display_name: 'Windsurf Shop',
                company_name: 'SpaceX',
                title: 'CEO',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                suffix: 'Jr.',
                individual: true,
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                notes: 'Some notes about this customer',
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                tax_rate: {
                  id: '123456'
                },
                tax_number: 'US123945459',
                currency: 'USD',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    branch_identifier: '001',
                    bank_code: 'BNH',
                    account_number: '123465',
                    account_name: 'SPACEX LLC',
                    account_type: 'credit_card',
                    currency: 'USD'
                  }
                ],
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.customersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Customers
      operationId: customersDelete
      summary: Delete Customer
      description: Delete Customer
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.customersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/suppliers:
    get:
      tags:
        - Suppliers
      x-graphql-field-name: Suppliers
      operationId: suppliersAll
      summary: List Suppliers
      description: List Suppliers
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetSuppliersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.suppliersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Suppliers
      operationId: suppliersAdd
      summary: Create Supplier
      description: Create Supplier
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '201':
          $ref: '#/components/responses/CreateSupplierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              supplier: {
                company_name: 'SpaceX',
                display_name: 'Windsurf Shop',
                title: 'CEO',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                suffix: 'Jr.',
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                notes: 'Some notes about this supplier',
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    branch_identifier: '001',
                    bank_code: 'BNH',
                    account_number: '123465',
                    account_name: 'SPACEX LLC',
                    account_type: 'credit_card',
                    currency: 'USD'
                  }
                ],
                tax_rate: {
                  id: '123456'
                },
                tax_number: 'US123945459',
                currency: 'USD',
                account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.suppliersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/suppliers/{id}':
    get:
      tags:
        - Suppliers
      operationId: suppliersOne
      summary: Get Supplier
      description: Get Supplier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetSupplierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.suppliersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Suppliers
      operationId: suppliersUpdate
      summary: Update Supplier
      description: Update Supplier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Supplier'
      responses:
        '200':
          $ref: '#/components/responses/UpdateSupplierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              supplier: {
                company_name: 'SpaceX',
                display_name: 'Windsurf Shop',
                title: 'CEO',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                suffix: 'Jr.',
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    line3: 'Suite #',
                    line4: 'delivery instructions',
                    street_number: '25',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    county: 'Santa Clara',
                    contact_name: 'Elon Musk',
                    salutation: 'Mr',
                    phone_number: '111-111-1111',
                    fax: '122-111-1111',
                    email: 'elon@musk.com',
                    website: 'https://elonmusk.com',
                    row_version: '1-12345'
                  }
                ],
                notes: 'Some notes about this supplier',
                phone_numbers: [
                  {
                    id: '12345',
                    country_code: '1',
                    area_code: '323',
                    number: '111-111-1111',
                    extension: '105',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    branch_identifier: '001',
                    bank_code: 'BNH',
                    account_number: '123465',
                    account_name: 'SPACEX LLC',
                    account_type: 'credit_card',
                    currency: 'USD'
                  }
                ],
                tax_rate: {
                  id: '123456'
                },
                tax_number: 'US123945459',
                currency: 'USD',
                account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                status: 'active',
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.accounting.suppliersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Suppliers
      operationId: suppliersDelete
      summary: Delete Supplier
      description: Delete Supplier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteSupplierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.suppliersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/payments:
    get:
      tags:
        - Payments
      x-graphql-field-name: Payments
      operationId: paymentsAll
      summary: List Payments
      description: List Payments
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetPaymentsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.paymentsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Payments
      operationId: paymentsAdd
      summary: Create Payment
      description: Create Payment
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          $ref: '#/components/responses/CreatePaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              payment: {
                currency: 'USD',
                currency_rate: 0.69,
                total_amount: 49.99,
                reference: '123456',
                payment_method: 'Credit Card',
                payment_method_reference: '123456',
                accounts_receivable_account_type: 'Account',
                accounts_receivable_account_id: '123456',
                account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                transaction_date: '2021-05-01T12:00:00.000Z',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                reconciled: true,
                status: 'authorised',
                type: 'accounts_receivable',
                allocations: [
                  {
                    id: '123456',
                    type: 'invoice',
                    amount: 49.99
                  }
                ],
                note: 'Some notes about this payment',
                row_version: '1-12345',
                display_id: '123456'
              }
            }

            try {
              const { data } = await apideck.accounting.paymentsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/accounting/payments/{id}':
    get:
      tags:
        - Payments
      operationId: paymentsOne
      summary: Get Payment
      description: Get Payment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetPaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.paymentsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Payments
      operationId: paymentsUpdate
      summary: Update Payment
      description: Update Payment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          $ref: '#/components/responses/UpdatePaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              payment: {
                currency: 'USD',
                currency_rate: 0.69,
                total_amount: 49.99,
                reference: '123456',
                payment_method: 'Credit Card',
                payment_method_reference: '123456',
                accounts_receivable_account_type: 'Account',
                accounts_receivable_account_id: '123456',
                account: {
                  id: '123456',
                  nominal_code: 'N091',
                  code: '453'
                },
                transaction_date: '2021-05-01T12:00:00.000Z',
                customer: {
                  id: '12345',
                  display_name: 'Windsurf Shop',
                  name: 'Windsurf Shop'
                },
                reconciled: true,
                status: 'authorised',
                type: 'accounts_receivable',
                allocations: [
                  {
                    id: '123456',
                    type: 'invoice',
                    amount: 49.99
                  }
                ],
                note: 'Some notes about this payment',
                row_version: '1-12345',
                display_id: '123456'
              }
            }

            try {
              const { data } = await apideck.accounting.paymentsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Payments
      operationId: paymentsDelete
      summary: Delete Payment
      description: Delete Payment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeletePaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.paymentsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/company-info:
    get:
      tags:
        - Company Info
      x-graphql-field-name: companyInfo
      operationId: companyInfoOne
      summary: Get company info
      description: Get company info
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCompanyInfoResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.companyInfoOne({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/balance-sheet:
    get:
      tags:
        - Balance Sheet
      operationId: balanceSheetOne
      summary: Get BalanceSheet
      description: Get BalanceSheet
      parameters:
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/passThrough'
        - $ref: '#/components/parameters/balanceSheetFilter'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetBalanceSheetResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.balanceSheetOne({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /accounting/profit-and-loss:
    get:
      tags:
        - Profit and Loss
      x-graphql-field-name: profitAndLoss
      operationId: profitAndLossOne
      summary: Get Profit and Loss
      description: Get Profit and Loss
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/profitAndLossFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetProfitAndLossResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: accounting
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.accounting.profitAndLossOne({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  x-sdk-exclude: true
  CustomerCreated:
    post:
      summary: Customer Created
      description: Customer Created
      operationId: customerCreated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  CustomerUpdated:
    post:
      summary: Activity Updated
      description: Activity Updated
      operationId: activityUpdated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  CustomerDeleted:
    post:
      summary: Activity Deleted
      description: Activity Deleted
      operationId: activityDeleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceCreated:
    post:
      summary: Invoice Created
      description: Invoice Created
      operationId: invoiceCreated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceUpdated:
    post:
      summary: Invoice Updated
      description: Invoice Updated
      operationId: invoiceUpdated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceDeleted:
    post:
      summary: Invoice Deleted
      description: Invoice Deleted
      operationId: invoiceDeleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceItemCreated:
    post:
      summary: Invoice Item Created
      description: Invoice Item Created
      operationId: invoiceItemCreated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceItemUpdated:
    post:
      summary: Invoice Item Updated
      description: Invoice Item Updated
      operationId: invoiceItemUpdated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  InvoiceItemDeleted:
    post:
      summary: Invoice Item Deleted
      description: Invoice Item Deleted
      operationId: invoiceItemDeleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LedgerAccountCreated:
    post:
      summary: Ledger Account Created
      description: Ledger Account Created
      operationId: ledgerAccountCreated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LedgerAccountUpdated:
    post:
      summary: Ledger Account Updated
      description: Ledger Account Updated
      operationId: ledgerAccountUpdated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LedgerAccountDeleted:
    post:
      summary: Ledger Account Deleted
      description: Ledger Account Deleted
      operationId: ledgerAccountDeleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  TaxRateCreated:
    post:
      summary: Tax Rate Created
      description: Tax Rate Created
      operationId: taxRateCreated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  TaxRateUpdated:
    post:
      summary: Tax Rate Updated
      description: Tax Rate Updated
      operationId: taxRateUpdated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  TaxRateDeleted:
    post:
      summary: Tax Rate Deleted
      description: Tax Rate Deleted
      operationId: taxRateDeleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/AccountingEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountingWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
