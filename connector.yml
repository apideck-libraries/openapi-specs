openapi: 3.0.0
info:
  version: 10.14.0
  title: Connector API
  description: "Welcome to the Connector API.\n\nYou can use this API to access all Connector API endpoints.\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Pagination\n\nAll API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\nTo fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\nIn the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n### Query Parameters\n\n| Name   | Type   | Required | Description                                                                                                        |\n| ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n| cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |\n| limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n### Response Body\n\n| Name                  | Type   | Description                                                        |\n| --------------------- | ------ | ------------------------------------------------------------------ |\n| meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n| meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n| meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n| meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n| links.previous        | String | Link to navigate to the previous page of results through the API   |\n| links.current         | String | Link to navigate to the current page of results through the API    |\n| links.next            | String | Link to navigate to the next page of results through the API       |\n\n⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n## SDKs and API Clients\n\nWe currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php), [Python](https://developers.apideck.com/sdks/python) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.\nNeed another SDK? [Request the SDK of your choice](https://requests.apideck.io/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### RequestValidationError\n\nRequest is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n#### UnsupportedFiltersError\n\nFilters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n#### UnsupportedSortFieldError\n\nSort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n#### InvalidCursorError\n\nPagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### ConnectorRateLimitError\n\nYou sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will not be able to make further requests until you upgrade your subscription. Please reach out to sales@apideck.com to continue making requests.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### OAuthCredentialsNotFoundError\n\nWhen adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectionSettingsError\n\nThe connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### OAuthRedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### OAuthInvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### OAuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### OAuthConnectorError\n\nIt seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationUnsupportedError\n\nYou're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n#### PaginationNotSupportedError\n\nPagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n\n## Static IP\n\nSome of the APIs you want to use can require a static IP. Apideck's static IP feature allows you to use Apideck with a fixed IP avoiding the need for you to set up your own infrastructure. This feature is currently available to all Apideck customers.\nTo use this feature, the API Vendor will need to whitelist the associated static IP addresses.\nThe provided static IP addresses are fixed to their specified region and shared by all customers who use this feature.\n\n- EU Central 1: **18.197.244.247**, **18.156.9.3**, **3.65.139.215**\n- Other: upcoming\n\n  More info about our data security can be found at [https://compliance.apideck.com/](https://compliance.apideck.com/)\n\n"
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  x-logo:
    url: https://developers.apideck.com/icon.png
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-apideck-api: connector
  x-apideck-sdk-support: true
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
servers:
  - url: https://unify.apideck.com
components:
  parameters:
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
      x-speakeasy-name-override: appId
    resourceId:
      in: path
      name: resource_id
      schema:
        type: string
      required: true
      description: ID of the resource you are acting upon.
    limit:
      name: limit
      in: query
      description: Number of results to return. Minimum 1, Maximum 200, Default 20
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    apiId:
      in: path
      name: api_id
      schema:
        type: string
      required: true
      description: ID of the Unified API
    doc_id:
      in: path
      name: doc_id
      schema:
        type: string
      required: true
      description: ID of the Doc
      example: application_owner+oauth_credentials
    unifiedApi:
      in: query
      name: unified_api
      schema:
        $ref: '#/components/schemas/UnifiedApiId'
      required: false
      description: Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
    connectors_filter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/ConnectorsFilter'
    apis_filter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/ApisFilter'
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    GetApiResponse:
      description: Apis
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetApiResponse'
    GetApisResponse:
      description: Apis
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetApisResponse'
    GetConnectorResourceResponse:
      description: ConnectorResources
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectorResourceResponse'
    GetConnectorResourceExampleResponse:
      description: Connector Resource Example
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectorResourceExampleResponse'
    GetConnectorResourceSchemaResponse:
      description: Connector Resource Schema
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectorResourceSchemaResponse'
    GetApiResourceResponse:
      description: ApiResources
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetApiResourceResponse'
    GetApiResourceCoverageResponse:
      description: ApiResources
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetApiResourceCoverageResponse'
    GetConnectorResponse:
      description: Connectors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectorResponse'
    GetConnectorDocResponse:
      description: Connectors
      content:
        text/markdown:
          schema:
            type: string
            format: markdown
    GetConnectorsResponse:
      description: Connectors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectorsResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    TooManyRequestsResponse:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
  schemas:
    Api:
      type: object
      x-apideck-schema-id: Api
      properties:
        id:
          type: string
          description: ID of the API.
          example: file-storage
          readOnly: true
        type:
          type: string
          description: Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
          enum:
            - platform
            - unified
        name:
          type: string
          description: Name of the API.
          example: File Storage API
        description:
          type: string
          description: Description of the API.
          example: Manage API keys, access tokens, OAuth flows and integrations.
          nullable: true
        status:
          $ref: '#/components/schemas/ApiStatus'
        spec_url:
          type: string
          description: Link to the latest OpenAPI specification of the API.
          example: https://specs.apideck.com/file-storage.yml
        api_reference_url:
          type: string
          description: Link to the API reference of the API.
          example: https://developers.apideck.com/apis/file-storage/reference
        postman_collection_id:
          type: string
          description: ID of the Postman collection of the API.
          example: 1311564-00e7266b-a3d6-4f40-b172-baaa66a3ed6f
          nullable: true
        categories:
          type: array
          description: List of categories the API belongs to.
          example:
            - files
            - file-storage
            - cloud-storage
            - object-storage
          items:
            type: string
        resources:
          type: array
          description: List of resources supported in this API.
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the resource, typically a lowercased version of its name.
                example: companies
              name:
                type: string
                description: Name of the resource (plural)
                example: Companies
              status:
                $ref: '#/components/schemas/ResourceStatus'
              excluded_from_coverage:
                type: boolean
                description: Exclude from mapping coverage
                example: false
        events:
          type: array
          description: List of event types this API supports.
          example:
            - crm.contact.updated
            - accounting.invoice.created
          items:
            type: string
    ApiResource:
      type: object
      x-apideck-schema-id: ApiResource
      properties:
        id:
          type: string
          description: ID of the resource, typically a lowercased version of name.
          example: companies
        name:
          type: string
          description: Name of the resource (plural)
          example: Companies
        status:
          $ref: '#/components/schemas/ResourceStatus'
        linked_resources:
          type: array
          description: List of linked resources.
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/ResourceId'
              unified_property:
                $ref: '#/components/schemas/UnifiedProperty'
        schema:
          type: object
          description: JSON Schema of the resource in our Unified API
          example:
            required:
              - name
              - company_name
            x-pii:
              - name
              - email
              - first_name
              - last_name
            additionalProperties: false
            properties:
              id:
                type: string
                example: '12345'
                readOnly: true
              name:
                type: string
                example: Elon Musk
                minLength: 1
              updated_at:
                type: string
                example: '2020-09-30T07:43:32.000Z'
                readOnly: true
              created_at:
                type: string
                example: '2020-09-30T07:43:32.000Z'
                readOnly: true
          x-json-schema: true
    ApiResourceCoverage:
      type: object
      x-apideck-schema-id: ApiResourceCoverage
      properties:
        id:
          type: string
          description: ID of the resource, typically a lowercased version of name.
          example: companies
        name:
          type: string
          description: Name of the resource (plural)
          example: Companies
        status:
          $ref: '#/components/schemas/ResourceStatus'
        coverage:
          type: array
          items:
            type: object
            properties:
              downstream_id:
                type: string
                description: ID of the resource in the Connector's API (downstream)
                example: accounts
              downstream_name:
                type: string
                description: Name of the resource in the Connector's API (downstream)
                example: Accounts
              pagination_supported:
                type: boolean
                description: Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
              pagination:
                $ref: '#/components/schemas/PaginationCoverage'
              supported_operations:
                type: array
                description: List of supported operations on the resource.
                example:
                  - all
                  - one
                  - add
                  - update
                  - delete
                items:
                  type: string
              supported_filters:
                type: array
                description: Supported filters on the list endpoint of the resource.
                example:
                  - name
                  - email
                items:
                  type: string
              supported_sort_by:
                type: array
                description: Supported sorting properties on the list endpoint of the resource.
                example:
                  - updated_at
                  - created_at
                  - name
                items:
                  type: string
              supported_fields:
                type: array
                description: Supported fields on the detail endpoint.
                items:
                  $ref: '#/components/schemas/SupportedProperty'
              supported_list_fields:
                type: array
                description: Supported fields on the list endpoint.
                items:
                  $ref: '#/components/schemas/SupportedProperty'
    ApisFilter:
      type: object
      x-apideck-schema-id: ApisFilter
      example:
        status: beta
      properties:
        status:
          $ref: '#/components/schemas/ApiStatus'
      additionalProperties: false
    ApiStatus:
      type: string
      enum:
        - live
        - beta
        - development
        - considering
      description: Status of the API. APIs with status live or beta are callable.
    BadRequestResponse:
      type: object
      x-apideck-schema-id: BadRequest
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              x-speakeasy-detail: true
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
    Connector:
      type: object
      x-apideck-schema-id: Connector
      properties:
        id:
          type: string
          description: ID of the connector.
          example: crm+salesforce
          readOnly: true
        name:
          type: string
          description: Name of the connector.
          example: Salesforce
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        description:
          type: string
          title: Description
          description: A description of the object.
          example: A description
          nullable: true
        icon_url:
          type: string
          format: uri
          description: Link to a small square icon for the connector.
          example: https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png
        logo_url:
          type: string
          format: uri
          description: Link to the full logo for the connector.
          example: https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg
        website_url:
          type: string
          format: uri
          description: Link to the connector's website.
          example: https://www.salesforce.com
        signup_url:
          type: string
          format: uri
          description: Link to the connector's signup page.
          example: https://www.salesforce.com/signup
        partner_signup_url:
          type: string
          format: uri
          description: Link to the connector's partner program signup page.
          example: https://www.salesforce.com/partners
        free_trial_available:
          type: boolean
          description: Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial
        auth_type:
          type: string
          x-apideck-enum-id: auth_types
          enum:
            - oauth2
            - apiKey
            - basic
            - custom
            - none
          example: oauth2
          description: Type of authorization used by the connector
          readOnly: true
        auth_only:
          type: boolean
          description: Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
          example: true
          readOnly: true
        blind_mapped:
          type: boolean
          description: Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.
          example: true
          readOnly: true
        oauth_grant_type:
          type: string
          x-apideck-enum-id: oauth_grant_types
          enum:
            - authorization_code
            - client_credentials
            - password
          example: authorization_code
          description: 'OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types'
          readOnly: true
        oauth_credentials_source:
          type: string
          x-apideck-enum-id: oauth_credentials_source
          enum:
            - integration
            - connection
          example: integration
          description: Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.
          readOnly: true
        oauth_scopes:
          type: array
          description: List of OAuth Scopes available for this connector.
          items:
            type: object
            properties:
              id:
                type: string
                description: ID of the OAuth scope.
                example: contacts:all
              label:
                type: string
                description: Label of the OAuth scope.
                example: Read/write on the Contacts resource
              default_apis:
                type: array
                description: List of Unified APIs that request this OAuth Scope by default. Application owners can customize the requested scopes.
                items:
                  type: string
                  description: ID of the Unified API.
                  example: crm
        custom_scopes:
          type: boolean
          description: Set to `true` when connector allows the definition of custom scopes.
          example: true
          readOnly: true
        has_sandbox_credentials:
          type: boolean
          description: Indicates whether Apideck Sandbox OAuth credentials are available.
          example: true
        settings:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorSetting'
        service_id:
          $ref: '#/components/schemas/ServiceId'
        unified_apis:
          type: array
          description: List of Unified APIs that feature this connector.
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/UnifiedApiId'
              name:
                type: string
                description: Name of the API.
                example: File Storage API
              auth_only:
                type: boolean
                description: Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
                example: true
                readOnly: true
              oauth_scopes:
                type: array
                items:
                  type: object
                  description: OAuth scopes required for the connector. Add these scopes to your OAuth app.
                  example:
                    id: contacts:all
                    label: Read/write on the Contacts resource
                  properties:
                    id:
                      type: string
                      description: ID of the OAuth scope.
                      example: contacts:all
                    label:
                      type: string
                      description: Label of the OAuth scope.
                      example: Read/write on the Contacts resource
              supported_resources:
                type: array
                description: List of resources that are supported on the connector.
                items:
                  $ref: '#/components/schemas/LinkedConnectorResource'
              downstream_unsupported_resources:
                type: array
                description: List of resources that are not supported on the downstream.
                items:
                  $ref: '#/components/schemas/ResourceId'
              supported_events:
                type: array
                description: List of events that are supported on the connector for this Unified API.
                items:
                  $ref: '#/components/schemas/ConnectorEvent'
        supported_resources:
          type: array
          description: List of resources that are supported on the connector.
          items:
            $ref: '#/components/schemas/LinkedConnectorResource'
        configurable_resources:
          type: array
          description: List of resources that have settings that can be configured.
          example:
            - leads
            - companies
          items:
            $ref: '#/components/schemas/ResourceId'
        supported_events:
          type: array
          description: List of events that are supported on the connector across all Unified APIs.
          items:
            $ref: '#/components/schemas/ConnectorEvent'
        webhook_support:
          $ref: '#/components/schemas/WebhookSupport'
        schema_support:
          $ref: '#/components/schemas/SchemaSupport'
        docs:
          type: array
          items:
            $ref: '#/components/schemas/ConnectorDoc'
        tls_support:
          type: object
          properties:
            type:
              type: string
            description:
              type: string
              description: Description of the TLS support
    ConnectorDoc:
      type: object
      x-apideck-schema-id: ConnectorDoc
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Name of the doc.
          example: connection
        audience:
          type: string
          description: Audience for the doc.
          enum:
            - application_owner
            - consumer
        format:
          type: string
          description: Format of the doc.
          enum:
            - markdown
        url:
          type: string
          format: uri
          description: Link to fetch the content of the doc.
          example: https://unify.apideck.com/connector/connectors/workday/docs/consumer+connection
    ConnectorEvent:
      type: object
      x-apideck-schema-id: ConnectorEvent
      description: Unify event that is supported on the connector. Events are delivered via Webhooks.
      properties:
        event_type:
          type: string
          description: Unify event type
          example: employee.created
        event_source:
          type: string
          description: Unify event source
          example: native
          enum:
            - native
            - virtual
        downstream_event_type:
          type: string
          description: Downstream event type
          example: person_created
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceId'
        entity_type:
          type: string
          description: Unify entity type
          example: employee
    ConnectorResource:
      type: object
      x-apideck-schema-id: ConnectorResource
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
          description: Name of the resource (plural)
          example: Companies
        downstream_id:
          type: string
          description: ID of the resource in the Connector's API (downstream)
          example: accounts
        downstream_name:
          type: string
          description: Name of the resource in the Connector's API (downstream)
          example: Accounts
        status:
          $ref: '#/components/schemas/ResourceStatus'
        pagination_supported:
          type: boolean
          description: Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.
        pagination:
          $ref: '#/components/schemas/PaginationCoverage'
        custom_fields_supported:
          type: boolean
          description: Indicates if custom fields are supported on this resource.
        supported_operations:
          type: array
          description: List of supported operations on the resource.
          example:
            - all
            - one
            - add
            - update
            - delete
          items:
            type: string
        downstream_unsupported_operations:
          type: array
          description: List of operations that are not supported on the downstream.
          example:
            - upload
          items:
            type: string
        supported_filters:
          type: array
          description: Supported filters on the list endpoint of the resource.
          example:
            - name
            - email
          items:
            type: string
        supported_sort_by:
          type: array
          description: Supported sorting properties on the list endpoint of the resource.
          example:
            - updated_at
            - created_at
            - name
          items:
            type: string
        supported_fields:
          type: array
          description: Supported fields on the detail endpoint.
          items:
            $ref: '#/components/schemas/SupportedProperty'
        supported_list_fields:
          type: array
          description: Supported fields on the list endpoint.
          items:
            $ref: '#/components/schemas/SupportedProperty'
    ConnectorResourceExample:
      type: object
      x-apideck-schema-id: ConnectorResourceExample
    ConnectorResourceSchema:
      type: object
      x-apideck-schema-id: ConnectorResourceSchema
    ConnectorSetting:
      type: object
      x-apideck-schema-id: ConnectorSetting
      properties:
        id:
          type: string
          example: pipeline_id
        label:
          type: string
          example: Pipeline
        type:
          enum:
            - text
            - checkbox
            - tel
            - email
            - url
            - textarea
            - select
            - filtered-select
            - multi-select
            - datetime
            - date
            - time
            - number
            - password
          example: select
    ConnectorsFilter:
      type: object
      x-apideck-schema-id: ConnectorsFilter
      example:
        unified_api: file-storage
      properties:
        unified_api:
          $ref: '#/components/schemas/UnifiedApiId'
        status:
          $ref: '#/components/schemas/ConnectorStatus'
      additionalProperties: false
    ConnectorStatus:
      type: string
      enum:
        - live
        - beta
        - development
        - considering
      description: Status of the connector. Connectors with status live or beta are callable.
    GetApiResourceCoverageResponse:
      type: object
      x-apideck-schema-id: GetApiResourceCoverageResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/ApiResourceCoverage'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetApiResourceResponse:
      type: object
      x-apideck-schema-id: GetApiResourceResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/ApiResource'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetApiResponse:
      type: object
      x-apideck-schema-id: GetApiResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Api'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetApisResponse:
      type: object
      x-apideck-schema-id: GetApisResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Api'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetConnectorResourceExampleResponse:
      type: object
      x-apideck-schema-id: GetConnectorResourceExampleResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: object
          properties:
            unified_api:
              $ref: '#/components/schemas/UnifiedApiId'
            service_id:
              $ref: '#/components/schemas/ServiceId'
            resource:
              $ref: '#/components/schemas/LinkedConnectorResource'
            example_response:
              $ref: '#/components/schemas/ConnectorResourceExample'
            workflow_examples:
              description: If the resource has a workflow, this will contain the example response for each step
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ConnectorResourceExample'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetConnectorResourceResponse:
      type: object
      x-apideck-schema-id: GetConnectorResourceResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/ConnectorResource'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetConnectorResourceSchemaResponse:
      type: object
      x-apideck-schema-id: GetConnectorResourceSchemaResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/ConnectorResourceSchema'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetConnectorResponse:
      type: object
      x-apideck-schema-id: GetConnectorResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Connector'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetConnectorsResponse:
      type: object
      x-apideck-schema-id: GetConnectorsResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Connector'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Id:
      type: string
      title: ID
      description: A unique identifier for an object.
      example: '12345'
      readOnly: true
    LinkedConnectorResource:
      type: object
      x-apideck-schema-id: LinkedConnectorResource
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        name:
          type: string
          description: Name of the resource (plural)
          example: Companies
        status:
          $ref: '#/components/schemas/ResourceStatus'
        downstream_id:
          type: string
          description: ID of the resource in the Connector's API (downstream)
          example: accounts
        downstream_name:
          type: string
          description: Name of the resource in the Connector's API (downstream)
          example: Accounts
    Links:
      type: object
      x-apideck-schema-id: Links
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
    Meta:
      type: object
      x-apideck-schema-id: Meta
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    NotFoundResponse:
      type: object
      x-apideck-schema-id: NotFound
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              x-speakeasy-detail: true
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
    PaginationCoverage:
      type: object
      x-apideck-schema-id: ConnectorResource
      properties:
        mode:
          type: string
          enum:
            - native
            - virtual
          description: How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.
          example: native
        paging_support:
          type: boolean
          description: Indicates whether the connector supports paging through results using the cursor parameter.
        limit_support:
          type: boolean
          description: Indicates whether the connector supports changing the page size by using the limit parameter.
    PaymentRequiredResponse:
      type: object
      x-apideck-schema-id: PaymentRequired
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          x-speakeasy-error-message: true
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
    ResourceId:
      type: string
      description: ID of the resource, typically a lowercased version of name.
      example: companies
    ResourceStatus:
      x-apideck-enum-id: connector.resource.status
      type: string
      enum:
        - live
        - beta
        - development
        - upcoming
        - considering
      description: Status of the resource. Resources with status live or beta are callable.
    ServiceId:
      type: string
      description: Service provider identifier
      example: close
    SchemaSupport:
      type: object
      x-apideck-schema-id: SchemaSupport
      description: When a connector has schema_support, a call can be made to retrieve a json schema that describes a downstream resource.
      properties:
        supported:
          type: boolean
          description: Can a resource schema be retrieved for this connector?
          example: true
    SupportedProperty:
      type: object
      properties:
        unified_property:
          $ref: '#/components/schemas/UnifiedProperty'
        child_properties:
          type: array
          description: List of child properties of the unified property.
          items:
            $ref: '#/components/schemas/SupportedProperty'
    TooManyRequestsResponse:
      type: object
      x-apideck-schema-id: TooManyRequests
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
        type_name:
          type: string
          description: The type of error returned
          example: ConnectorRateLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
          x-speakeasy-error-message: true
        detail:
          type: object
          properties:
            context:
              type: string
            error:
              type: object
              x-speakeasy-detail: true
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
    UnauthorizedResponse:
      type: object
      x-apideck-schema-id: Unauthorized
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Missing authentication
            - type: object
              x-speakeasy-detail: true
              example:
                statusCode: 401
                error: Unauthorized
                message: Missing authentication
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnexpectedErrorResponse:
      type: object
      x-apideck-schema-id: Error
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              x-speakeasy-detail: true
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnifiedApiId:
      description: Name of Apideck Unified API
      x-apideck-enum-id: unified_api
      enum:
        - accounting
        - ats
        - calendar
        - crm
        - csp
        - customer-support
        - ecommerce
        - email
        - email-marketing
        - expense-management
        - file-storage
        - form
        - hris
        - lead
        - payroll
        - pos
        - procurement
        - project-management
        - script
        - sms
        - spreadsheet
        - team-messaging
        - issue-tracking
        - time-registration
        - transactional-email
        - vault
        - data-warehouse
      example: crm
      type: string
    UnifiedProperty:
      type: string
      description: Name of the property in our Unified API.
      example: owner_id
    WebhookSupport:
      type: object
      x-apideck-schema-id: WebhookSupport
      description: How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
      properties:
        mode:
          type: string
          description: Mode of the webhook support.
          example: native
          enum:
            - native
            - virtual
            - none
        subscription_level:
          type: string
          description: Received events are scoped to connection or across integration.
          example: integration
          enum:
            - connection
            - integration
        managed_via:
          type: string
          description: How the subscription is managed in the downstream.
          example: api
          enum:
            - manual
            - api
        virtual_webhooks:
          type: object
          title: Virtual Webhooks
          description: Virtual webhook config for the connector.
          required:
            - request_rate
          additionalProperties: false
          properties:
            request_rate:
              type: object
              title: Request Rate
              description: The rate at which requests for resources will be made to downstream.
              required:
                - rate
                - size
                - unit
              additionalProperties: false
              properties:
                rate:
                  type: integer
                  title: Rate
                  description: The number of requests per window unit.
                size:
                  type: integer
                  title: Size of rate window
                  description: Size of request window.
                unit:
                  type: string
                  title: Unit
                  description: The window unit for the rate.
                  enum:
                    - second
                    - minute
                    - hour
                    - day
            resources:
              type: object
              title: Resources
              description: The resources that will be requested from downstream.
              additionalProperties:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: string
    Raw:
      title: raw
      type: object
      x-apideck-schema-id: Raw
      description: Raw response from the integration when raw=true query param is provided
      nullable: true
      additionalProperties: true
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To access our API, you need to sign up and obtain your unique API key. Each Unify application is assigned a single API key. You can locate your API key in the Configuration Settings section of your Apideck application. Additionally, your application’s application_id is available on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header.

        - Bearer authorization header: `Authorization: Bearer "YOUR_API_KEY_HERE"`
        - Application id header: `x-apideck-app-id: "YOUR_APP_ID_HERE"`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Connectors
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Connector'
  - name: Connector Docs
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/ConnectorDoc'
  - name: APIs
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Api'
  - name: Connector Resources
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/ConnectorResource'
  - name: API Resources
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/ApiResource'
  - name: Connector Resource Schema
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/ConnectorResourceSchema'
paths:
  /connector/connectors:
    get:
      tags:
        - Connectors
      operationId: connectorsAll
      summary: List Connectors
      description: List Connectors
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/connectors_filter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.connector.connectorsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/connectors/{id}:
    get:
      tags:
        - Connectors
      operationId: connectorsOne
      summary: Get Connector
      description: Get Connector
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.connector.connectorsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/connectors/{id}/docs/{doc_id}:
    get:
      tags:
        - Connector Docs
      operationId: connectorDocsOne
      summary: Get Connector Doc content
      description: Get Connector Doc content
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/doc_id'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorDocResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              docId: 'application_owner+oauth_credentials'
            }

            try {
              const { data } = await apideck.connector.connectorDocsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/connectors/{id}/resources/{resource_id}:
    get:
      tags:
        - Connector Resources
      operationId: connectorResourcesOne
      summary: Get Connector Resource
      description: Get Connector Resource
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/unifiedApi'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorResourceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              resourceId: 'resource_id_example'
            }

            try {
              const { data } = await apideck.connector.connectorResourcesOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/connectors/{id}/resources/{resource_id}/unified_api/{api_id}/schema:
    get:
      tags:
        - Connector Resource Schema
      operationId: connectorResourcesSchema
      summary: Get Connector Resource Schema
      description: Get Connector Resource Schema
      x-sdk-exclude: true
      x-internal: true
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/apiId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorResourceSchemaResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              resourceId: 'resource_id_example',
              apiId: 'api_id_example'
            }

            try {
              const { data } = await apideck.connector.connectorResourcesSchema(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/connectors/{id}/resources/{resource_id}/unified_api/{api_id}/example:
    get:
      tags:
        - Connector Resource Example
      operationId: connectorResourcesExample
      summary: Get Connector Resource Example
      description: Get Connector Resource Example
      x-sdk-exclude: true
      x-internal: true
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/apiId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectorResourceExampleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              resourceId: 'resource_id_example',
              apiId: 'api_id_example'
            }

            try {
              const { data } = await apideck.connector.connectorResourcesExample(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/apis:
    get:
      tags:
        - APIs
      operationId: apisAll
      summary: List APIs
      description: List APIs
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/apis_filter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetApisResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.connector.apisAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/apis/{id}:
    get:
      tags:
        - APIs
      operationId: apisOne
      summary: Get API
      description: Get API
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetApiResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.connector.apisOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/apis/{id}/resources/{resource_id}:
    get:
      tags:
        - API Resources
      operationId: apiResourcesOne
      summary: Get API Resource
      description: Get API Resource
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resourceId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetApiResourceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              resourceId: 'resource_id_example'
            }

            try {
              const { data } = await apideck.connector.apiResourcesOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /connector/apis/{id}/resources/{resource_id}/coverage:
    get:
      tags:
        - API Resources
      operationId: apiResourceCoverageOne
      summary: Get API Resource Coverage
      description: Get API Resource Coverage
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/resourceId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetApiResourceCoverageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: connector
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              resourceId: 'resource_id_example'
            }

            try {
              const { data } = await apideck.connector.apiResourceCoverageOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
