openapi: 3.0.3
info:
  version: 10.14.0
  title: File storage API
  description: "Welcome to the File Storage API.\n\nYou can use this API to access all File Storage API endpoints.\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Pagination\n\nAll API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\nTo fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\nIn the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n### Query Parameters\n\n| Name   | Type   | Required | Description                                                                                                        |\n| ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n| cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |\n| limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n### Response Body\n\n| Name                  | Type   | Description                                                        |\n| --------------------- | ------ | ------------------------------------------------------------------ |\n| meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n| meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n| meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n| meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n| links.previous        | String | Link to navigate to the previous page of results through the API   |\n| links.current         | String | Link to navigate to the current page of results through the API    |\n| links.next            | String | Link to navigate to the next page of results through the API       |\n\n⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n## SDKs and API Clients\n\nWe currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php), [Python](https://developers.apideck.com/sdks/python) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.\nNeed another SDK? [Request the SDK of your choice](https://requests.apideck.io/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### RequestValidationError\n\nRequest is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n#### UnsupportedFiltersError\n\nFilters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n#### UnsupportedSortFieldError\n\nSort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n#### InvalidCursorError\n\nPagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### ConnectorRateLimitError\n\nYou sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will not be able to make further requests until you upgrade your subscription. Please reach out to sales@apideck.com to continue making requests.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### OAuthCredentialsNotFoundError\n\nWhen adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectionSettingsError\n\nThe connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### OAuthRedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### OAuthInvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### OAuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### OAuthConnectorError\n\nIt seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationUnsupportedError\n\nYou're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n#### PaginationNotSupportedError\n\nPagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n\n## Static IP\n\nSome of the APIs you want to use can require a static IP. Apideck's static IP feature allows you to use Apideck with a fixed IP avoiding the need for you to set up your own infrastructure. This feature is currently available to all Apideck customers.\nTo use this feature, the API Vendor will need to whitelist the associated static IP addresses.\nThe provided static IP addresses are fixed to their specified region and shared by all customers who use this feature.\n\n- EU Central 1: **18.197.244.247**, **18.156.9.3**, **3.65.139.215**\n- Other: upcoming\n\n  More info about our data security can be found at [https://compliance.apideck.com/](https://compliance.apideck.com/)\n\n"
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  x-logo:
    url: https://developers.apideck.com/icon.png
  x-apideck-api: file-storage
  x-apideck-sdk-support: true
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
servers:
  - url: https://unify.apideck.com
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
      x-speakeasy-name-override: appId
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
      example: test-consumer
      x-speakeasy-name-override: consumerId
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    digest:
      name: digest
      in: header
      description: The RFC3230 message digest of the whole file. Only required for the Box connector. More information on the Box API docs [here](https://developer.box.com/reference/post-files-upload-sessions-id-commit/#param-digest)
      required: false
      schema:
        type: string
        example: sha=fpRyg5eVQletdZqEKaFlqwBXJzM=
    digestPart:
      name: digest
      in: header
      description: The RFC3230 message digest of the uploaded part. Only required for the Box connector. More information on the Box API docs [here](https://developer.box.com/reference/put-files-upload-sessions-id/#param-digest)
      required: false
      schema:
        type: string
        example: sha=fpRyg5eVQletdZqEKaFlqwBXJzM=
    driveGroupsFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/DriveGroupsFilter'
    drivesFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/DrivesFilter'
    fields:
      name: fields
      in: query
      description: 'The ''fields'' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.'
      example: id,updated_at
      schema:
        type: string
        nullable: true
    format:
      name: format
      in: query
      description: File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
      required: true
      schema:
        type: string
        example: pdf
    filesFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilesFilter'
    filesSort:
      name: sort
      in: query
      description: Apply sorting
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilesSort'
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    limit:
      name: limit
      in: query
      description: Number of results to return. Minimum 1, Maximum 200, Default 20
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    metadata:
      name: x-apideck-metadata
      in: header
      description: Metadata to attach to the file
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateFileRequest'
    partNumber:
      name: part_number
      in: query
      description: Part number of the file part being uploaded.
      required: true
      schema:
        type: number
        minimum: 0
        maximum: 10000
        example: 0
    passThrough:
      name: pass_through
      in: query
      description: 'Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads'
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/PassThroughQuery'
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: false
    serviceId:
      name: x-apideck-service-id
      in: header
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      schema:
        type: string
      example: salesforce
      x-speakeasy-name-override: serviceId
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    CreateFileResponse:
      description: Files
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateFileResponse'
    CreateFolderResponse:
      description: Folders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateFolderResponse'
    CreateSharedLinkResponse:
      description: Shared Links
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSharedLinkResponse'
    CreateUploadSessionResponse:
      description: UploadSessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUploadSessionResponse'
    DeleteFileResponse:
      description: Files
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteFileResponse'
    DeleteFolderResponse:
      description: Folders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteFolderResponse'
    DeleteSharedLinkResponse:
      description: Shared Links
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteSharedLinkResponse'
    DeleteUploadSessionResponse:
      description: UploadSessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteUploadSessionResponse'
    GetFileDownloadResponse:
      description: File Download
      content:
        '*/*':
          schema:
            type: string
            format: binary
    GetFileResponse:
      description: File
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetFileResponse'
    GetFilesResponse:
      description: Files
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetFilesResponse'
    GetFolderResponse:
      description: Folders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetFolderResponse'
    GetFoldersResponse:
      description: Folders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetFoldersResponse'
    GetSharedLinkResponse:
      description: Shared Link
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSharedLinkResponse'
    GetSharedLinksResponse:
      description: Shared Links
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSharedLinksResponse'
    GetUploadSessionResponse:
      description: UploadSessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUploadSessionResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    NotImplementedResponse:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    TooManyRequestsResponse:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
    UnprocessableResponse:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
    UpdateFileResponse:
      description: Files
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateFileResponse'
    UpdateFolderResponse:
      description: Folders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateFolderResponse'
    UpdateSharedLinkResponse:
      description: Shared Links
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateSharedLinkResponse'
    UpdateUploadSessionResponse:
      description: UploadSessions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUploadSessionResponse'
    CreateDriveResponse:
      description: Drives
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDriveResponse'
    DeleteDriveResponse:
      description: Drives
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteDriveResponse'
    GetDriveResponse:
      description: Drives
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetDriveResponse'
    GetDrivesResponse:
      description: Drives
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetDrivesResponse'
    UpdateDriveResponse:
      description: Drives
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateDriveResponse'
    CreateDriveGroupResponse:
      description: DriveGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateDriveGroupResponse'
    DeleteDriveGroupResponse:
      description: DriveGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteDriveGroupResponse'
    GetDriveGroupResponse:
      description: DriveGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetDriveGroupResponse'
    GetDriveGroupsResponse:
      description: DriveGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetDriveGroupsResponse'
    UpdateDriveGroupResponse:
      description: DriveGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateDriveGroupResponse'
  schemas:
    BadRequestResponse:
      type: object
      x-apideck-schema-id: BadRequest
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              x-speakeasy-detail: true
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
    CopyFolderRequest:
      type: object
      x-apideck-schema-id: CopyFolderRequest
      required:
        - parent_folder_id
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the folder.
          example: Documents
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    CreatedAt:
      type: string
      title: Created at (timestamp)
      description: The date and time when the object was created.
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
      nullable: true
    CreatedBy:
      type: string
      title: Created by
      description: The user who created the object.
      example: '12345'
      readOnly: true
      nullable: true
    CreateDriveGroupResponse:
      type: object
      x-apideck-schema-id: CreateDriveGroupResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: DriveGroups
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CreateDriveResponse:
      type: object
      x-apideck-schema-id: CreateDriveResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: Drives
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CreateFileRequest:
      type: object
      x-apideck-schema-id: CreateFileRequest
      additionalProperties: false
      required:
        - name
        - parent_folder_id
      properties:
        name:
          type: string
          description: The name of the file.
          example: Documents
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        drive_id:
          type: string
          description: ID of the drive to upload to.
          example: '1234'
        description:
          type: string
          description: Optional description of the file.
          example: My Personal Documents
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    CreateFileResponse:
      type: object
      x-apideck-schema-id: CreateFileResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: files
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CreateFolderRequest:
      type: object
      x-apideck-schema-id: CreateFolderRequest
      additionalProperties: false
      required:
        - name
        - parent_folder_id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the folder.
          example: Documents
        description:
          type: string
          description: Optional description of the folder.
          example: My Personal Documents
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        drive_id:
          type: string
          description: ID of the drive to create the folder in.
          example: '1234'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    CreateFolderResponse:
      type: object
      x-apideck-schema-id: CreateFolderResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: undefined
        resource:
          type: string
          description: Unified API resource name
          example: Folders
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CreateSharedLinkResponse:
      type: object
      x-apideck-schema-id: CreateSharedLinkResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: Shared Links
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CreateUploadSessionRequest:
      type: object
      x-apideck-schema-id: CreateUploadSessionRequest
      additionalProperties: false
      required:
        - name
        - parent_folder_id
        - size
      properties:
        name:
          type: string
          description: The name of the file.
          example: Documents
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        drive_id:
          type: string
          description: ID of the drive to upload to.
          example: '1234'
        size:
          $ref: '#/components/schemas/FileSize'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    CreateUploadSessionResponse:
      type: object
      x-apideck-schema-id: CreateUploadSessionResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: UploadSessions
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    CustomMappings:
      type: object
      x-apideck-schema-id: CustomMappings
      description: When custom mappings are configured on the resource, the result is included here.
      nullable: true
      readOnly: true
    DeleteDriveGroupResponse:
      type: object
      x-apideck-schema-id: DeleteDriveGroupResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: DriveGroups
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    DeleteDriveResponse:
      type: object
      x-apideck-schema-id: DeleteDriveResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: Drives
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    DeleteFileResponse:
      type: object
      x-apideck-schema-id: DeleteFileResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: files
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    DeleteFolderResponse:
      type: object
      x-apideck-schema-id: DeleteFolderResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: undefined
        resource:
          type: string
          description: Unified API resource name
          example: Folders
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    DeleteSharedLinkResponse:
      type: object
      x-apideck-schema-id: DeleteSharedLinkResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: Shared Links
        operation:
          type: string
          description: Operation performed
          example: delete
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    DeleteUploadSessionResponse:
      type: object
      x-apideck-schema-id: DeleteUploadSessionResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: UploadSessions
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    Description:
      type: string
      title: Description
      description: A description of the object.
      example: A description
      nullable: true
    DownstreamId:
      type: string
      description: The third-party API ID of original entity
      example: '12345'
      nullable: true
      readOnly: true
    Drive:
      type: object
      x-apideck-schema-id: Drive
      additionalProperties: false
      required:
        - id
        - name
      x-apideck-weights:
        id: critical
        name: critical
        updated_at: critical
        updated_by: edge-case
        created_at: critical
        created_by: edge-case
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the drive
          example: Project Resources
        description:
          $ref: '#/components/schemas/Description'
        custom_mappings:
          $ref: '#/components/schemas/CustomMappings'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    DriveGroup:
      type: object
      x-apideck-schema-id: DriveGroup
      additionalProperties: false
      required:
        - id
        - name
      x-apideck-weights:
        id: critical
        name: critical
        updated_at: critical
        updated_by: edge-case
        created_at: critical
        created_by: edge-case
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the drive group
          example: accounting
        display_name:
          type: string
          description: The display name of the drive group
          example: accounting
          nullable: true
        description:
          $ref: '#/components/schemas/Description'
        custom_mappings:
          $ref: '#/components/schemas/CustomMappings'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    DriveGroupsFilter:
      type: object
      x-apideck-schema-id: DriveGroupsFilter
      properties:
        parent_group_id:
          type: string
          description: ID of the drive group to filter on
          example: '1234'
      additionalProperties: false
    DrivesFilter:
      type: object
      x-apideck-schema-id: DrivesFilter
      properties:
        group_id:
          type: string
          description: ID of the drive group to filter on
          example: '1234'
      additionalProperties: false
    ExpiresAt:
      type: string
      format: date-time
      example: '2022-09-30T07:43:32.000Z'
      readOnly: true
      nullable: true
    FilesFilter:
      type: object
      x-apideck-schema-id: FilesFilter
      properties:
        drive_id:
          type: string
          description: ID of the drive to filter on
          example: '1234'
        folder_id:
          type: string
          description: ID of the folder to filter on. The root folder has an alias "root"
          example: root
        shared:
          type: boolean
          description: Only return files and folders that are shared
          example: true
      additionalProperties: false
    FileSize:
      type: integer
      x-apideck-schema-id: FileSize
      description: The size of the file in bytes
      example: 1810673
      nullable: true
    FilesSearch:
      type: object
      x-apideck-schema-id: FilesSearch
      example:
        query: logo jpg
      properties:
        query:
          type: string
          description: The query to search for. May match across multiple fields.
          example: logo jpg
        drive_id:
          type: string
          description: ID of the drive to filter on
          example: '1234'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
      additionalProperties: false
      required:
        - query
    FilesSort:
      type: object
      x-apideck-schema-id: FilesSort
      example:
        by: updated_at
        direction: desc
      properties:
        by:
          type: string
          x-apideck-enum-id: files.sort_by
          description: The field on which to sort the Files
          enum:
            - updated_at
            - name
          example: updated_at
        direction:
          $ref: '#/components/schemas/SortDirection'
      additionalProperties: false
    FileStorageEventType:
      x-apideck-enum-id: file-storage.event_type
      type: string
      enum:
        - '*'
        - file-storage.file.created
        - file-storage.file.updated
        - file-storage.file.deleted
      example: file-storage.file.created
    FileStorageWebhookEvent:
      allOf:
        - type: object
          x-apideck-schema-id: WebhookEvent
          properties:
            event_id:
              type: string
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
            unified_api:
              description: Name of Apideck Unified API
              x-apideck-enum-id: unified_api
              enum:
                - accounting
                - ats
                - calendar
                - crm
                - csp
                - customer-support
                - ecommerce
                - email
                - email-marketing
                - expense-management
                - file-storage
                - form
                - hris
                - lead
                - payroll
                - pos
                - procurement
                - project-management
                - script
                - sms
                - spreadsheet
                - team-messaging
                - issue-tracking
                - time-registration
                - transactional-email
                - vault
                - data-warehouse
              example: crm
              type: string
            service_id:
              type: string
              description: Service provider identifier
              example: close
            consumer_id:
              type: string
              example: test_consumer_id
              description: Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
            entity_id:
              type: string
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
            entity_type:
              type: string
              description: The type entity that triggered this event
              example: Company
            entity_url:
              type: string
              description: The url to retrieve entity detail.
              example: https://unify.apideck.com/crm/contacts/123456
            execution_attempt:
              type: number
              description: The current count this request event has been attempted
              example: 2
            occurred_at:
              type: string
              description: ISO Datetime for when the original event occurred
              example: '2021-10-01T03:14:55.419Z'
        - properties:
            event_type:
              $ref: '#/components/schemas/FileStorageEventType'
          type: object
      x-sdk-exclude: true
    FileType:
      type: string
      x-apideck-schema-id: FileType
      x-apideck-enum-id: files.type
      enum:
        - file
        - folder
        - url
      description: The type of resource. Could be file, folder or url
      readOnly: true
      example: file
      nullable: true
    Folder:
      type: object
      x-apideck-schema-id: Folder
      x-apideck-weights:
        id: critical
        name: critical
        size: low
        parent_folders: high
        parent_folders_complete: critical
        updated_at: critical
        created_at: high
      additionalProperties: false
      required:
        - name
        - parent_folders
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the folder
          example: Documents
        description:
          type: string
          description: Optional description of the folder
          example: My Personal Documents
          nullable: true
        path:
          type: string
          description: The full path of the folder (includes the folder name)
          example: /Personal/Documents
          readOnly: true
          nullable: true
        size:
          type: integer
          description: The size of the folder in bytes
          example: 1810673
          readOnly: true
          nullable: true
        owner:
          $ref: '#/components/schemas/Owner'
        parent_folders:
          type: array
          description: The parent folders of the file, starting from the root
          items:
            $ref: '#/components/schemas/LinkedFolder'
        parent_folders_complete:
          type: boolean
          description: Whether the list of parent folder is complete. Some connectors only return the direct parent of a folder
          readOnly: true
        custom_mappings:
          $ref: '#/components/schemas/CustomMappings'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    GetDriveGroupResponse:
      type: object
      x-apideck-schema-id: GetDriveGroupResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: DriveGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/DriveGroup'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetDriveGroupsResponse:
      type: object
      x-apideck-schema-id: GetDriveGroupsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: DriveGroups
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/DriveGroup'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetDriveResponse:
      type: object
      x-apideck-schema-id: GetDriveResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: Drives
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Drive'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetDrivesResponse:
      type: object
      x-apideck-schema-id: GetDrivesResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: Drives
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Drive'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetFileResponse:
      type: object
      x-apideck-schema-id: GetFileResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: files
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedFile'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetFilesResponse:
      type: object
      x-apideck-schema-id: GetFilesResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: files
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/UnifiedFile'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetFolderResponse:
      type: object
      x-apideck-schema-id: GetFolderResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: undefined
        resource:
          type: string
          description: Unified API resource name
          example: Folders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Folder'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetFoldersResponse:
      type: object
      x-apideck-schema-id: GetFoldersResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: undefined
        resource:
          type: string
          description: Unified API resource name
          example: Folders
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetSharedLinkResponse:
      type: object
      x-apideck-schema-id: GetSharedLinkResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: Shared Links
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/SharedLink'
        _raw:
          $ref: '#/components/schemas/Raw'
    GetSharedLinksResponse:
      type: object
      x-apideck-schema-id: GetSharedLinksResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: Shared Links
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/SharedLink'
        _raw:
          $ref: '#/components/schemas/Raw'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetUploadSessionResponse:
      type: object
      x-apideck-schema-id: GetUploadSessionResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: UploadSessions
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UploadSession'
        _raw:
          $ref: '#/components/schemas/Raw'
    Id:
      type: string
      title: ID
      description: A unique identifier for an object.
      example: '12345'
      readOnly: true
    LinkedFolder:
      type: object
      x-apideck-schema-id: LinkedFolder
      x-apideck-weights:
        id: critical
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the folder
          example: Personal
          nullable: true
      required:
        - id
    Links:
      type: object
      x-apideck-schema-id: Links
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
    Meta:
      type: object
      x-apideck-schema-id: Meta
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    NotFoundResponse:
      type: object
      x-apideck-schema-id: NotFound
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              x-speakeasy-detail: true
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
    NotImplementedResponse:
      type: object
      x-apideck-schema-id: NotImplemented
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
            - type: object
              x-speakeasy-detail: true
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
    Owner:
      type: object
      x-apideck-schema-id: Owner
      readOnly: true
      x-apideck-weights:
        id: critical
      properties:
        id:
          type: string
          description: ID of the owner
          example: '12345'
          readOnly: true
        email:
          type: string
          description: Email of the owner
          example: hello@apideck.com
          readOnly: true
          nullable: true
        name:
          type: string
          description: Name of the owner
          example: Elon Musk
          readOnly: true
          nullable: true
    ParentFolderId:
      type: string
      x-apideck-schema-id: ParentFolderId
      description: The parent folder to create the new file within. This can be an ID or a path depending on the downstream folder. Please see the connector section below to see downstream specific gotchas.
      example: '1234'
    PassThroughBody:
      type: array
      description: The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
      items:
        type: object
        properties:
          service_id:
            type: string
            description: Identifier for the service to which this pass_through should be applied.
          operation_id:
            type: string
            description: Optional identifier for a workflow operation to which this pass_through should be applied. This is useful for Unify calls that are making more than one downstream request.
          extend_object:
            type: object
            additionalProperties: true
            description: Simple object allowing any properties for direct extension.
          extend_paths:
            type: array
            description: Array of objects for structured data modifications via paths.
            items:
              type: object
              properties:
                path:
                  type: string
                  description: JSONPath string specifying where to apply the value.
                  example: $.nested.property
                value:
                  description: The value to set at the specified path, can be any type.
                  example:
                    TaxClassificationRef:
                      value: EUC-99990201-V1-00020000
              required:
                - path
                - value
              additionalProperties: false
        required:
          - service_id
        additionalProperties: false
        writeOnly: true
    PassThroughQuery:
      type: object
      additionalProperties: true
      properties:
        example_downstream_property:
          type: string
          description: All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)
      example:
        search: San Francisco
    PaymentRequiredResponse:
      type: object
      x-apideck-schema-id: PaymentRequired
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          x-speakeasy-error-message: true
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
    SharedLink:
      type: object
      x-apideck-schema-id: SharedLink
      x-apideck-weights:
        url: critical
        download_url: high
        target_id: critical
        target: critical
        scope: high
        password_protected: low
        password: low
        expires_at: high
        updated_at: medium
        created_at: medium
      additionalProperties: false
      required:
        - target_id
      properties:
        url:
          type: string
          example: https://www.box.com/s/vspke7y05sb214wjokpk
          description: The URL that can be used to view the file.
          readOnly: true
          nullable: true
        download_url:
          type: string
          example: https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg
          description: The URL that can be used to download the file.
          nullable: true
        target_id:
          type: string
          writeOnly: true
          description: The ID of the file or folder to link.
          nullable: true
        target:
          $ref: '#/components/schemas/SharedLinkTarget'
        scope:
          type: string
          x-apideck-enum-id: files.scope
          enum:
            - public
            - company
          example: company
          description: The scope of the shared link.
          nullable: true
        password_protected:
          type: boolean
          readOnly: true
          description: Indicated if the shared link is password protected.
          nullable: true
        password:
          type: string
          writeOnly: true
          nullable: true
          description: Optional password for the shared link.
        expires_at:
          $ref: '#/components/schemas/ExpiresAt'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    SharedLinkTarget:
      type: object
      x-apideck-schema-id: SharedLinkTarget
      additionalProperties: false
      required:
        - id
      x-apideck-weights:
        id: critical
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the file
          example: sample.jpg
          nullable: true
        type:
          $ref: '#/components/schemas/FileType'
      readOnly: true
    SortDirection:
      type: string
      x-apideck-schema-id: SortDirection
      description: The direction in which to sort the results
      x-apideck-enum-id: sort_direction
      enum:
        - asc
        - desc
      default: asc
    TooManyRequestsResponse:
      type: object
      x-apideck-schema-id: TooManyRequests
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
        type_name:
          type: string
          description: The type of error returned
          example: ConnectorRateLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
          x-speakeasy-error-message: true
        detail:
          type: object
          properties:
            context:
              type: string
            error:
              type: object
              x-speakeasy-detail: true
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
    UnauthorizedResponse:
      type: object
      x-apideck-schema-id: Unauthorized
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Missing authentication
            - type: object
              x-speakeasy-detail: true
              example:
                statusCode: 401
                error: Unauthorized
                message: Missing authentication
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnexpectedErrorResponse:
      type: object
      x-apideck-schema-id: Error
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              x-speakeasy-detail: true
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnifiedFile:
      type: object
      x-apideck-schema-id: UnifiedFile
      additionalProperties: false
      required:
        - id
        - name
        - type
      x-apideck-weights:
        id: critical
        name: critical
        type: critical
        mime_type: high
        downloadable: high
        size: high
        parent_folders: high
        parent_folders_complete: critical
        updated_at: critical
        created_at: high
        downstream_id: edge-case
      properties:
        id:
          $ref: '#/components/schemas/Id'
        downstream_id:
          $ref: '#/components/schemas/DownstreamId'
        name:
          type: string
          description: The name of the file
          example: sample.jpg
          nullable: true
        description:
          type: string
          description: Optional description of the file
          example: A sample image
          nullable: true
        type:
          $ref: '#/components/schemas/FileType'
        path:
          type: string
          description: The full path of the file or folder (includes the file name)
          example: /Documents/sample.jpg
          nullable: true
        mime_type:
          type: string
          description: The MIME type of the file.
          example: image/jpeg
          nullable: true
        downloadable:
          type: boolean
          description: Whether the current user can download this file
        size:
          $ref: '#/components/schemas/FileSize'
        owner:
          $ref: '#/components/schemas/Owner'
        parent_folders:
          type: array
          description: The parent folders of the file, starting from the root
          items:
            $ref: '#/components/schemas/LinkedFolder'
        parent_folders_complete:
          type: boolean
          description: Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
        permissions:
          type: object
          description: Permissions the current user has on this file.
          properties:
            download:
              type: boolean
              description: Whether the current user can download this file.
        exportable:
          type: boolean
          description: Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
        export_formats:
          type: array
          description: The available file formats when exporting this file.
          example:
            - application/pdf
            - application/vnd.oasis.opendocument.presentation
            - text/plain
          items:
            type: string
            example: application/pdf
            description: An available file format (typically MIME type) to export this file.
          nullable: true
        custom_mappings:
          $ref: '#/components/schemas/CustomMappings'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UnifiedId:
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
      description: A object containing a unique identifier for the resource that was created, updated, or deleted.
      required:
        - id
      properties:
        id:
          title: Id
          description: The unique identifier of the resource
          type: string
          readOnly: true
          example: '12345'
    UnprocessableResponse:
      type: object
      x-apideck-schema-id: Unprocessable
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
          x-speakeasy-error-message: true
        detail:
          anyOf:
            - type: string
              example: Unprocessable request, please verify your request headers and body.
            - type: object
              x-speakeasy-detail: true
              example:
                error: Unprocessable
                message: Unprocessable request, please verify your request headers and body.
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
    UpdatedAt:
      type: string
      title: Updated at (timestamp)
      description: The date and time when the object was last updated.
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
      nullable: true
    UpdatedBy:
      type: string
      title: Updated by
      description: The user who last updated the object.
      example: '12345'
      readOnly: true
      nullable: true
    UpdateDriveGroupResponse:
      type: object
      x-apideck-schema-id: UpdateDriveGroupResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: DriveGroups
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UpdateDriveResponse:
      type: object
      x-apideck-schema-id: UpdateDriveResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: Drives
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UpdateFileRequest:
      type: object
      x-apideck-schema-id: UpdateFileRequest
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the file.
          example: New Name.pdf
        description:
          type: string
          description: Optional description of the file.
          example: Renamed PDF Document
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    UpdateFileResponse:
      type: object
      x-apideck-schema-id: UpdateFileResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: google-drive
        resource:
          type: string
          description: Unified API resource name
          example: files
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UpdateFolderRequest:
      type: object
      x-apideck-schema-id: UpdateFolderRequest
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: The name of the folder.
          example: Documents
        description:
          type: string
          description: Optional description of the folder.
          example: My Personal Documents
        parent_folder_id:
          $ref: '#/components/schemas/ParentFolderId'
        pass_through:
          $ref: '#/components/schemas/PassThroughBody'
    UpdateFolderResponse:
      type: object
      x-apideck-schema-id: UpdateFolderResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: undefined
        resource:
          type: string
          description: Unified API resource name
          example: Folders
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UpdateSharedLinkResponse:
      type: object
      x-apideck-schema-id: UpdateSharedLinkResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: Shared Links
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UpdateUploadSessionResponse:
      type: object
      x-apideck-schema-id: UpdateUploadSessionResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: dropbox
        resource:
          type: string
          description: Unified API resource name
          example: UploadSessions
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
        _raw:
          $ref: '#/components/schemas/Raw'
    UploadSession:
      type: object
      x-apideck-schema-id: UploadSession
      x-apideck-weights:
        id: critical
        success: critical
        part_size: critical
        parallel_upload_supported: critical
        uploaded_byte_range: low
        expires_at: medium
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        success:
          type: boolean
          description: Indicates if the upload session was completed successfully.
          example: true
          readOnly: true
        part_size:
          type: number
          description: Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
          example: 1000000
          readOnly: true
        parallel_upload_supported:
          type: boolean
          description: Indicates if parts of the file can uploaded in parallel.
          example: true
          readOnly: true
        uploaded_byte_range:
          type: string
          description: The range of bytes that was successfully uploaded.
          example: 0-42
          readOnly: true
        expires_at:
          $ref: '#/components/schemas/ExpiresAt'
    Raw:
      title: raw
      type: object
      x-apideck-schema-id: Raw
      description: Raw response from the integration when raw=true query param is provided
      nullable: true
      additionalProperties: true
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To access our API, you need to sign up and obtain your unique API key. Each Unify application is assigned a single API key. You can locate your API key in the Configuration Settings section of your Apideck application. Additionally, your application’s application_id is available on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header.

        - Bearer authorization header: `Authorization: Bearer "YOUR_API_KEY_HERE"`
        - Application id header: `x-apideck-app-id: "YOUR_APP_ID_HERE"`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Files
    description: Files resource represents files stored in the cloud storage services. It provides methods for managing and accessing the files, such as uploading, downloading, and deleting files. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
    x-apideck-resource-id: files
    x-apideck-model:
      $ref: '#/components/schemas/UnifiedFile'
  - name: Folders
    description: Folders resource represents the folders within a drive in the cloud storage service. It provides methods for managing and accessing the folders, such as creating, deleting, and listing files & folders in a given folder.
    x-apideck-resource-id: folders
    x-apideck-model:
      $ref: '#/components/schemas/Folder'
  - name: Shared Links
    description: Shared links resource represents the links to files and folders in the cloud storage service that have been shared with other users. It provides methods for managing and accessing the shared links, such as creating, deleting, and listing shared links. A shared link allows other users to access the file or folder that it points to, either by viewing it online or by downloading it.
    x-apideck-resource-id: shared-links
    x-apideck-model:
      $ref: '#/components/schemas/SharedLink'
  - name: Upload Sessions
    description: Upload sessions resource represents the sessions used for uploading files to the cloud storage service. It provides methods for managing and accessing the upload sessions, such as creating and resuming upload sessions. An upload session allows for efficient uploading of large files by breaking them into smaller chunks and uploading each chunk individually.
    x-apideck-resource-id: upload-sessions
    x-apideck-model:
      $ref: '#/components/schemas/UploadSession'
  - name: Drives
    description: Drives resource represents logical containers for storing folders and files in the cloud storage service. It provides methods for managing and accessing the drives, such as creating, deleting, and listing drives.
    x-apideck-resource-id: drives
    x-apideck-model:
      $ref: '#/components/schemas/Drive'
  - name: Drive Groups
    description: Drive Groups resource represents the groups of drives in the cloud storage service. It provides methods for managing and accessing the drive groups, such as creating, deleting, and listing drive groups. A drive group is a logical grouping of drives, which can be used to manage the drives in the cloud storage service.
    x-apideck-resource-id: drive-groups
    x-apideck-model:
      $ref: '#/components/schemas/DriveGroup'
paths:
  /file-storage/files:
    get:
      tags:
        - Files
      operationId: filesAll
      summary: List Files
      description: List Files
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/filesFilter'
        - $ref: '#/components/parameters/filesSort'
        - $ref: '#/components/parameters/passThrough'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetFilesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-gotchas:
        - connector: google-drive
          description: Google drive does not provide `previous` cursor information, so the cursors for the previous pages will be empty.
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Files
      operationId: filesUpload
      summary: Upload file
      description: Upload file (max 100MB). Please use the [Upload Sessions API](#operation/uploadSessionsStart) to upload bigger files. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      x-sdk-exclude: true
      servers:
        - url: https://upload.apideck.com
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/metadata'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
      x-apideck-gotchas:
        - connector: onedrive
          description: OneDrive limits file uploads to 4MB. Please use the [Upload Sessions API](#operation/uploadSessionsStart) to upload bigger files.
        - connector: sharepoint
          description: Sharepoint limits file uploads to 4MB. Please use the [Upload Sessions API](#operation/uploadSessionsStart) to upload bigger files.
      responses:
        '201':
          $ref: '#/components/responses/CreateFileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID',
              metadata: 'REPLACE_WITH_METADATA'
            })

            try {
              const { data } = await apideck.fileStorage.filesUpload({
                filesUpload: 'string'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/files/search:
    post:
      tags:
        - Files
      operationId: filesSearch
      summary: Search Files
      description: Search Files
      parameters:
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/passThrough'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/filesFilter'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesSearch'
      responses:
        '200':
          $ref: '#/components/responses/GetFilesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesSearch({
                filesSearch: {
                  query: 'logo jpg'
                }
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/files/{id}:
    get:
      tags:
        - Files
      operationId: filesOne
      summary: Get File
      description: Get File
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetFileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Files
      operationId: filesUpdate
      summary: Rename or move File
      description: Rename or move File
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateFileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              file: {
                name: 'New Name.pdf',
                description: 'Renamed PDF Document',
                parent_folder_id: '1234',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.filesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Files
      operationId: filesDelete
      summary: Delete File
      description: Delete File
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteFileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/files/{id}/download:
    get:
      tags:
        - Files
      operationId: filesDownload
      summary: Download File
      description: Download File
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetFileDownloadResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesDownload({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/files/{id}/export:
    get:
      tags:
        - Files
      operationId: filesExport
      summary: Export File
      description: Export File
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/format'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetFileDownloadResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.filesExport({
                id: 'id_example',
                format: 'pdf'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/folders:
    post:
      tags:
        - Folders
      operationId: foldersAdd
      summary: Create Folder
      description: Create Folder
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      x-apideck-gotchas:
        - connector: dropbox
          description: To create a new folder at the top level in Dropbox via its API, use "root" as the parent_folder_id. For a subfolder, use "/ParentFolder" as the parent_folder_id, including the initial "/". Omitting this slash leads to a regex error from Dropbox.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              folder: {
                name: 'Documents',
                description: 'My Personal Documents',
                parent_folder_id: '1234',
                drive_id: '1234',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.foldersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/folders/{id}:
    get:
      tags:
        - Folders
      operationId: foldersOne
      summary: Get Folder
      description: Get Folder
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-gotchas:
        - connector: dropbox
          description: Dropbox does not support getting metadata for the `root` folder.
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.foldersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Folders
      operationId: foldersUpdate
      summary: Rename or move Folder
      description: Rename or move Folder
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              folder: {
                name: 'Documents',
                description: 'My Personal Documents',
                parent_folder_id: '1234',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.foldersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Folders
      operationId: foldersDelete
      summary: Delete Folder
      description: Delete Folder
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.foldersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/folders/{id}/copy:
    post:
      tags:
        - Folders
      operationId: foldersCopy
      summary: Copy Folder
      description: Copy Folder
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyFolderRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              folder: {
                name: 'Documents',
                parent_folder_id: '1234',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.foldersCopy(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/shared-links:
    get:
      tags:
        - Shared Links
      operationId: sharedLinksAll
      summary: List SharedLinks
      description: List SharedLinks
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/passThrough'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetSharedLinksResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.sharedLinksAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Shared Links
      operationId: sharedLinksAdd
      summary: Create Shared Link
      description: Create Shared Link
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLink'
      responses:
        '201':
          $ref: '#/components/responses/CreateSharedLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              sharedLink: {
                download_url: 'https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg',
                target_id: 'string',
                scope: 'company',
                password: 'string',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.sharedLinksAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/shared-links/{id}:
    get:
      tags:
        - Shared Links
      operationId: sharedLinksOne
      summary: Get Shared Link
      description: Get Shared Link
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetSharedLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.sharedLinksOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Shared Links
      operationId: sharedLinksUpdate
      summary: Update Shared Link
      description: Update Shared Link
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLink'
      responses:
        '200':
          $ref: '#/components/responses/UpdateSharedLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              sharedLink: {
                download_url: 'https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg',
                target_id: 'string',
                scope: 'company',
                password: 'string',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.sharedLinksUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Shared Links
      operationId: sharedLinksDelete
      summary: Delete Shared Link
      description: Delete Shared Link
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteSharedLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.sharedLinksDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/upload-sessions:
    post:
      tags:
        - Upload Sessions
      operationId: uploadSessionsAdd
      summary: Start Upload Session
      description: Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      servers:
        - url: https://upload.apideck.com
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadSessionRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateUploadSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              uploadSession: {
                name: 'Documents',
                parent_folder_id: '1234',
                drive_id: '1234',
                size: 1810673,
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.uploadSessionsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/upload-sessions/{id}:
    get:
      tags:
        - Upload Sessions
      operationId: uploadSessionsOne
      summary: Get Upload Session
      description: Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      servers:
        - url: https://upload.apideck.com
      responses:
        '200':
          $ref: '#/components/responses/GetUploadSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.uploadSessionsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    put:
      tags:
        - Upload Sessions
      operationId: uploadSessionsUpload
      summary: Upload part of File to Upload Session
      description: Upload part of File to Upload Session (max 100MB). Get `part_size` from [Get Upload Session](#operation/uploadSessionsOne) first. Every File part (except the last one) uploaded to this endpoint should have Content-Length equal to `part_size`. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      x-sdk-exclude: true
      servers:
        - url: https://upload.apideck.com
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/partNumber'
        - $ref: '#/components/parameters/digestPart'
        - $ref: '#/components/parameters/raw'
      x-apideck-gotchas:
        - connector: box
          description: Box requires a SHA1 digest of the uploaded chunk to be sent. More info in the Box API documentation [here](https://developer.box.com/reference/put-files-upload-sessions-id/#param-digest).
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          '*/*':
            schema:
              type: string
              format: binary
              example: <binary string>
      responses:
        '200':
          $ref: '#/components/responses/UpdateUploadSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID',
              digest: 'REPLACE_WITH_DIGEST'
            })

            const params = {
              id: 'id_example',
              partNumber: 0,
              body: '<binary string>'
            }

            try {
              const { data } = await apideck.fileStorage.uploadSessionsUpload(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Upload Sessions
      operationId: uploadSessionsDelete
      summary: Abort Upload Session
      description: Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteUploadSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.uploadSessionsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/upload-sessions/{id}/finish:
    post:
      tags:
        - Upload Sessions
      operationId: uploadSessionsFinish
      summary: Finish Upload Session
      description: Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/digestPart'
      security:
        - apiKey: []
      servers:
        - url: https://upload.apideck.com
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
              additionalProperties: false
      x-apideck-gotchas:
        - connector: box
          description: Box requires a SHA1 digest of the whole file to be sent when committing the upload session. More info in the Box API documentation [here](https://developer.box.com/reference/post-files-upload-sessions-id-commit/#param-digest).
      responses:
        '201':
          $ref: '#/components/responses/GetFileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID',
              digest: 'REPLACE_WITH_DIGEST'
            })

            try {
              const { data } = await apideck.fileStorage.uploadSessionsFinish({
                id: 'id_example',
                uploadSessionsFinish: {}
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/drives:
    get:
      tags:
        - Drives
      operationId: drivesAll
      summary: List Drives
      description: List Drives
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/drivesFilter'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetDrivesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-gotchas:
        - connector: google-drive
          description: Google drive does not provide `previous` cursor information, so the cursors for the previous pages will be empty.
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.drivesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Drives
      operationId: drivesAdd
      summary: Create Drive
      description: Create Drive
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drive'
      responses:
        '201':
          $ref: '#/components/responses/CreateDriveResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              drive: {
                name: 'Project Resources',
                description: 'A description',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.drivesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/drives/{id}:
    get:
      tags:
        - Drives
      operationId: drivesOne
      summary: Get Drive
      description: Get Drive
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetDriveResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.drivesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Drives
      operationId: drivesUpdate
      summary: Update Drive
      description: Update Drive
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drive'
      responses:
        '200':
          $ref: '#/components/responses/UpdateDriveResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              drive: {
                name: 'Project Resources',
                description: 'A description',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.drivesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Drives
      operationId: drivesDelete
      summary: Delete Drive
      description: Delete Drive
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteDriveResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.drivesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/drive-groups:
    get:
      tags:
        - Drive Groups
      operationId: driveGroupsAll
      summary: List DriveGroups
      description: List DriveGroups
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/driveGroupsFilter'
        - $ref: '#/components/parameters/passThrough'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetDriveGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.driveGroupsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Drive Groups
      operationId: driveGroupsAdd
      summary: Create DriveGroup
      description: Create DriveGroup
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriveGroup'
      responses:
        '201':
          $ref: '#/components/responses/CreateDriveGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              driveGroup: {
                name: 'accounting',
                display_name: 'accounting',
                description: 'A description',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.driveGroupsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /file-storage/drive-groups/{id}:
    get:
      tags:
        - Drive Groups
      operationId: driveGroupsOne
      summary: Get DriveGroup
      description: Get DriveGroup
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetDriveGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.driveGroupsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Drive Groups
      operationId: driveGroupsUpdate
      summary: Update DriveGroup
      description: Update DriveGroup
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DriveGroup'
      responses:
        '200':
          $ref: '#/components/responses/UpdateDriveGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              driveGroup: {
                name: 'accounting',
                display_name: 'accounting',
                description: 'A description',
                pass_through: [
                  {
                    service_id: 'string',
                    operation_id: 'string',
                    extend_object: {},
                    extend_paths: [
                      {
                        path: '$.nested.property',
                        value: [Object]
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.fileStorage.driveGroupsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Drive Groups
      operationId: driveGroupsDelete
      summary: Delete DriveGroup
      description: Delete DriveGroup
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteDriveGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: fileStorage
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.fileStorage.driveGroupsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  FileCreated:
    post:
      summary: File Created
      description: Event broadcast when a file has been created.
      operationId: fileCreated
      x-apideck-event-type: file-storage.file.created
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/FileStorageEventType'
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/FileStorageWebhookEvent'
            example:
              payload:
                event_type: file-storage.file.created
                unified_api: file-storage
                service_id: dropbox
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/file-storage/files/123456ASDF
                entity_type: file
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
  FileUpdated:
    post:
      summary: File Updated
      description: Event broadcast when a file has been updated.
      operationId: fileUpdated
      x-apideck-event-type: file-storage.file.updated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/FileStorageEventType'
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/FileStorageWebhookEvent'
            example:
              payload:
                event_type: file-storage.file.updated
                unified_api: file-storage
                service_id: dropbox
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/file-storage/files/123456ASDF
                entity_type: file
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
  FileDeleted:
    post:
      summary: File Deleted
      description: Event broadcast when a file has been deleted.
      operationId: fileDeleted
      x-apideck-event-type: file-storage.file.deleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/FileStorageEventType'
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/FileStorageWebhookEvent'
            example:
              payload:
                event_type: file-storage.file.deleted
                unified_api: file-storage
                service_id: dropbox
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/file-storage/files/123456ASDF
                entity_type: file
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
