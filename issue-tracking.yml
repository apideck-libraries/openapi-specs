openapi: 3.0.0
info:
  version: 9.5.0
  title: Issue Tracking API
  description: "Welcome to the Issue Tracking API.\n\nYou can use this API to access all Issue Tracking API endpoints.\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\nWe also provide a [Mock API](https://developers.apideck.com/mock-api) that can be used for testing purposes: `https://mock-api.apideck.com`\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Pagination\n\nAll API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\nTo fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\nIn the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n### Query Parameters\n\n| Name   | Type   | Required | Description                                                                                                        |\n| ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n| cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |\n| limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n### Response Body\n\n| Name                  | Type   | Description                                                        |\n| --------------------- | ------ | ------------------------------------------------------------------ |\n| meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n| meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n| meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n| meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n| links.previous        | String | Link to navigate to the previous page of results through the API   |\n| links.current         | String | Link to navigate to the current page of results through the API    |\n| links.next            | String | Link to navigate to the next page of results through the API       |\n\n⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n## SDKs and API Clients\n\nWe currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.\nNeed another SDK? [Request the SDK of your choice](https://integrations.apideck.com/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### RequestValidationError\n\nRequest is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n#### UnsupportedFiltersError\n\nFilters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n#### UnsupportedSortFieldError\n\nSort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n#### InvalidCursorError\n\nPagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### ConnectorRateLimitError\n\nYou sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### OAuthCredentialsNotFoundError\n\nWhen adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectionSettingsError\n\nThe connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### OAuthRedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### OAuthInvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### OAuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### OAuthConnectorError\n\nIt seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationUnsupportedError\n\nYou're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n#### PaginationNotSupportedError\n\nPagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It's most common use is to return the total number of records when requesting a collection of resources.\n\n### Idempotence (upcoming)\n\nTo prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.\n\nUniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency's smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n\n"
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  x-logo:
    url: https://developers.apideck.com/icon.png
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-apideck-api: issue-tracking
  x-apideck-sdk-support: true
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
servers:
  - url: https://unify.apideck.com
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
    serviceId:
      name: x-apideck-service-id
      in: header
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      schema:
        type: string
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: false
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    limit:
      name: limit
      in: query
      description: Number of results to return. Minimum 1, Maximum 200, Default 20
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    fields:
      name: fields
      in: query
      description: 'The ''fields'' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.'
      example: id,updated_at
      schema:
        type: string
        nullable: true
    collectionId:
      in: path
      name: collection_id
      schema:
        type: string
        example: apideck-io
      required: true
      description: The collection ID
    ticketId:
      in: path
      name: ticket_id
      schema:
        type: string
      required: true
      description: ID of the ticket you are acting upon.
    ticketsSort:
      name: sort
      in: query
      description: Apply sorting
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/TicketsSort'
    collectionsSort:
      name: sort
      in: query
      description: Apply sorting
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/CollectionsSort'
    commentsSort:
      name: sort
      in: query
      description: Apply sorting
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/CommentsSort'
    issuesFilter:
      name: filter
      in: query
      description: Apply filters
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/IssuesFilter'
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    CreateTicketResponse:
      description: Create a Ticket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTicketResponse'
    UpdateTicketResponse:
      description: Update a Ticket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTicketResponse'
    DeleteTicketResponse:
      description: Delete a Ticket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteTicketResponse'
    GetTicketResponse:
      description: Get a Ticket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTicketResponse'
    GetTicketsResponse:
      description: List Tickets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTicketsResponse'
    GetCommentResponse:
      description: Get a Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCommentResponse'
    GetCommentsResponse:
      description: List Comments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCommentsResponse'
    CreateCommentResponse:
      description: Create a Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCommentResponse'
    UpdateCommentResponse:
      description: Update a Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCommentResponse'
    DeleteCommentResponse:
      description: Delete a Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteCommentResponse'
    GetCollectionResponse:
      description: Get a Collection
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCollectionResponse'
    GetCollectionsResponse:
      description: List Collections
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCollectionsResponse'
    GetCollectionUserResponse:
      description: User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCollectionUserResponse'
    GetCollectionUsersResponse:
      description: Users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCollectionUsersResponse'
    GetCollectionTagsResponse:
      description: List Tags
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCollectionTagsResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    NotImplementedResponse:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
    UnprocessableResponse:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
  schemas:
    Address:
      type: object
      x-apideck-schema-id: Address
      additionalProperties: false
      x-apideck-weights:
        id: edge-case
        name: edge-case
        type: critical
        line1: high
        line2: low
        line3: edge-case
        line4: edge-case
        street_number: low
        city: high
        string: low
        state: high
        postal_code: high
        country: high
        latitude: low
        longitude: low
        county: edge-case
        contact_name: edge-case
        salutation: edge-case
        phone_number: edge-case
        fax: edge-case
        email: edge-case
        website: edge-case
        row_version: edge-case
      properties:
        id:
          type: string
          example: '123'
          nullable: true
        type:
          type: string
          x-apideck-enum-id: addresses.type
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
        string:
          type: string
          title: The address string. Some APIs don't provide structured address data.
          example: 25 Spring Street, Blackburn, VIC 3130
          nullable: true
        name:
          type: string
          example: HQ US
          nullable: true
        line1:
          type: string
          example: Main street
          description: 'Line 1 of the address e.g. number, street, suite, apt #, etc.'
          nullable: true
        line2:
          type: string
          example: 'apt #'
          description: Line 2 of the address
          nullable: true
        line3:
          type: string
          example: 'Suite #'
          description: Line 3 of the address
          nullable: true
        line4:
          type: string
          example: delivery instructions
          description: Line 4 of the address
          nullable: true
        street_number:
          type: string
          example: '25'
          description: Street number
          nullable: true
        city:
          type: string
          example: San Francisco
          description: Name of city.
          nullable: true
        state:
          type: string
          example: CA
          description: Name of state
          nullable: true
        postal_code:
          type: string
          example: '94104'
          description: Zip code or equivalent.
          nullable: true
        country:
          type: string
          example: US
          description: country code according to ISO 3166-1 alpha-2.
          nullable: true
        latitude:
          type: string
          example: '40.759211'
          nullable: true
        longitude:
          type: string
          example: '-73.984638'
          nullable: true
        county:
          type: string
          example: Santa Clara
          description: Address field that holds a sublocality, such as a county
          nullable: true
        contact_name:
          type: string
          example: Elon Musk
          nullable: true
        salutation:
          type: string
          example: Mr
          nullable: true
        phone_number:
          type: string
          example: 111-111-1111
          nullable: true
        fax:
          type: string
          example: 122-111-1111
          nullable: true
        email:
          type: string
          example: elon@musk.com
          nullable: true
        website:
          type: string
          example: https://elonmusk.com
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
    Assignee:
      type: object
      x-apideck-schema-id: Assignee
      x-apideck-weights:
        id: critical
        username: medium
      additionalProperties: false
      required:
        - id
      properties:
        id:
          type: string
          title: ID
          description: A unique identifier for an object.
          example: '12345'
        username:
          type: string
          title: Name
          example: Cocoa
          readOnly: true
    BadRequestResponse:
      type: object
      x-apideck-schema-id: BadRequest
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
    Collection:
      type: object
      x-apideck-schema-id: Collection
      x-apideck-weights:
        id: critical
        name: high
        updated_at: high
        created_at: high
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        parent_id:
          type: string
          example: '12345'
          description: The collections's parent ID
        type:
          type: string
          title: Type
          example: Technical
          description: The collections's type
        name:
          type: string
          title: name
          example: Main IT Issues
          description: Name of the collection
        description:
          type: string
          title: Description
          example: IT Issues
          description: Description of the collection
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    CollectionsSort:
      type: object
      x-apideck-schema-id: CollectionsSort
      example:
        by: name
        direction: desc
      properties:
        by:
          type: string
          x-apideck-enum-id: Collections.sort_by
          description: The field on which to sort the Collections
          enum:
            - name
            - created_at
            - updated_at
          example: name
        direction:
          $ref: '#/components/schemas/SortDirection'
      additionalProperties: false
    CollectionTag:
      type: object
      x-apideck-schema-id: Tag
      x-apideck-weights:
        id: critical
        name: medium
      additionalProperties: false
      required:
        - id
      properties:
        id:
          type: string
          title: ID
          description: A unique identifier for an object.
          example: '12345'
        name:
          type: string
          title: Name
          example: User Experience
          readOnly: true
    CollectionTicketComment:
      type: object
      x-apideck-schema-id: Comment
      x-apideck-weights:
        id: critical
        body: critical
        created_by: critical
        created_at: critical
        updated_at: medium
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        body:
          type: string
          title: Body
          example: What internet provider do you use?
          description: Body of the comment
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    CollectionUser:
      type: object
      x-apideck-schema-id: CollectionUser
      x-apideck-weights:
        id: high
        name: critical
        first_name: high
        last_name: high
        email: medium
        updated_at: medium
        created_at: medium
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          title: Name
          example: Elon Musk
        first_name:
          type: string
          example: Elon
          nullable: true
        last_name:
          type: string
          example: Musk
          nullable: true
        email:
          type: string
          example: elon@musk.com
          nullable: true
        photo_url:
          $ref: '#/components/schemas/PhotoUrl'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    CommentsSort:
      type: object
      x-apideck-schema-id: CommentsSort
      example:
        by: created_at
        direction: desc
      properties:
        by:
          type: string
          x-apideck-enum-id: Comments.sort_by
          description: The field on which to sort the Comments
          enum:
            - created_at
            - updated_at
          example: created_at
        direction:
          $ref: '#/components/schemas/SortDirection'
      additionalProperties: false
    CompanyId:
      type: string
      title: Company ID
      description: The unique identifier of the company.
      example: '23456'
      nullable: true
    CompanyName:
      type: string
      title: Company name
      description: The name of the company.
      example: SpaceX
      nullable: true
    CreateCommentResponse:
      type: object
      x-apideck-schema-id: CreateCommentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreatedAt:
      type: string
      title: Created at (timestamp)
      description: The date and time when the object was created.
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    CreatedBy:
      type: string
      title: Created by
      description: The user who created the object.
      example: '12345'
      readOnly: true
      nullable: true
    CreateTicketResponse:
      type: object
      x-apideck-schema-id: CreateTicketResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    Currency:
      type: string
      title: Currency
      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
      example: USD
      x-apideck-enum-id: currencies
      x-apideck-enum-coverage-ignore: true
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
        - ETH
      x-enum-elements:
        - name: UNKNOWN_CURRENCY
          description: Unknown currency
        - name: AED
          description: United Arab Emirates dirham
        - name: AFN
          description: Afghan afghani
        - name: ALL
          description: Albanian lek
        - name: AMD
          description: Armenian dram
        - name: ANG
          description: Netherlands Antillean guilder
        - name: AOA
          description: Angolan kwanza
        - name: ARS
          description: Argentine peso
        - name: AUD
          description: Australian dollar
        - name: AWG
          description: Aruban florin
        - name: AZN
          description: Azerbaijani manat
        - name: BAM
          description: Bosnia and Herzegovina convertible mark
        - name: BBD
          description: Barbados dollar
        - name: BDT
          description: Bangladeshi taka
        - name: BGN
          description: Bulgarian lev
        - name: BHD
          description: Bahraini dinar
        - name: BIF
          description: Burundian franc
        - name: BMD
          description: Bermudian dollar
        - name: BND
          description: Brunei dollar
        - name: BOB
          description: Boliviano
        - name: BOV
          description: Bolivian Mvdol
        - name: BRL
          description: Brazilian real
        - name: BSD
          description: Bahamian dollar
        - name: BTN
          description: Bhutanese ngultrum
        - name: BWP
          description: Botswana pula
        - name: BYR
          description: Belarusian ruble
        - name: BZD
          description: Belize dollar
        - name: CAD
          description: Canadian dollar
        - name: CDF
          description: Congolese franc
        - name: CHE
          description: WIR Euro
        - name: CHF
          description: Swiss franc
        - name: CHW
          description: WIR Franc
        - name: CLF
          description: Unidad de Fomento
        - name: CLP
          description: Chilean peso
        - name: CNY
          description: Chinese yuan
        - name: COP
          description: Colombian peso
        - name: COU
          description: Unidad de Valor Real
        - name: CRC
          description: Costa Rican colon
        - name: CUC
          description: Cuban convertible peso
        - name: CUP
          description: Cuban peso
        - name: CVE
          description: Cape Verdean escudo
        - name: CZK
          description: Czech koruna
        - name: DJF
          description: Djiboutian franc
        - name: DKK
          description: Danish krone
        - name: DOP
          description: Dominican peso
        - name: DZD
          description: Algerian dinar
        - name: EGP
          description: Egyptian pound
        - name: ERN
          description: Eritrean nakfa
        - name: ETB
          description: Ethiopian birr
        - name: EUR
          description: Euro
        - name: FJD
          description: Fiji dollar
        - name: FKP
          description: Falkland Islands pound
        - name: GBP
          description: Pound sterling
        - name: GEL
          description: Georgian lari
        - name: GHS
          description: Ghanaian cedi
        - name: GIP
          description: Gibraltar pound
        - name: GMD
          description: Gambian dalasi
        - name: GNF
          description: Guinean franc
        - name: GTQ
          description: Guatemalan quetzal
        - name: GYD
          description: Guyanese dollar
        - name: HKD
          description: Hong Kong dollar
        - name: HNL
          description: Honduran lempira
        - name: HRK
          description: Croatian kuna
        - name: HTG
          description: Haitian gourde
        - name: HUF
          description: Hungarian forint
        - name: IDR
          description: Indonesian rupiah
        - name: ILS
          description: Israeli new shekel
        - name: INR
          description: Indian rupee
        - name: IQD
          description: Iraqi dinar
        - name: IRR
          description: Iranian rial
        - name: ISK
          description: Icelandic króna
        - name: JMD
          description: Jamaican dollar
        - name: JOD
          description: Jordanian dinar
        - name: JPY
          description: Japanese yen
        - name: KES
          description: Kenyan shilling
        - name: KGS
          description: Kyrgyzstani som
        - name: KHR
          description: Cambodian riel
        - name: KMF
          description: Comoro franc
        - name: KPW
          description: North Korean won
        - name: KRW
          description: South Korean won
        - name: KWD
          description: Kuwaiti dinar
        - name: KYD
          description: Cayman Islands dollar
        - name: KZT
          description: Kazakhstani tenge
        - name: LAK
          description: Lao kip
        - name: LBP
          description: Lebanese pound
        - name: LKR
          description: Sri Lankan rupee
        - name: LRD
          description: Liberian dollar
        - name: LSL
          description: Lesotho loti
        - name: LTL
          description: Lithuanian litas
        - name: LVL
          description: Latvian lats
        - name: LYD
          description: Libyan dinar
        - name: MAD
          description: Moroccan dirham
        - name: MDL
          description: Moldovan leu
        - name: MGA
          description: Malagasy ariary
        - name: MKD
          description: Macedonian denar
        - name: MMK
          description: Myanmar kyat
        - name: MNT
          description: Mongolian tögrög
        - name: MOP
          description: Macanese pataca
        - name: MRO
          description: Mauritanian ouguiya
        - name: MUR
          description: Mauritian rupee
        - name: MVR
          description: Maldivian rufiyaa
        - name: MWK
          description: Malawian kwacha
        - name: MXN
          description: Mexican peso
        - name: MXV
          description: Mexican Unidad de Inversion
        - name: MYR
          description: Malaysian ringgit
        - name: MZN
          description: Mozambican metical
        - name: NAD
          description: Namibian dollar
        - name: NGN
          description: Nigerian naira
        - name: NIO
          description: Nicaraguan córdoba
        - name: NOK
          description: Norwegian krone
        - name: NPR
          description: Nepalese rupee
        - name: NZD
          description: New Zealand dollar
        - name: OMR
          description: Omani rial
        - name: PAB
          description: Panamanian balboa
        - name: PEN
          description: Peruvian sol
        - name: PGK
          description: Papua New Guinean kina
        - name: PHP
          description: Philippine peso
        - name: PKR
          description: Pakistani rupee
        - name: PLN
          description: Polish złoty
        - name: PYG
          description: Paraguayan guaraní
        - name: QAR
          description: Qatari riyal
        - name: RON
          description: Romanian leu
        - name: RSD
          description: Serbian dinar
        - name: RUB
          description: Russian ruble
        - name: RWF
          description: Rwandan franc
        - name: SAR
          description: Saudi riyal
        - name: SBD
          description: Solomon Islands dollar
        - name: SCR
          description: Seychelles rupee
        - name: SDG
          description: Sudanese pound
        - name: SEK
          description: Swedish krona
        - name: SGD
          description: Singapore dollar
        - name: SHP
          description: Saint Helena pound
        - name: SLL
          description: Sierra Leonean leone
        - name: SOS
          description: Somali shilling
        - name: SRD
          description: Surinamese dollar
        - name: SSP
          description: South Sudanese pound
        - name: STD
          description: São Tomé and Príncipe dobra
        - name: SVC
          description: Salvadoran colón
        - name: SYP
          description: Syrian pound
        - name: SZL
          description: Swazi lilangeni
        - name: THB
          description: Thai baht
        - name: TJS
          description: Tajikstani somoni
        - name: TMT
          description: Turkmenistan manat
        - name: TND
          description: Tunisian dinar
        - name: TOP
          description: Tongan pa'anga
        - name: TRY
          description: Turkish lira
        - name: TTD
          description: Trinidad and Tobago dollar
        - name: TWD
          description: New Taiwan dollar
        - name: TZS
          description: Tanzanian shilling
        - name: UAH
          description: Ukrainian hryvnia
        - name: UGX
          description: Ugandan shilling
        - name: USD
          description: United States dollar
        - name: USN
          description: United States dollar (next day)
        - name: USS
          description: United States dollar (same day)
        - name: UYI
          description: Uruguay Peso en Unidedades Indexadas
        - name: UYU
          description: Uruguyan peso
        - name: UZS
          description: Uzbekistan som
        - name: VEF
          description: Venezuelan bolívar soberano
        - name: VND
          description: Vietnamese đồng
        - name: VUV
          description: Vanuatu vatu
        - name: WST
          description: Samoan tala
        - name: XAF
          description: CFA franc BEAC
        - name: XAG
          description: Silver
        - name: XAU
          description: Gold
        - name: XBA
          description: European Composite Unit
        - name: XBB
          description: European Monetary Unit
        - name: XBC
          description: European Unit of Account 9
        - name: XBD
          description: European Unit of Account 17
        - name: XCD
          description: East Caribbean dollar
        - name: XDR
          description: Special drawing rights (International Monetary Fund)
        - name: XOF
          description: CFA franc BCEAO
        - name: XPD
          description: Palladium
        - name: XPF
          description: CFP franc
        - name: XPT
          description: Platinum
        - name: XTS
          description: Code reserved for testing
        - name: XXX
          description: No currency
        - name: YER
          description: Yemeni rial
        - name: ZAR
          description: South African rand
        - name: ZMK
          description: Zambian kwacha
        - name: ZMW
          description: Zambian kwacha
        - name: BTC
          description: Bitcoin
        - name: ETH
          description: Ether
      nullable: true
    CustomField:
      type: object
      x-apideck-schema-id: CustomField
      required:
        - id
      additionalProperties: false
      x-apideck-weights:
        id: critical
        value: critical
        name: medium
        description: edge-case
      properties:
        id:
          title: ID
          type: string
          example: '2389328923893298'
        name:
          title: Name
          type: string
          description: Name of the custom field.
          example: employee_level
        description:
          title: Description
          type: string
          description: More information about the custom field
          example: Employee Level
        value:
          anyOf:
            - type: string
              example: Uses Salesforce and Marketo
              nullable: true
            - type: number
              example: 10
              nullable: true
            - type: boolean
              example: true
              nullable: true
            - type: array
              items:
                type: string
    DeleteCommentResponse:
      type: object
      x-apideck-schema-id: DeleteCommentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteTicketResponse:
      type: object
      x-apideck-schema-id: DeleteTicketResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: add
        data:
          $ref: '#/components/schemas/UnifiedId'
    Department:
      type: object
      x-apideck-schema-id: Department
      x-apideck-weights:
        id: critical
        name: critical
        code: medium
        description: low
        updated_by: edge-case
        created_by: edge-case
        updated_at: medium
        created_at: medium
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        parent_id:
          description: Parent ID
          type: string
          readOnly: true
          example: '22345'
        name:
          title: Name
          description: Department name
          type: string
          example: R&D
          nullable: true
        code:
          title: Code
          type: string
          example: '2'
          nullable: true
        description:
          title: Description
          type: string
          example: R&D
          nullable: true
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    Description:
      type: string
      title: Description
      description: A description of the object.
      example: A description
      nullable: true
    Division:
      type: string
      title: Division
      description: The division the person is currently in. Usually a collection of departments or teams or regions.
      example: Europe
      nullable: true
    Email:
      type: object
      x-apideck-schema-id: Email
      required:
        - email
      additionalProperties: false
      x-apideck-weights:
        email: critical
        type: critical
        id: edge-case
      properties:
        id:
          type: string
          example: '123'
        email:
          type: string
          format: email
          example: elon@musk.com
          minLength: 1
        type:
          type: string
          x-apideck-enum-id: emails.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
    FirstName:
      type: string
      title: First name
      description: The first name of the person.
      example: Elon
      nullable: true
    Gender:
      type: string
      x-apideck-enum-id: genders
      title: Gender
      description: The gender represents the gender identity of a person.
      enum:
        - male
        - female
        - unisex
        - other
        - not_specified
      example: male
      nullable: true
    GetCollectionResponse:
      type: object
      x-apideck-schema-id: GetCollectionResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Collection'
    GetCollectionsResponse:
      type: object
      x-apideck-schema-id: GetCollectionsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetCollectionTagsResponse:
      type: object
      x-apideck-schema-id: GetTagsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/CollectionTag'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetCollectionUserResponse:
      type: object
      x-apideck-schema-id: GetCollectionUserResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/CollectionUser'
    GetCollectionUsersResponse:
      type: object
      x-apideck-schema-id: GetCollectionUsersResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/CollectionUser'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetCommentResponse:
      type: object
      x-apideck-schema-id: GetCommentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: sage-hr
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/CollectionTicketComment'
    GetCommentsResponse:
      type: object
      x-apideck-schema-id: GetCommentsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/CollectionTicketComment'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetTicketResponse:
      type: object
      x-apideck-schema-id: GetTicketResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: sage-hr
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Ticket'
    GetTicketsResponse:
      type: object
      x-apideck-schema-id: GetTicketsResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: jira
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: all
        data:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Id:
      type: string
      title: ID
      description: A unique identifier for an object.
      example: '12345'
      readOnly: true
    IssuesFilter:
      type: object
      x-apideck-schema-id: IssuesFilter
      example:
        status:
          - open
      properties:
        status:
          type: array
          title: ticket status
          example:
            - closed
          description: Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
          default: []
          uniqueItems: true
          items:
            type: string
        since:
          type: string
          title: Since date (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          description: Only return tickets since a specific date
        assignee_id:
          type: string
          title: Assignee ID
          example: 2332bd9c2eaaa5dcfa14721c
          description: Only return tickets assigned to a specific user
      additionalProperties: false
    IssueTrackingEventType:
      type: string
      x-apideck-enum-id: issue-tracking.events
      enum:
        - '*'
        - issue-tracking.ticket.created
        - issue-tracking.ticket.updated
        - issue-tracking.ticket.deleted
    IssueTrackingWebhookEvent:
      x-sdk-exclude: true
      allOf:
        - type: object
          x-apideck-schema-id: WebhookEvent
          properties:
            event_id:
              type: string
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
            service_id:
              type: string
              description: Service provider identifier
              example: close
            entity_id:
              type: string
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
            entity_type:
              type: string
              description: The type entity that triggered this event
              example: Company
            entity_url:
              type: string
              description: The url to retrieve entity detail.
              example: https://unify.apideck.com/crm/contacts/123456
            execution_attempt:
              type: number
              description: The current count this request event has been attempted
              example: 2
            occurred_at:
              type: string
              description: ISO Datetime for when the original event occurred
              example: '2021-10-01T03:14:55.419Z'
        - type: object
          properties:
            event_type:
              $ref: '#/components/schemas/IssueTrackingEventType'
    Language:
      type: string
      example: EN
      description: language code according to ISO 639-1. For the United States - EN
      nullable: true
    LastName:
      type: string
      title: Last name
      description: The last name of the person.
      example: Musk
      nullable: true
    Links:
      type: object
      x-apideck-schema-id: Links
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
    Meta:
      type: object
      x-apideck-schema-id: Meta
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    MiddleName:
      type: string
      title: Middle name
      description: Middle name of the person.
      example: D.
      nullable: true
    NotFoundResponse:
      type: object
      x-apideck-schema-id: NotFound
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
    NotImplementedResponse:
      type: object
      x-apideck-schema-id: NotImplemented
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
    PassThroughQuery:
      type: object
      additionalProperties: true
      properties:
        example_downstream_property:
          type: string
          description: All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)
    PaymentRequiredResponse:
      type: object
      x-apideck-schema-id: PaymentRequired
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
    PaymentUnit:
      type: string
      title: Payment Unit
      description: Unit of measurement for employee compensation.
      x-apideck-enum-id: payment_unit
      enum:
        - hour
        - week
        - month
        - year
        - paycheck
      example: year
    PhoneNumber:
      type: object
      x-apideck-schema-id: PhoneNumber
      required:
        - number
      additionalProperties: false
      x-apideck-weights:
        number: critical
        type: critical
        id: edge-case
        country_code: edge-case
        area_code: edge-case
        extension: edge-case
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        country_code:
          title: Country code
          type: string
          example: '1'
          nullable: true
        area_code:
          title: Area code
          type: string
          example: '323'
          nullable: true
        number:
          type: string
          title: Phone number
          example: 111-111-1111
          minLength: 1
        extension:
          type: string
          title: Phone extension
          example: '105'
          nullable: true
        type:
          type: string
          x-apideck-enum-id: phone_numbers.type
          enum:
            - primary
            - secondary
            - home
            - work
            - office
            - mobile
            - assistant
            - fax
            - direct-dial-in
            - personal
            - other
          example: primary
    PhotoUrl:
      type: string
      title: Photo URL
      description: The URL of the photo of a person.
      example: https://unavatar.io/elon-musk
      nullable: true
    RowVersion:
      type: string
      title: Row version
      description: A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
      example: 1-12345
      nullable: true
    SortDirection:
      type: string
      x-apideck-schema-id: SortDirection
      description: The direction in which to sort the results
      x-apideck-enum-id: sort_direction
      enum:
        - asc
        - desc
      default: asc
    Ticket:
      type: object
      x-apideck-schema-id: Ticket
      x-apideck-weights:
        id: critical
        type: medium
        status: critical
        subject: high
        description: high
        assignees: high
        collection_id: high
        updated_at: critical
        created_at: critical
        due_date: medium
        completed_at: medium
        tags: high
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        parent_id:
          type: string
          example: '12345'
          description: The ticket's parent ID
        collection_id:
          type: string
          example: '12345'
          description: The ticket's collection ID
          readOnly: true
        type:
          type: string
          title: Type
          example: Technical
          description: The ticket's type
        subject:
          type: string
          title: Subject
          example: Technical Support Request
          description: Subject of the ticket
        description:
          type: string
          title: Description
          example: I am facing issues with my internet connection
          description: The ticket's description. HTML version of description is mapped if supported by the third-party platform
        status:
          type: string
          example: open
          description: 'The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.'
          nullable: true
        priority:
          type: string
          example: high
          enum:
            - low
            - normal
            - high
            - urgent
          title: Priority
          description: Priority of the ticket
          x-apideck-enum-id: tickets.priority
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/Assignee'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        due_date:
          type: string
          title: Due date (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          description: Due date of the ticket
          nullable: true
        completed_at:
          type: string
          title: Completed at (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          description: When the ticket was completed
          readOnly: true
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/CollectionTag'
    TicketsSort:
      type: object
      x-apideck-schema-id: TicketsSort
      example:
        by: created_at
        direction: desc
      properties:
        by:
          type: string
          x-apideck-enum-id: Tickets.sort_by
          description: The field on which to sort the Tickets
          enum:
            - created_at
            - updated_at
          example: created_at
        direction:
          $ref: '#/components/schemas/SortDirection'
      additionalProperties: false
    Title:
      type: string
      title: Job title
      description: The job title of the person.
      example: CEO
      nullable: true
    TooManyRequestsResponse:
      type: object
      x-apideck-schema-id: TooManyRequests
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
        type_name:
          type: string
          description: The type of error returned
          example: ConnectorRateLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
        detail:
          type: object
          properties:
            context:
              type: string
            error:
              type: object
              additionalProperties: true
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
    UnauthorizedResponse:
      type: object
      x-apideck-schema-id: Unauthorized
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnexpectedErrorResponse:
      type: object
      x-apideck-schema-id: Error
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
    UnifiedId:
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
      required:
        - id
      properties:
        id:
          title: Id
          description: The unique identifier of the resource
          type: string
          readOnly: true
          example: '12345'
    UnprocessableResponse:
      type: object
      x-apideck-schema-id: Unprocessable
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Unprocessable request, please verify your request headers and body.
        ref:
          type: string
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
    UpdateCommentResponse:
      type: object
      x-apideck-schema-id: UpdateCommentResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: github
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    UpdatedAt:
      type: string
      title: Updated at (timestamp)
      description: The date and time when the object was last updated.
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
      nullable: true
    UpdatedBy:
      type: string
      title: Updated by
      description: The user who last updated the object.
      example: '12345'
      readOnly: true
      nullable: true
    UpdateTicketResponse:
      type: object
      x-apideck-schema-id: UpdateTicketResponse
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: github
        resource:
          type: string
          description: Unified API resource name
          example: Tickets
        operation:
          type: string
          description: Operation performed
          example: update
        data:
          $ref: '#/components/schemas/UnifiedId'
    Website:
      type: object
      x-apideck-schema-id: Website
      required:
        - url
      additionalProperties: false
      x-apideck-weights:
        url: critical
        type: critical
        id: edge-case
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        url:
          type: string
          example: http://example.com
          minLength: 1
        type:
          type: string
          x-apideck-enum-id: websites.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Tickets
    description: ''
    x-apideck-resource-id: collection-tickets
    x-apideck-model:
      $ref: '#/components/schemas/Ticket'
  - name: Collections
    description: ''
    x-apideck-resource-id: collections
    x-apideck-model:
      $ref: '#/components/schemas/Collection'
  - name: Users
    description: ''
    x-apideck-resource-id: collection-users
    x-apideck-model:
      $ref: '#/components/schemas/CollectionUser'
  - name: Comments
    description: ''
    x-apideck-resource-id: collection-ticket-comments
    x-apideck-model:
      $ref: '#/components/schemas/CollectionTicketComment'
  - name: Tags
    description: ''
    x-apideck-resource-id: collection-tags
    x-apideck-model:
      $ref: '#/components/schemas/CollectionTag'
paths:
  /issue-tracking/collections:
    get:
      tags:
        - Collections
      operationId: collectionsAll
      summary: List Collections
      description: List Collections
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/collectionsSort'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}:
    get:
      tags:
        - Collections
      operationId: collectionsOne
      summary: Get Collection
      description: Get Collection
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionsOne({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/tickets:
    get:
      tags:
        - Tickets
      operationId: collectionTicketsAll
      summary: List Tickets
      description: List Tickets
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketsSort'
        - $ref: '#/components/parameters/issuesFilter'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTicketsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionTicketsAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Tickets
      operationId: collectionTicketsAdd
      summary: Create Ticket
      description: Create Ticket
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/collectionId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
          $ref: '#/components/responses/CreateTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              collectionTicket: {
                parent_id: '12345',
                type: 'Technical',
                subject: 'Technical Support Request',
                description: 'I am facing issues with my internet connection',
                status: 'open',
                priority: 'high',
                assignees: [
                  {
                    id: '12345'
                  }
                ],
                due_date: '2020-09-30T07:43:32.000Z',
                tags: [
                  {
                    id: '12345'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/tickets/{ticket_id}:
    get:
      tags:
        - Tickets
      operationId: collectionTicketsOne
      summary: Get Ticket
      description: Get Ticket
      parameters:
        - $ref: '#/components/parameters/ticketId'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Tickets
      operationId: collectionTicketsUpdate
      summary: Update Ticket
      description: Update Ticket
      parameters:
        - $ref: '#/components/parameters/ticketId'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/collectionId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          $ref: '#/components/responses/UpdateTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example',
              collectionTicket: {
                parent_id: '12345',
                type: 'Technical',
                subject: 'Technical Support Request',
                description: 'I am facing issues with my internet connection',
                status: 'open',
                priority: 'high',
                assignees: [
                  {
                    id: '12345'
                  }
                ],
                due_date: '2020-09-30T07:43:32.000Z',
                tags: [
                  {
                    id: '12345'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Tickets
      operationId: collectionTicketsDelete
      summary: Delete Ticket
      description: Delete Ticket
      parameters:
        - $ref: '#/components/parameters/ticketId'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/collectionId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteTicketResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsDelete(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments:
    get:
      tags:
        - Comments
      operationId: collectionTicketCommentsAll
      summary: List Comments
      description: List Comments
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketId'
        - $ref: '#/components/parameters/commentsSort'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCommentsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsAll(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Comments
      operationId: collectionTicketCommentsAdd
      summary: Create Comment
      description: Create Comment
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionTicketComment'
      responses:
        '201':
          $ref: '#/components/responses/CreateCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example',
              collectionTicketComment: {
                body: 'What internet provider do you use?'
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}:
    get:
      tags:
        - Comments
      operationId: collectionTicketCommentsOne
      summary: Get Comment
      description: Get Comment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketId'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Comments
      operationId: collectionTicketCommentsUpdate
      summary: Update Comment
      description: Update Comment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionTicketComment'
      responses:
        '200':
          $ref: '#/components/responses/UpdateCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example',
              collectionTicketComment: {
                body: 'What internet provider do you use?'
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Comments
      operationId: collectionTicketCommentsDelete
      summary: Delete Comment
      description: Delete Comment
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/ticketId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsDelete(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/users:
    get:
      tags:
        - Users
      operationId: collectionUsersAll
      summary: List Users
      description: List Users
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionUsersAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/users/{id}:
    get:
      tags:
        - Users
      operationId: collectionUsersOne
      summary: Get user
      description: Get user
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              id: 'id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionUsersOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /issue-tracking/collections/{collection_id}/tags:
    get:
      tags:
        - Tags
      operationId: collectionTagsAll
      summary: List Tags
      description: List Tags
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/fields'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetCollectionTagsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: issueTracking
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionTagsAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  x-sdk-exclude: true
  x-apideck-resources:
    collection-ticket: ticket
  TicketCreated:
    post:
      summary: Ticket Created
      operationId: ticketCreated
      x-apideck-event-type: issue-tracking.ticket.created
      security: []
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/IssueTrackingEventType'
          example: issue-tracking.ticket.created
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/IssueTrackingWebhookEvent'
            example:
              payload:
                event_type: issue-tracking.ticket.created
                unified_api: issue-tracking
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
                entity_type: ticket
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      description: Event broadcast when a ticket has been created.
  TicketUpdated:
    post:
      summary: Ticket Updated
      operationId: ticketUpdated
      x-apideck-event-type: issue-tracking.ticket.updated
      security: []
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/IssueTrackingEventType'
          example: issue-tracking.ticket.updated
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/IssueTrackingWebhookEvent'
            example:
              payload:
                event_type: issue-tracking.ticket.updated
                unified_api: issue-tracking
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
                entity_type: ticket
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      description: Event broadcast when a ticket has been updated.
  TicketDeleted:
    post:
      summary: Ticket Deleted
      operationId: ticketDeleted
      x-apideck-event-type: issue-tracking.ticket.deleted
      security: []
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/IssueTrackingEventType'
          example: issue-tracking.ticket.deleted
        - name: x-apideck-idempotency-key
          in: header
          required: true
          description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          schema:
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/IssueTrackingWebhookEvent'
            example:
              payload:
                event_type: issue-tracking.ticket.deleted
                unified_api: issue-tracking
                consumer_id: test_user_id
                event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
                entity_id: 123456ASDF
                entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
                entity_type: ticket
                occurred_at: '2020-01-01T00:00:00.000Z'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully.
      description: Event broadcast when a ticket has been deleted.
