openapi: 3.0.0
info:
  version: 0.0.1
  title: Lead API
  description: "## Welcome to the LEAD API.\n\nYou can use this API to access all LEAD endpoints.\n\nIf you are working with APIs, you are probably already familiar with Postman, a development tool that enables you to configure and run API requests. Click the button below to run the collection.\n\n[![Run our LEAD API in Postman](https://app.apideck.com/images/postman-button.svg)](https://app.getpostman.com/run-collection/467cc44559b7226ecb61)\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com/lead`\n\n## GraphQL\n\nUse the [GraphQL playground](https://unify.apideck.com/graphql) to test out the GraphQL API.\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Connectors\n\nSupported connectors and endpoints\n\n| Service ID                                                      | Status            | v*         | Custom fields | Webhooks  |\n| --------------------------------------------------------------- | ----------------- | ---------- | ------------- | --------- |\n| [ActiveCampaign](https://www.activecampaign.com/)               | &#9989;           | 3          | &#9989;       | &#128284; |\n| [Close](https://close.com)                                      | &#9989;           | 1.0.0      | &#9989;       | &#9989;   |\n| [Copper](https://www.copper.com/)                               | &#9989;           | 1.0.0      | &#128284;     | &#128284; |\n| [Freshsales](https://www.freshworks.com/freshsales-crm/)        | &#9989;           | 0.1.0      | &#9989;       | &#9989;   |\n| [HubSpot](https://www.hubspot.com/)                             | &#9989;           | 1.0.0      | &#128284;     | &#128284; |\n| [Intercom](https://www.intercom.com/)                           | &#128736;&#65039; | 2          | &#128284;     | &#128284; |\n| [Microsoft Dynamics CRM](https://dynamics.microsoft.com/en-us/) | &#9989;           | 1          | &#128284;     | &#128284; |\n| [Pipedrive](https://www.pipedrive.com/)                         | &#9989;           | 1.0.0      | &#128284;     | &#128284; |\n| [Salesflare](https://salesflare.com)                            | &#9989;           | 1.0.0      | &#9989;       | &#9989;   |\n| [Salesforce](https://www.salesforce.com)                        | &#9989;           | v39.0      | &#9989;       | &#128284; |\n| [Slack](https://slack.com/)                                     | &#128736;&#65039; | v2.0       | &#128284;     | &#128284; |\n| [Teamleader](https://www.teamleader.eu/)                        | &#9989;           | 2019-01-24 | &#128284;     | &#128284; |\n| [Zendesk Sell](https://www.zendesk.com/sell/)                   | &#9989;           | 2.0        | &#9989;       | &#128284; |\n| [Zoho CRM](https://www.zoho.com/crm/)                           | &#9989;           | 2.0        | &#9989;       | &#128284; |\n\n| &#9989; <span style=\"font-size:0.75em\">Available for implementation</span> | - <span style=\"font-size:0.75em\">Not Supported</span>        | &#128736;&#65039; <span style=\"font-size:0.75em\">In Development</span> |\n| -------------------------------------------------------------------------- | ------------------------------------------------------------ | ---------------------------------------------------------------------- |\n| * <span style=\"font-size:0.75em\">Latest supported API version</span>       | &#128284; <span style=\"font-size:0.75em\">Coming Soon!</span> |                                                                        |\n\n## SDKs and API Clients\n\nUpcoming. [Request the SDK of your choice](https://integrations.apideck.com/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### MissingParamsError\n\nRequest is missing parameters from either path of body. Missing required params are described in the error detail of response.\n\n#### MissingHeadersError\n\nRequest was made missing one of the required headers. Missing headers are described in the error detail of response. Check the documentation for the request you are making. One or more of the following will be required: `x-apideck-app-id`, `x-apideck-consumer-id`, `x-apideck-service-id`\n\n#### SpecRequestValidationError\n\nInput variables are not aligned with the open-api spec. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the the specification.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### CredentialsNotFoundError\n\nWhen adding a connector integration that implement OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### RedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### InvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before user id redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### AuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n### Idempotence (upcoming)\n\nTo prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.\n\nUniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n"
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://www.apideck.com/logo.png'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://unify.apideck.com/lead'
components:
  parameters:
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    x-apideck-consumer-id:
      name: x-apideck-consumer-id
      in: header
      description: ID of the consumer which you want to get or push data from
      required: true
      schema:
        type: string
    x-apideck-app-id:
      name: x-apideck-app-id
      in: header
      description: The ID of your Unify application
      required: true
      schema:
        type: string
    x-apideck-service-id:
      name: x-apideck-service-id
      in: header
      description: 'Provide the service id you want to call (e.g., pipedrive). See the full list in the connector section. Only needed when a consumer has activated multiple integrations for a Unified API.'
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number to start from. Omitting the page parameter will return page 1
      schema:
        type: integer
        default: 1
    per_page:
      name: per_page
      in: query
      description: Number of records to return per page. Default = 100.
      schema:
        type: integer
        default: 100
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: true
  responses:
    Deleted:
      description: Resource deleted
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 404
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Not Found
              typeName:
                type: string
                description: The type of error returned
                example: EntityNotFoundError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Unknown Widget
              detail:
                type: string
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: 'Could not find widget with id: ''123'''
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#entitynotfounderror'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 401
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unauthorized
              typeName:
                type: string
                description: The type of error returned
                example: UnauthorizedError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Unauthorized Request
              detail:
                oneOf:
                  - type: string
                  - type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: Failed to generate valid JWT Session. Verify applicationId is correct
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#unauthorizederror'
    Unprocessable:
      description: Unprocessable
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 422
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unprocessable Entity
              typeName:
                type: string
                description: The type of error returned
                example: InvalidStateError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Invalid State
              detail:
                type: string
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: State did not include unified_api
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#invalidstateerror'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 400
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Bad Request
              typeName:
                type: string
                description: The type of error returned
                example: MissingHeadersError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Invalid Params
              detail:
                oneOf:
                  - type: string
                  - type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
                example:
                  missing:
                    - - foobar: required
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#missingheaderserror'
    PaymentRequired:
      description: Payment Required
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 402
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Payment Required
              typeName:
                type: string
                description: The type of error returned
                example: RequestLimitError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Request Limit Reached
              detail:
                type: string
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: You have reached your limit of 2000
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#requestlimiterror'
    NotImplemented:
      description: Not Implemented
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 501
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Not Implemented
              typeName:
                type: string
                description: The type of error returned
                example: MappingError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Unmapped Attribute
              detail:
                oneOf:
                  - type: string
                  - type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#mappingerror'
  schemas:
    Error:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        typeName:
          type: string
          description: The type of error returned
          example: MissingHeadersError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          oneOf:
            - type: string
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: 'Missing Header: x-apideck-consumer-id'
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    leadsAdd:
      required:
        - name
        - company_name
      x-pii:
        - name
        - first_name
        - last_name
        - email
        - phone_number
      properties:
        name:
          type: string
          example: Elon Musk
        first_name:
          type: string
          example: Elon
        last_name:
          type: string
          example: Musk
        prefix:
          type: string
          example: Duke
        email:
          type: string
          example: elon@spacex.com
        title:
          type: string
          example: CEO
        phone_number:
          type: string
          example: +444 111 222 333
          nullable: true
        website:
          type: string
          example: 'https://www.spacex.com'
        company_name:
          type: string
          example: SpaceX
        status:
          type: string
          example: open
        lead_source:
          type: string
          example: website
        note:
          type: string
          example: Eager to buy more rockets.
        address:
          type: object
          properties:
            line1:
              type: string
              example: Main street
              description: 'Line 1 of the address e.g. number, street, suite, apt #, etc.'
            city:
              type: string
              example: San Francisco
              description: Name of city.
            line2:
              type: string
              example: Bus 100
              description: 'Line 2 of the address e.g. number, street, suite, apt #, etc.'
            state:
              type: string
              example: CA
              description: Name of state
            postal_code:
              type: string
              example: '94104'
              description: Zip code or equivalent.
            country:
              type: string
              example: US
              description: country code according to ISO 3166-1 alpha-2.
        custom_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: custom_technologies
              value:
                type: string
                example: Uses Salesforce and Marketo
        tags:
          type: array
          example:
            - new
            - hot
          items:
            type: string
    leadsUpdate:
      required:
        - name
        - company_name
      x-pii:
        - name
        - email
        - phone_number
      properties:
        name:
          type: string
          example: Elon Musk
        prefix:
          type: string
          example: Duke
        email:
          type: string
          example: elon@spacex.com
        title:
          type: string
          example: CEO
        phone_number:
          type: string
          example: +444 111 222 333
          nullable: true
        website:
          type: string
          example: 'https://www.spacex.com'
        company_name:
          type: string
          example: SpaceX
        status:
          type: string
          example: open
        lead_source:
          type: string
          example: website
        note:
          type: string
          example: Eager to buy more rockets.
        address:
          type: object
          properties:
            line1:
              type: string
              example: Main street
              description: 'Line 1 of the address e.g. number, street, suite, apt #, etc.'
            city:
              type: string
              example: San Francisco
              description: Name of city.
            line2:
              type: string
              example: Bus 100
              description: 'Line 2 of the address e.g. number, street, suite, apt #, etc.'
            state:
              type: string
              example: CA
              description: Name of state
            postal_code:
              type: string
              example: '94104'
              description: Zip code or equivalent.
            country:
              type: string
              example: US
              description: country code according to ISO 3166-1 alpha-2.
        custom_fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: custom_technologies
              value:
                type: string
                example: Uses Salesforce and Marketo
        tags:
          type: array
          example:
            - new
            - hot
          items:
            type: string
    lead:
      properties:
        id:
          type: string
    leadsAddResponse:
      properties:
        id:
          type: string
    leadsUpdateResponse:
      $ref: '#/components/schemas/lead'
    leads:
      type: array
      description: ''
      minItems: 0
      items:
        $ref: '#/components/schemas/lead'
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code. Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub. See API Access Key Security for more information.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Leads
    description: ''
paths:
  /leads:
    get:
      tags:
        - Leads
      operationId: leadsAll
      summary: List leads
      description: List leads
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      security:
        - apiKey: []
      responses:
        '200':
          description: lead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leads'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Leads
      operationId: leadsAdd
      summary: Create lead
      description: Create lead
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/leadsAdd'
      responses:
        '201':
          description: Leads created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leadsAddResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/leads/{id}':
    get:
      tags:
        - Leads
      operationId: leadsOne
      summary: Get lead
      description: Get lead
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/id'
      security:
        - apiKey: []
      responses:
        '200':
          description: lead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Leads
      operationId: leadsUpdate
      summary: Update lead
      description: Update lead
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/id'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/leadsUpdate'
      responses:
        '200':
          description: Leads updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Leads
      operationId: leadsDelete
      summary: Delete lead
      description: Delete lead
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/id'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/Deleted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/Unprocessable'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
