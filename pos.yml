openapi: 3.0.0
info:
  version: 8.32.5
  title: POS API
  description: "Welcome to the POS API.\n\nYou can use this API to access all POS API endpoints.\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\n## GraphQL\n\nUse the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n| x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |\n| Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |\n\n## Authorization\n\nYou can interact with the API through the authorization methods below.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n## Pagination\n\nAll API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.\n\nTo fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.\n\nIn the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.\n\n### Query Parameters\n\n| Name   | Type   | Required | Description                                                                                                        |\n| ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |\n| cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |\n| limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |\n\n### Response Body\n\n| Name                  | Type   | Description                                                        |\n| --------------------- | ------ | ------------------------------------------------------------------ |\n| meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |\n| meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |\n| meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |\n| meta.items_on_page    | Number | Number of items returned in the data property of the response      |\n| links.previous        | String | Link to navigate to the previous page of results through the API   |\n| links.current         | String | Link to navigate to the current page of results through the API    |\n| links.next            | String | Link to navigate to the next page of results through the API       |\n\n⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.\n\n## SDKs and API Clients\n\nUpcoming. [Request the SDK of your choice](https://integrations.apideck.com/request).\n\n## Debugging\n\nBecause of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.\n\n## Errors\n\nThe API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.\n\n| Code | Title                | Description                                                                                                                                                                                              |\n| ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |\n| 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |\n| 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |\n| 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |\n| 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |\n| 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |\n| 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |\n| 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |\n| 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |\n| 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |\n| 429  | Too Many Requests    | You sent too many requests in a given amount of time (\"rate limit\"). Try again later                                                                                                                     |\n| 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |\n\n### Handling errors\n\nThe Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.\n\n### Error Types\n\n#### RequestValidationError\n\nRequest is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.\n\n#### UnsupportedFiltersError\n\nFilters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.\n\n#### UnsupportedSortFieldError\n\nSort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.\n\n#### InvalidCursorError\n\nPagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.\n\n#### ConnectorExecutionError\n\nA Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.\n\n#### UnauthorizedError\n\nWe were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`\n\n#### ConnectorCredentialsError\n\nA request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.\n\n#### ConnectorDisabledError\n\nA request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.\n\n#### ConnectorRateLimitError\n\nYou sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.\n\n#### RequestLimitError\n\nYou have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.\n\n#### EntityNotFoundError\n\nYou've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.\n\n#### OAuthCredentialsNotFoundError\n\nWhen adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.\n\n#### IntegrationNotFoundError\n\nThe requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.\n\n#### ConnectionNotFoundError\n\nA valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.\n\n#### ConnectionSettingsError\n\nThe connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.\n\n#### ConnectorNotFoundError\n\nA request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.\n\n#### OAuthRedirectUriError\n\nA request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.\n\n#### OAuthInvalidStateError\n\nThe state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.\n\n#### OAuthCodeExchangeError\n\nWhen attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.\n\n#### OAuthConnectorError\n\nIt seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### MappingError\n\nThere was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.\n\n#### ConnectorMappingNotFoundError\n\nIt seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorResponseMappingNotFoundError\n\nWe were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationMappingNotFoundError\n\nConnector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorWorkflowMappingError\n\nThe composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n#### ConnectorOperationUnsupportedError\n\nYou're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.\n\n#### PaginationNotSupportedError\n\nPagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.\n\n## API Design\n\n### API Styles and data formats\n\n#### REST API\n\nThe API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.\n\n##### Available HTTP methods\n\nThe Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \\_method.\n\n```\nPOST /messages\nGET /messages\nGET /messages/{messageId}\nPATCH /messages/{messageId}\nDELETE /messages/{messageId}\n```\n\nResponse bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.\n\n### Schema\n\nAll API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.\n\n### Meta\n\nMeta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.\n\n### Idempotence (upcoming)\n\nTo prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.\n\nUniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)\n\n### Request IDs\n\nEach API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.\n\n### Fixed field types\n\n#### Dates\n\nThe dates returned by the API are all represented in UTC (ISO8601 format).\n\nThis example\_`2019-11-14T00:55:31.820Z`\_is defined by the\_ISO 8601\_standard. The\_T\_in the middle separates the year-month-day portion from the hour-minute-second portion. The\_Z\_on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The\_Z\_is pronounced \"Zulu\" per military/aviation tradition.\n\nThe ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.\n\n#### Prices and Currencies\n\nAll prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).\n\nFor zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.\n\nAll currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).\n\n## Support\n\nIf you have problems or need help with your case, you can always reach out to our Support.\n\n"
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-apideck-api: pos
  x-apideck-sdk-support: true
externalDocs:
  description: Apideck Developer Docs
  url: 'https://developers.apideck.com'
servers:
  - url: 'https://unify.apideck.com'
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
    serviceId:
      name: x-apideck-service-id
      in: header
      description: 'Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.'
      schema:
        type: string
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: false
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    merchantId:
      in: path
      name: merchantId
      schema:
        type: string
      required: true
      description: ID of the merchant.
    locationId:
      in: query
      name: location_id
      schema:
        type: string
      required: false
      description: ID of the location.
    modifierGroupFilter:
      name: filter
      in: query
      description: Apply filters (beta)
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/ModifierGroupFilter'
    limit:
      name: limit
      in: query
      description: Number of records to return
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    NotImplementedResponse:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    TooManyRequestsResponse:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
    UnprocessableResponse:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
    CreateOrderResponse:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateOrderResponse'
    DeleteOrderResponse:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteOrderResponse'
    GetOrderResponse:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetOrderResponse'
    GetOrdersResponse:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetOrdersResponse'
    Order:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
    UpdateOrderResponse:
      description: Orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateOrderResponse'
    CreatePosPaymentResponse:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePosPaymentResponse'
    DeletePosPaymentResponse:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeletePosPaymentResponse'
    GetPosPaymentResponse:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPosPaymentResponse'
    GetPosPaymentsResponse:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPosPaymentsResponse'
    PosPayment:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PosPayment'
    UpdatePosPaymentResponse:
      description: PosPayments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePosPaymentResponse'
    CreateMerchantResponse:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMerchantResponse'
    DeleteMerchantResponse:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteMerchantResponse'
    GetMerchantResponse:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetMerchantResponse'
    GetMerchantsResponse:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetMerchantsResponse'
    Merchant:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Merchant'
    UpdateMerchantResponse:
      description: Merchants
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateMerchantResponse'
    CreateLocationResponse:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLocationResponse'
    DeleteLocationResponse:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteLocationResponse'
    GetLocationResponse:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLocationResponse'
    GetLocationsResponse:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLocationsResponse'
    Location:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Location'
    UpdateLocationResponse:
      description: Locations
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateLocationResponse'
    CreateItemResponse:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateItemResponse'
    DeleteItemResponse:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteItemResponse'
    GetItemResponse:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetItemResponse'
    GetItemsResponse:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetItemsResponse'
    Item:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    UpdateItemResponse:
      description: Items
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateItemResponse'
    CreateModifierResponse:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateModifierResponse'
    DeleteModifierResponse:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteModifierResponse'
    GetModifierResponse:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetModifierResponse'
    GetModifiersResponse:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetModifiersResponse'
    Modifier:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Modifier'
    UpdateModifierResponse:
      description: Modifiers
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateModifierResponse'
    CreateModifierGroupResponse:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateModifierGroupResponse'
    DeleteModifierGroupResponse:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteModifierGroupResponse'
    GetModifierGroupResponse:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetModifierGroupResponse'
    GetModifierGroupsResponse:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetModifierGroupsResponse'
    ModifierGroup:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModifierGroup'
    UpdateModifierGroupResponse:
      description: ModifierGroups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateModifierGroupResponse'
    CreateOrderTypeResponse:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateOrderTypeResponse'
    DeleteOrderTypeResponse:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteOrderTypeResponse'
    GetOrderTypeResponse:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetOrderTypeResponse'
    GetOrderTypesResponse:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetOrderTypesResponse'
    OrderType:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderType'
    UpdateOrderTypeResponse:
      description: OrderTypes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateOrderTypeResponse'
    CreateTenderResponse:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTenderResponse'
    DeleteTenderResponse:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteTenderResponse'
    GetTenderResponse:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTenderResponse'
    GetTendersResponse:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetTendersResponse'
    Tender:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tender'
    UpdateTenderResponse:
      description: Tenders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTenderResponse'
  schemas:
    Id:
      type: string
      example: '12345'
      readOnly: true
    Sequence:
      type: number
      title: Sequence
      example: 1
      nullable: true
    Active:
      type: boolean
      title: Is active
      example: true
      nullable: true
    Address:
      type: object
      additionalProperties: false
      x-apideck-weights:
        id: edge-case
        name: edge-case
        type: critical
        line1: high
        line2: low
        line3: edge-case
        line4: edge-case
        street_number: low
        city: high
        string: low
        state: high
        postal_code: high
        country: high
        latitude: low
        longitude: low
        county: edge-case
        contact_name: edge-case
        salutation: edge-case
        phone_number: edge-case
        fax: edge-case
        email: edge-case
        website: edge-case
        row_version: edge-case
      properties:
        id:
          type: string
          example: '123'
          nullable: true
        type:
          type: string
          x-graphql-type-name: AddressType
          x-apideck-enum-id: addresses.type
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
        string:
          type: string
          title: The address string. Some APIs don't provide structured address data.
          example: '25 Spring Street, Blackburn, VIC 3130'
          nullable: true
        name:
          type: string
          example: HQ US
          nullable: true
        line1:
          type: string
          example: Main street
          description: 'Line 1 of the address e.g. number, street, suite, apt #, etc.'
          nullable: true
        line2:
          type: string
          example: 'apt #'
          description: Line 2 of the address
          nullable: true
        line3:
          type: string
          example: 'Suite #'
          description: Line 3 of the address
          nullable: true
        line4:
          type: string
          example: delivery instructions
          description: Line 4 of the address
          nullable: true
        street_number:
          type: string
          example: '25'
          description: Street number
          nullable: true
        city:
          type: string
          example: San Francisco
          description: Name of city.
          nullable: true
        state:
          type: string
          example: CA
          description: Name of state
          nullable: true
        postal_code:
          type: string
          example: '94104'
          description: Zip code or equivalent.
          nullable: true
        country:
          type: string
          example: US
          description: country code according to ISO 3166-1 alpha-2.
          nullable: true
        latitude:
          type: string
          example: '40.759211'
          nullable: true
        longitude:
          type: string
          example: '-73.984638'
          nullable: true
        county:
          type: string
          example: Santa Clara
          description: 'Address field that holds a sublocality, such as a county'
          nullable: true
        contact_name:
          type: string
          example: Elon Musk
          nullable: true
        salutation:
          type: string
          example: Mr
          nullable: true
        phone_number:
          type: string
          example: 111-111-1111
          nullable: true
        fax:
          type: string
          example: 122-111-1111
          nullable: true
        email:
          type: string
          example: elon@musk.com
          nullable: true
        website:
          type: string
          example: 'https://elonmusk.com'
          nullable: true
        row_version:
          $ref: '#/components/schemas/RowVersion'
    BadRequestResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestvalidationerror'
    TooManyRequestsResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
        type_name:
          type: string
          description: The type of error returned
          example: ConnectorRateLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
        detail:
          type: object
          properties:
            context:
              type: string
            error:
              type: object
              additionalProperties: true
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#connectorratelimiterror'
    CreateOrderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Orders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CustomField:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          title: ID
          type: string
          example: '2389328923893298'
        name:
          title: Name
          type: string
          description: Name of the custom field.
          example: employee_level
        description:
          title: Description
          type: string
          description: More information about the custom field
          example: Employee Level
        value:
          anyOf:
            - type: string
              example: Uses Salesforce and Marketo
              nullable: true
            - type: number
              example: 10
              nullable: true
            - type: boolean
              example: true
              nullable: true
            - type: array
              items:
                type: string
    DeleteOrderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Orders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    Email:
      required:
        - email
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: '123'
        email:
          type: string
          format: email
          example: elon@musk.com
          minLength: 1
        type:
          type: string
          x-graphql-type-name: EmailType
          x-apideck-enum-id: emails.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
    PaymentCard:
      type: object
      description: A card's non-confidential details.
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        bin:
          type: string
          description: 'The first six digits of the card number, known as the Bank Identification Number (BIN).'
          example: '41111'
          nullable: true
        card_brand:
          type: string
          x-apideck-enum-id: payment-cards.card_brand
          enum:
            - visa
            - mastercard
            - amex
            - discover
            - discover-diners
            - jcb
            - china-unionpay
            - square-gift-card
            - square-capital-card
            - interac
            - eftpos
            - felica
            - ebt
            - other
          description: 'The first six digits of the card number, known as the Bank Identification Number (BIN).'
          nullable: true
        card_type:
          type: string
          x-apideck-enum-id: payment-cards.card_type
          enum:
            - credit
            - debit
            - prepaid
            - other
          example: credit
          nullable: true
        prepaid_type:
          type: string
          x-apideck-enum-id: payment-cards.prepaid_type
          enum:
            - non-prepaid
            - prepaid
            - unknown
          example: prepaid
          nullable: true
        cardholder_name:
          type: string
          example: John Doe
          nullable: true
        customer_id:
          type: string
          example: '12345'
          nullable: true
        merchant_id:
          type: string
          example: '12345'
        exp_month:
          type: integer
          description: The expiration month of the associated card as an integer between 1 and 12.
          example: 1
          nullable: true
          minimum: 1
          maximum: 12
        exp_year:
          type: integer
          description: The four-digit year of the card's expiration date.
          example: 2022
          nullable: true
        fingerprint:
          type: string
          example: ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.'
          nullable: true
        last_4:
          type: string
          example: The last 4 digits of the card number.
          nullable: true
        enabled:
          type: boolean
          description: Indicates whether or not a card can be used for payments.
          example: true
          nullable: true
        billing_address:
          $ref: '#/components/schemas/Address'
        reference_id:
          type: string
          title: Reference ID
          description: 'An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.'
          example: card-001
          nullable: true
        version:
          $ref: '#/components/schemas/Version'
      nullable: true
    GetOrderResponse:
      x-graphql-type-name: Order
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Orders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Order'
    GetOrdersResponse:
      x-graphql-type-name: OrderList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Orders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Links:
      type: object
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: 'https://unify.apideck.com/crm/companies'
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
          nullable: true
    Meta:
      type: object
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    NotFoundResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#entitynotfounderror'
    NotImplementedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#mappingerror'
    Order:
      type: object
      additionalProperties: false
      required:
        - location_id
        - merchant_id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        order_number:
          type: string
          example: 1F
        order_date:
          type: string
          example: '2022-08-12'
          format: date
          nullable: true
        closed_date:
          type: string
          example: '2022-08-13'
          format: date
          nullable: true
        reference_id:
          type: string
          title: Reference ID
          description: 'An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.'
          example: my-order-001
          nullable: true
        status:
          title: Status
          type: string
          x-apideck-enum-id: orders.status
          enum:
            - open
            - draft
            - delivered
            - delayed
            - voided
            - completed
            - hidden
          description: "Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()"
          example: open
        payment_status:
          title: PosPayment status
          description: Is this order paid or not?
          type: string
          x-apideck-enum-id: orders.payment_status
          enum:
            - open
            - paid
            - refunded
            - credited
            - partially_paid
            - partially_refunded
            - unknown
          example: open
        currency:
          $ref: '#/components/schemas/Currency'
        title:
          title: Title
          type: string
        note:
          title: Note
          type: string
          description: 'A note with information about this order, may be printed on the order receipt and displayed in apps'
        merchant_id:
          type: string
          example: '12345'
        customer_id:
          type: string
          example: '12345'
        employee_id:
          type: string
          example: '12345'
        location_id:
          type: string
          example: '12345'
        order_type_id:
          type: string
          example: '12345'
        table:
          type: string
          example: 1F
        seat:
          type: string
          example: 23F
        total_amount:
          type: number
          title: Total amount (in cents)
          example: 27.5
          nullable: true
        total_tip:
          type: number
          title: Total tax (in cents)
          example: 7
          nullable: true
        total_tax:
          type: number
          title: Total tax (in cents)
          example: 2.75
          nullable: true
        total_discount:
          type: number
          title: Total discount (in cents)
          example: 3
          nullable: true
        total_refund:
          type: number
          title: Total refund (in cents)
          example: 0
          nullable: true
        total_service_charge:
          type: number
          title: Total service charge (in cents)
          example: 0
          nullable: true
        refunded:
          type: boolean
          example: false
        customers:
          type: array
          items:
            type: object
            properties:
              first_name:
                type: string
                example: Elon
                nullable: true
              middle_name:
                type: string
                example: D.
                nullable: true
              last_name:
                type: string
                example: Musk
                nullable: true
              phone_numbers:
                type: array
                items:
                  $ref: '#/components/schemas/PhoneNumber'
              emails:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
        fulfillments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: '12345'
              status:
                type: string
                title: Fulfillment status
                description: The state of the fulfillment.
                x-apideck-enum-id: orders.fulfillments.status
                enum:
                  - proposed
                  - reserved
                  - prepared
                  - completed
                  - cancelled
                  - failed
                  - other
              type:
                type: string
                x-apideck-enum-id: orders.fulfillments.type
                enum:
                  - pickup
                  - shipment
                example: shipment
              pickup_details:
                type: object
                properties:
                  accepted_at:
                    type: string
                    title: Accepted at (timestamp)
                    format: date-time
                    example: '2020-09-30T07:43:32.000Z'
                    readOnly: true
                    nullable: true
                  auto_complete_duration:
                    type: string
                    description: "The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D')."
                    example: P1W3D
                    nullable: true
                  cancel_reason:
                    type: string
                    description: A description of why the pickup was canceled.
                    example: Not hungry
                    nullable: true
                  expires_at:
                    type: string
                    description: |-
                      Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
                      If `expires_at` is not set, this pickup fulfillment is automatically accepted when 
                      placed.
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  schedule_type:
                    type: string
                    x-apideck-enum-id: orders.pickup_details.schedule_type
                    enum:
                      - scheduled
                    description: The schedule type of the pickup fulfillment.
                  pickup_at:
                    type: string
                    description: |-
                      The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g., 
                      "2016-09-04T23:59:33.123Z".

                      For fulfillments with the schedule type `ASAP`, this is automatically set
                      to the current time plus the expected duration to prepare the fulfillment.
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  pickup_window_duration:
                    type: string
                    description: |-
                      The window of time in which the order should be picked up after the `pickup_at` timestamp.
                      Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
                      informational guideline for merchants.
                    example: P1W3D
                  prep_time_duration:
                    type: string
                    description: |-
                      The duration of time it takes to prepare this fulfillment.
                      The duration must be in RFC 3339 format (for example, "P1W3D").
                    example: P1W3D
                  note:
                    type: string
                    description: |-
                      A note meant to provide additional instructions about the pickup
                      fulfillment displayed in the Square Point of Sale application and set by the API.
                    example: Pickup in the back.
                  placed_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  rejected_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  ready_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  expired_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  picked_up_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  canceled_at:
                    type: string
                    description: |-
                      Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
                      (for example, "2016-09-04T23:59:33.123Z").
                    format: date-time
                    example: '2016-09-04T23:59:33.123Z'
                  is_curbside_pickup:
                    type: boolean
                    description: 'If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.'
                  curbside_pickup_details:
                    type: object
                    description: Specific details for curbside pickup.
                    properties:
                      curbside_details:
                        maxLength: 250
                        type: string
                        description: 'Specific details for curbside pickup, such as parking number and vehicle model.'
                      buyer_arrived_at:
                        type: string
                        description: |-
                          Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
                          (for example, "2016-09-04T23:59:33.123Z").
                        format: date-time
                        example: '2016-09-04T23:59:33.123Z'
                  recipient:
                    type: object
                    properties:
                      customer_id:
                        type: string
                        example: '12345'
                      address:
                        $ref: '#/components/schemas/Address'
                      phone_number:
                        $ref: '#/components/schemas/PhoneNumber'
                      email:
                        $ref: '#/components/schemas/Email'
              shipment_details:
                type: object
                properties: {}
        line_items:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              name:
                type: string
                example: New York Strip Steak
              item:
                properties:
                  id:
                    $ref: '#/components/schemas/Id'
              total_tax:
                type: number
                title: Tax amount (in cents)
                example: 2000
                nullable: true
              total_discount:
                type: number
                title: Total discount amount (in cents)
                example: 3000
                nullable: true
              total_amount:
                type: number
                title: Total amount (in cents)
                example: 27500
                nullable: true
              quantity:
                $ref: '#/components/schemas/Quantity'
              unit_price:
                $ref: '#/components/schemas/UnitPrice'
              applied_taxes:
                type: array
                items:
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    tax_id:
                      type: string
                      example: sales-tax
                    amount:
                      title: Amount (in cents)
                      type: number
                      example: 27500
                    currency:
                      $ref: '#/components/schemas/Currency'
              applied_discounts:
                type: array
                items:
                  properties:
                    id:
                      $ref: '#/components/schemas/Id'
                    discount_id:
                      type: string
                      example: '12345'
                    amount:
                      title: Amount (in cents)
                      type: number
                      example: 27500
                    currency:
                      $ref: '#/components/schemas/Currency'
              modifiers:
                type: array
                description: 'Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts'
                items:
                  properties:
                    name:
                      type: string
                      example: New York Strip Steak - no cheese
                    amount:
                      title: Amount (in cents)
                      type: number
                      example: 27500
                    currency:
                      $ref: '#/components/schemas/Currency'
        payments:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              amount:
                title: Amount (in cents)
                type: number
                example: 27500
              currency:
                $ref: '#/components/schemas/Currency'
        service_charges:
          $ref: '#/components/schemas/ServiceCharges'
        refunds:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              location_id:
                $ref: '#/components/schemas/Id'
              amount:
                title: Amount (in cents)
                type: number
                example: 27500
              currency:
                $ref: '#/components/schemas/Currency'
              reason:
                type: string
                example: The reason for the refund being issued.
              status:
                type: string
                x-apideck-enum-id: orders.refunds.status
                enum:
                  - pending
                  - approved
                  - rejected
                  - failed
              tender_id:
                $ref: '#/components/schemas/Id'
              transaction_id:
                $ref: '#/components/schemas/Id'
        taxes:
          type: array
          items:
            properties:
              id:
                type: string
                example: state-sales-tax
              name:
                type: string
                description: The tax's name.
                example: State Sales Tax
              amount:
                title: Amount (in cents)
                type: number
                example: 27500
              currency:
                $ref: '#/components/schemas/Currency'
              percentage:
                $ref: '#/components/schemas/Percentage'
              scope:
                type: string
                x-apideck-enum-id: orders.taxes.scope
                enum:
                  - order
                  - line_item
              type:
                type: string
                x-apideck-enum-id: orders.taxes.type
                enum:
                  - unknown
                  - additive
                  - inclusive
              auto_applied:
                type: boolean
                description: 'Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()'
                example: true
        discounts:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              product_id:
                $ref: '#/components/schemas/Id'
              name:
                type: string
                example: 10% off
              type:
                type: string
                x-apideck-enum-id: orders.discounts.type
                enum:
                  - fixed_percentage
                example: fixed_percentage
              amount:
                title: Amount (in cents)
                type: number
                example: 27500
              currency:
                $ref: '#/components/schemas/Currency'
              scope:
                type: string
                x-apideck-enum-id: orders.discounts.scope
                enum:
                  - order
                  - line_item
                example: order
        tenders:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/Id'
              name:
                type: string
                example: 10% off
              type:
                type: string
                x-apideck-enum-id: orders.tenders.type
                enum:
                  - cash
                  - card
                  - other
                example: cash
              note:
                title: Note
                type: string
                example: An optional note associated with the tender at the time of payment.
              amount:
                title: Amount
                type: number
                example: 27500
              currency:
                $ref: '#/components/schemas/Currency'
              total_amount:
                type: number
                title: Total amount (in cents)
                example: 27.5
                nullable: true
              total_tip:
                type: number
                title: Total tax (in cents)
                example: 7
                nullable: true
              total_processing_fee:
                type: number
                title: Total processing fee (in cents)
                example: 0
                nullable: true
              total_tax:
                type: number
                title: Total tax (in cents)
                example: 2.75
                nullable: true
              total_discount:
                type: number
                title: Total discount (in cents)
                example: 3
                nullable: true
              total_refund:
                type: number
                title: Total refund (in cents)
                example: 0
                nullable: true
              total_service_charge:
                type: number
                title: Total service charge (in cents)
                example: 0
                nullable: true
              buyer_tendered_cash_amount:
                type: number
                description: The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
                example: 27500
                nullable: true
              change_back_cash_amount:
                type: number
                description: The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
                example: 27500
                nullable: true
              card:
                $ref: '#/components/schemas/PaymentCard'
              card_status:
                type: string
                description: The status of the card. Only applicable when the tender type is card.
                x-apideck-enum-id: orders.tenders.card_status
                enum:
                  - authorized
                  - captured
                  - failed
                  - voided
                example: authorized
                nullable: true
              card_entry_method:
                type: string
                description: The entry method of the card. Only applicable when the tender type is card.
                x-apideck-enum-id: orders.tenders.card_entry_method
                enum:
                  - evm
                  - swiped
                  - keyed
                  - on-file
                  - contactless
                example: swiped
                nullable: true
              payment_id:
                $ref: '#/components/schemas/Id'
              location_id:
                $ref: '#/components/schemas/Id'
              transaction_id:
                $ref: '#/components/schemas/Id'
        source:
          type: string
          description: Source of order. Indicates the way that the order was placed.
          x-apideck-enum-id: orders.source
          enum:
            - in-store
            - online
            - opt
            - api
            - kiosk
            - caller-id
            - google
            - invoice
          example: api
          readOnly: true
          nullable: true
        voided:
          type: boolean
          example: false
        voided_at:
          type: string
          title: Updated at (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
        version:
          $ref: '#/components/schemas/Version'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    Version:
      type: string
      title: Version
      example: '230320320320'
      nullable: true
    UpdatedBy:
      type: string
      example: '12345'
      readOnly: true
      nullable: true
    UpdatedAt:
      type: string
      title: Updated at (timestamp)
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    CreatedAt:
      type: string
      title: Created at (timestamp)
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    CreatedBy:
      type: string
      title: Created by
      example: '12345'
      readOnly: true
      nullable: true
    Currency:
      type: string
      title: Currency
      description: 'Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).'
      example: USD
      x-apideck-enum-id: currencies
      x-apideck-enum-coverage-ignore: true
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
      x-enum-elements:
        - name: UNKNOWN_CURRENCY
          description: Unknown currency
        - name: AED
          description: United Arab Emirates dirham
        - name: AFN
          description: Afghan afghani
        - name: ALL
          description: Albanian lek
        - name: AMD
          description: Armenian dram
        - name: ANG
          description: Netherlands Antillean guilder
        - name: AOA
          description: Angolan kwanza
        - name: ARS
          description: Argentine peso
        - name: AUD
          description: Australian dollar
        - name: AWG
          description: Aruban florin
        - name: AZN
          description: Azerbaijani manat
        - name: BAM
          description: Bosnia and Herzegovina convertible mark
        - name: BBD
          description: Barbados dollar
        - name: BDT
          description: Bangladeshi taka
        - name: BGN
          description: Bulgarian lev
        - name: BHD
          description: Bahraini dinar
        - name: BIF
          description: Burundian franc
        - name: BMD
          description: Bermudian dollar
        - name: BND
          description: Brunei dollar
        - name: BOB
          description: Boliviano
        - name: BOV
          description: Bolivian Mvdol
        - name: BRL
          description: Brazilian real
        - name: BSD
          description: Bahamian dollar
        - name: BTN
          description: Bhutanese ngultrum
        - name: BWP
          description: Botswana pula
        - name: BYR
          description: Belarusian ruble
        - name: BZD
          description: Belize dollar
        - name: CAD
          description: Canadian dollar
        - name: CDF
          description: Congolese franc
        - name: CHE
          description: WIR Euro
        - name: CHF
          description: Swiss franc
        - name: CHW
          description: WIR Franc
        - name: CLF
          description: Unidad de Fomento
        - name: CLP
          description: Chilean peso
        - name: CNY
          description: Chinese yuan
        - name: COP
          description: Colombian peso
        - name: COU
          description: Unidad de Valor Real
        - name: CRC
          description: Costa Rican colon
        - name: CUC
          description: Cuban convertible peso
        - name: CUP
          description: Cuban peso
        - name: CVE
          description: Cape Verdean escudo
        - name: CZK
          description: Czech koruna
        - name: DJF
          description: Djiboutian franc
        - name: DKK
          description: Danish krone
        - name: DOP
          description: Dominican peso
        - name: DZD
          description: Algerian dinar
        - name: EGP
          description: Egyptian pound
        - name: ERN
          description: Eritrean nakfa
        - name: ETB
          description: Ethiopian birr
        - name: EUR
          description: Euro
        - name: FJD
          description: Fiji dollar
        - name: FKP
          description: Falkland Islands pound
        - name: GBP
          description: Pound sterling
        - name: GEL
          description: Georgian lari
        - name: GHS
          description: Ghanaian cedi
        - name: GIP
          description: Gibraltar pound
        - name: GMD
          description: Gambian dalasi
        - name: GNF
          description: Guinean franc
        - name: GTQ
          description: Guatemalan quetzal
        - name: GYD
          description: Guyanese dollar
        - name: HKD
          description: Hong Kong dollar
        - name: HNL
          description: Honduran lempira
        - name: HRK
          description: Croatian kuna
        - name: HTG
          description: Haitian gourde
        - name: HUF
          description: Hungarian forint
        - name: IDR
          description: Indonesian rupiah
        - name: ILS
          description: Israeli new shekel
        - name: INR
          description: Indian rupee
        - name: IQD
          description: Iraqi dinar
        - name: IRR
          description: Iranian rial
        - name: ISK
          description: Icelandic króna
        - name: JMD
          description: Jamaican dollar
        - name: JOD
          description: Jordanian dinar
        - name: JPY
          description: Japanese yen
        - name: KES
          description: Kenyan shilling
        - name: KGS
          description: Kyrgyzstani som
        - name: KHR
          description: Cambodian riel
        - name: KMF
          description: Comoro franc
        - name: KPW
          description: North Korean won
        - name: KRW
          description: South Korean won
        - name: KWD
          description: Kuwaiti dinar
        - name: KYD
          description: Cayman Islands dollar
        - name: KZT
          description: Kazakhstani tenge
        - name: LAK
          description: Lao kip
        - name: LBP
          description: Lebanese pound
        - name: LKR
          description: Sri Lankan rupee
        - name: LRD
          description: Liberian dollar
        - name: LSL
          description: Lesotho loti
        - name: LTL
          description: Lithuanian litas
        - name: LVL
          description: Latvian lats
        - name: LYD
          description: Libyan dinar
        - name: MAD
          description: Moroccan dirham
        - name: MDL
          description: Moldovan leu
        - name: MGA
          description: Malagasy ariary
        - name: MKD
          description: Macedonian denar
        - name: MMK
          description: Myanmar kyat
        - name: MNT
          description: Mongolian tögrög
        - name: MOP
          description: Macanese pataca
        - name: MRO
          description: Mauritanian ouguiya
        - name: MUR
          description: Mauritian rupee
        - name: MVR
          description: Maldivian rufiyaa
        - name: MWK
          description: Malawian kwacha
        - name: MXN
          description: Mexican peso
        - name: MXV
          description: Mexican Unidad de Inversion
        - name: MYR
          description: Malaysian ringgit
        - name: MZN
          description: Mozambican metical
        - name: NAD
          description: Namibian dollar
        - name: NGN
          description: Nigerian naira
        - name: NIO
          description: Nicaraguan córdoba
        - name: NOK
          description: Norwegian krone
        - name: NPR
          description: Nepalese rupee
        - name: NZD
          description: New Zealand dollar
        - name: OMR
          description: Omani rial
        - name: PAB
          description: Panamanian balboa
        - name: PEN
          description: Peruvian sol
        - name: PGK
          description: Papua New Guinean kina
        - name: PHP
          description: Philippine peso
        - name: PKR
          description: Pakistani rupee
        - name: PLN
          description: Polish złoty
        - name: PYG
          description: Paraguayan guaraní
        - name: QAR
          description: Qatari riyal
        - name: RON
          description: Romanian leu
        - name: RSD
          description: Serbian dinar
        - name: RUB
          description: Russian ruble
        - name: RWF
          description: Rwandan franc
        - name: SAR
          description: Saudi riyal
        - name: SBD
          description: Solomon Islands dollar
        - name: SCR
          description: Seychelles rupee
        - name: SDG
          description: Sudanese pound
        - name: SEK
          description: Swedish krona
        - name: SGD
          description: Singapore dollar
        - name: SHP
          description: Saint Helena pound
        - name: SLL
          description: Sierra Leonean leone
        - name: SOS
          description: Somali shilling
        - name: SRD
          description: Surinamese dollar
        - name: SSP
          description: South Sudanese pound
        - name: STD
          description: São Tomé and Príncipe dobra
        - name: SVC
          description: Salvadoran colón
        - name: SYP
          description: Syrian pound
        - name: SZL
          description: Swazi lilangeni
        - name: THB
          description: Thai baht
        - name: TJS
          description: Tajikstani somoni
        - name: TMT
          description: Turkmenistan manat
        - name: TND
          description: Tunisian dinar
        - name: TOP
          description: Tongan pa'anga
        - name: TRY
          description: Turkish lira
        - name: TTD
          description: Trinidad and Tobago dollar
        - name: TWD
          description: New Taiwan dollar
        - name: TZS
          description: Tanzanian shilling
        - name: UAH
          description: Ukrainian hryvnia
        - name: UGX
          description: Ugandan shilling
        - name: USD
          description: United States dollar
        - name: USN
          description: United States dollar (next day)
        - name: USS
          description: United States dollar (same day)
        - name: UYI
          description: Uruguay Peso en Unidedades Indexadas
        - name: UYU
          description: Uruguyan peso
        - name: UZS
          description: Uzbekistan som
        - name: VEF
          description: Venezuelan bolívar soberano
        - name: VND
          description: Vietnamese đồng
        - name: VUV
          description: Vanuatu vatu
        - name: WST
          description: Samoan tala
        - name: XAF
          description: CFA franc BEAC
        - name: XAG
          description: Silver
        - name: XAU
          description: Gold
        - name: XBA
          description: European Composite Unit
        - name: XBB
          description: European Monetary Unit
        - name: XBC
          description: European Unit of Account 9
        - name: XBD
          description: European Unit of Account 17
        - name: XCD
          description: East Caribbean dollar
        - name: XDR
          description: Special drawing rights (International Monetary Fund)
        - name: XOF
          description: CFA franc BCEAO
        - name: XPD
          description: Palladium
        - name: XPF
          description: CFP franc
        - name: XPT
          description: Platinum
        - name: XTS
          description: Code reserved for testing
        - name: XXX
          description: No currency
        - name: YER
          description: Yemeni rial
        - name: ZAR
          description: South African rand
        - name: ZMK
          description: Zambian kwacha
        - name: ZMW
          description: Zambian kwacha
        - name: BTC
          description: Bitcoin
      nullable: true
    Quantity:
      type: number
      title: Quantity
      example: 1
      nullable: true
    UnitPrice:
      type: number
      title: Unit price
      example: 27500.5
      nullable: true
    IdempotencyKey:
      maxLength: 45
      type: string
      description: A value you specify that uniquely identifies this request among requests you have sent.
      example: random_string
    Available:
      type: boolean
      title: Available
      example: true
      nullable: true
    Hidden:
      type: boolean
      title: Hidden
      example: true
      nullable: true
    Deleted:
      type: boolean
      title: Deleted
      example: true
      nullable: true
    Percentage:
      type: number
      title: Percentage
      example: 15
    PaymentRequiredResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestlimiterror'
    PhoneNumber:
      required:
        - number
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        country_code:
          title: Country code
          type: string
          example: '1'
          nullable: true
        area_code:
          title: Area code
          type: string
          example: '323'
          nullable: true
        number:
          type: string
          title: Phone number
          example: 111-111-1111
          minLength: 1
        extension:
          type: string
          title: Phone extension
          example: '105'
          nullable: true
        type:
          type: string
          x-graphql-type-name: PhoneType
          x-apideck-enum-id: phone_numbers.type
          enum:
            - primary
            - secondary
            - home
            - work
            - office
            - mobile
            - assistant
            - fax
            - direct-dial-in
            - personal
            - other
          example: primary
    RowVersion:
      type: string
      title: Row version
      example: 1-12345
      nullable: true
    SocialLink:
      required:
        - url
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        url:
          type: string
          example: 'https://www.twitter.com/apideck-io'
          minLength: 1
        type:
          type: string
          example: twitter
          nullable: true
    Tags:
      type: array
      items:
        type: string
      example:
        - New
    UnauthorizedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnexpectedErrorResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnifiedId:
      title: UnifiedId
      required:
        - id
      properties:
        id:
          type: string
          readOnly: true
          example: '12345'
    UnprocessableResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: State did not include unified_api
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#invalidstateerror'
    UpdateOrderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Orders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    PosWebhookEvent:
      x-sdk-exclude: true
      allOf:
        - type: object
          properties:
            event_id:
              type: string
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
            service_id:
              type: string
              description: Service provider identifier
              example: close
            entity_id:
              type: string
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
            entity_type:
              type: string
              description: The type entity that triggered this event
              example: Company
            entity_url:
              type: string
              description: The url to retrieve entity detail.
              example: 'https://unify.apideck.com/crm/contacts/123456'
            execution_attempt:
              type: number
              description: The current count this request event has been attempted
              example: 2
            occurred_at:
              type: string
              description: ISO Datetime for when the original event occurred
              example: '2021-10-01T03:14:55.419Z'
        - type: object
          properties:
            event_type:
              type: string
              enum:
                - pos.order.created
                - pos.order.updated
                - pos.order.deleted
                - pos.payment.created
                - pos.payment.updated
                - pos.payment.deleted
                - pos.merchant.created
                - pos.merchant.updated
                - pos.merchant.deleted
                - pos.location.created
                - pos.location.updated
                - pos.location.deleted
                - pos.item.created
                - pos.item.updated
                - pos.item.deleted
                - pos.modifier.created
                - pos.modifier.updated
                - pos.modifier.deleted
                - pos.modifier-group.created
                - pos.modifier-group.updated
                - pos.modifier-group.deleted
              example: pos.order.created
    Website:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          example: '12345'
          nullable: true
        url:
          type: string
          example: 'http://example.com'
          minLength: 1
        type:
          type: string
          x-graphql-type-name: WebsiteType
          x-apideck-enum-id: websites.type
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
    CreatePosPaymentResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: PosPayments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeletePosPaymentResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: PosPayments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetPosPaymentResponse:
      x-graphql-type-name: PosPayment
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: PosPayments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/PosPayment'
    GetPosPaymentsResponse:
      x-graphql-type-name: PosPaymentList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: PosPayments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/PosPayment'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    PosPayment:
      type: object
      additionalProperties: false
      required:
        - source_id
        - customer_id
        - amount
        - currency
        - order_id
        - tender_id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        source_id:
          type: string
          example: '12345'
        order_id:
          type: string
          example: '12345'
        merchant_id:
          type: string
          example: '12345'
        customer_id:
          type: string
          example: '12345'
        employee_id:
          type: string
          example: '12345'
        location_id:
          type: string
          example: '12345'
        device_id:
          type: string
          example: '12345'
        tender_id:
          type: string
          example: '12345'
        external_payment_id:
          type: string
          example: '12345'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
        amount:
          type: number
          title: Amount (in cents)
          example: 27.5
        currency:
          $ref: '#/components/schemas/Currency'
        tip:
          type: number
          title: Tip amount (in cents)
          example: 7
        tax:
          type: number
          title: Tax amount (in cents)
          example: 20
        total:
          type: number
          title: Total amount (in cents)
          example: 37.5
        app_fee:
          type: number
          title: App fee
          description: The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
          example: 3
        change_back_cash_amount:
          type: number
          title: Change back cash amount (in cents)
          example: 20
        approved:
          type: number
          title: Approved amount (in cents)
          description: The initial amount of money approved for this payment.
          example: 37.5
        refunded:
          type: number
          title: The total amount (in cents) of the payment refunded to date.
          description: The initial amount of money approved for this payment.
          example: 37.5
        processing_fees:
          type: array
          items:
            properties:
              amount:
                type: number
                title: Amount (in cents)
                example: 1.05
              effective_at:
                type: string
                title: Effective at (timestamp)
                format: date-time
                example: '2020-09-30T07:43:32.000Z'
              processing_type:
                type: string
                title: Type
                x-apideck-enum-id: pos-payments.processing_fees.processing_type
                enum:
                  - initial
                  - adjustment
          example:
            - amount: 1.05
              effective_at: '2020-09-30T07:43:32.000Z'
              processing_type: initial
        source:
          type: string
          description: Source of this payment.
          x-apideck-enum-id: pos-payments.source
          enum:
            - card
            - bank_account
            - wallet
            - bnpl
            - cash
            - external
            - other
          example: external
        status:
          type: string
          title: Status
          description: Status of this payment.
          x-graphql-type-name: PosPosPaymentStatus
          x-apideck-enum-id: pos-payments.status
          enum:
            - approved
            - pending
            - completed
            - canceled
            - failed
            - other
          example: approved
        cash:
          type: object
          title: Cash details
          description: Cash details for this payment
          properties:
            amount: {}
            charge_back_amount:
              description: 'The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.'
        card_details:
          type: object
          properties:
            card:
              $ref: '#/components/schemas/PaymentCard'
        bank_account:
          type: object
          title: Bank account
          description: Card details for this payment. This field is currently not available. Reach out to our team for more info.
          properties:
            bank_name:
              maxLength: 100
              type: string
              description: The name of the bank associated with the bank account.
            transfer_type:
              maxLength: 50
              type: string
              description: The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
            account_ownership_type:
              maxLength: 50
              type: string
              description: |-
                The ownership type of the bank account performing the transfer.
                The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
            fingerprint:
              maxLength: 255
              type: string
              description: |-
                Uniquely identifies the bank account for this seller and can be used
                to determine if payments are from the same bank account.
            country:
              type: string
              example: US
              description: country code according to ISO 3166-1 alpha-2.
              minLength: 2
              maxLength: 2
              nullable: true
            statement_description:
              maxLength: 1000
              type: string
              description: The statement description as sent to the bank.
            ach_details:
              type: object
              properties:
                routing_number:
                  maxLength: 50
                  type: string
                  description: The routing number for the bank account.
                account_number_suffix:
                  maxLength: 4
                  type: string
                  description: The last few digits of the bank account number.
                account_type:
                  maxLength: 50
                  type: string
                  description: |-
                    The type of the bank account performing the transfer. The account type can be `CHECKING`,
                    `SAVINGS`, or `UNKNOWN`.
              description: ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
        wallet:
          type: object
          title: Wallet details
          description: Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
          properties:
            status:
              maxLength: 50
              type: string
              description: 'The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.'
              x-apideck-enum-id: pos-payments.wallet.status
              enum:
                - authorized
                - captured
                - voided
                - failed
                - other
        external_details:
          type: object
          required:
            - type
            - source
          properties:
            type:
              maxLength: 50
              type: string
              description: |-
                The type of external payment the seller received. It can be one of the following:
                - CHECK - Paid using a physical check.
                - BANK_TRANSFER - Paid using external bank transfer.
                - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
                - CRYPTO - Paid using a crypto currency.
                - SQUARE_CASH - Paid using Square Cash App.
                - SOCIAL - Paid using peer-to-peer payment applications.
                - EXTERNAL - A third-party application gathered this payment outside of Square.
                - EMONEY - Paid using an E-money provider.
                - CARD - A credit or debit card that Square does not support.
                - STORED_BALANCE - Use for house accounts, store credit, and so forth.
                - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
                - OTHER - A type not listed here.
              x-apideck-enum-id: pos-payments.external_details.type
              enum:
                - check
                - bank_transfer
                - other_gift_card
                - crypto
                - square_cash
                - social
                - external
                - emoney
                - card
                - stored_balance
                - food_voucher
                - other
            source:
              maxLength: 255
              type: string
              description: |-
                A description of the external payment source. For example, 
                "Food Delivery Service".
            source_id:
              maxLength: 255
              type: string
              description: An ID to associate the payment to its originating source.
            source_fee_amount:
              type: number
              title: Source fee
              description: The fees paid to the source. The amount minus this field is the net amount seller receives.
              example: 2.5
          description: Details about an external payment.
        service_charges:
          $ref: '#/components/schemas/ServiceCharges'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdatePosPaymentResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: PosPayments
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateMerchantResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Merchants
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteMerchantResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Merchants
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetMerchantResponse:
      x-graphql-type-name: Merchant
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Merchants
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Merchant'
    GetMerchantsResponse:
      x-graphql-type-name: MerchantList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Merchants
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Merchant'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Merchant:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          title: name
          description: The name of the merchant
          example: Dunkin Donuts
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        owner_id:
          type: string
          title: Owner ID
          example: '12345'
        main_location_id:
          type: string
          title: Main location ID
          description: The main location ID of the merchant
          example: '12345'
          nullable: true
        status:
          type: string
          title: Status
          description: Status of this merchant.
          x-apideck-enum-id: merchants.status
          enum:
            - active
            - inactive
            - other
          example: active
          nullable: true
        service_charges:
          type: array
          items:
            $ref: '#/components/schemas/ServiceCharge'
        language:
          type: string
          example: EN
          description: language code according to ISO 639-1. For the United States - EN
          nullable: true
        currency:
          $ref: '#/components/schemas/Currency'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateMerchantResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Merchants
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateLocationResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Locations
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteLocationResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Locations
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetLocationResponse:
      x-graphql-type-name: Location
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Locations
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Location'
    GetLocationsResponse:
      x-graphql-type-name: LocationList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Locations
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Location:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          title: name
          description: The name of the location
          example: Dunkin Donuts
          nullable: true
        business_name:
          type: string
          title: name
          description: The business name of the location
          example: Dunkin Donuts LLC
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          title: Status
          description: Status of this location.
          x-apideck-enum-id: locations.status
          enum:
            - active
            - inactive
            - other
          example: active
          nullable: true
        merchant_id:
          type: string
          example: '12345'
        currency:
          $ref: '#/components/schemas/Currency'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateLocationResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Locations
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateItemResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteItemResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetItemResponse:
      x-graphql-type-name: Item
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Item'
    GetItemsResponse:
      x-graphql-type-name: ItemList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Item:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        id:
          type: string
          example: '#cocoa'
        idempotency_key:
          $ref: '#/components/schemas/IdempotencyKey'
        name:
          title: Name
          type: string
          example: Cocoa
        description:
          title: Description
          type: string
          example: Hot Chocolate
        abbreviation:
          title: Abbreviation
          type: string
          example: Ch
        product_type:
          title: Product type
          type: string
          x-apideck-enum-id: items.product_type
          enum:
            - regular
            - other
          example: regular
        price_amount:
          type: number
          title: Price amount
          example: 10
        pricing_type:
          type: string
          title: Pricing type
          x-apideck-enum-id: items.pricing_type
          enum:
            - fixed
            - variable
            - per_unit
            - other
          example: fixed
        price_currency:
          $ref: '#/components/schemas/Currency'
        cost:
          type: number
          title: Cost
          example: 2
        tax_ids:
          title: Tax IDs
          description: A list of Tax IDs for the product.
          type: array
          items:
            type: string
          example:
            - '12345'
            - '67890'
        absent_at_location_ids:
          description: 'A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.'
          type: array
          items:
            type: string
          example:
            - '12345'
            - '67890'
        present_at_all_locations:
          title: Present at all locations
          type: boolean
          example: false
        sku:
          type: string
          title: SKU
          description: SKU of the item
          example: '11910345'
        code:
          type: string
          description: 'Product code, e.g. UPC or EAN'
          title: SKU
          example: '11910345'
        categories:
          type: array
          title: Categories
          items:
            properties:
              id:
                $ref: '#/components/schemas/Id'
              name:
                type: string
              image_ids:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
          example:
            - id: '12345'
              name: Food
              image_ids:
                - '12345'
                - '67890'
        options:
          type: array
          description: List of options pertaining to this item's attribute variation
          items:
            properties:
              id:
                type: string
                example: '12345'
              name:
                title: Name
                type: string
                example: Option 1
              attribute_id:
                title: Attribute ID
                type: string
                example: '12345'
        variations:
          type: array
          title: Variations
          items:
            properties:
              id:
                $ref: '#/components/schemas/Id'
              name:
                type: string
                title: Name
                example: Variation
              sku:
                type: string
                title: SKU
                example: '11910345'
              item_id:
                $ref: '#/components/schemas/Id'
              sequence:
                $ref: '#/components/schemas/Sequence'
              pricing_type:
                type: string
                title: Pricing type
                x-apideck-enum-id: items.pricing_type
                enum:
                  - fixed
                  - variable
                  - other
                example: fixed
              price_amount:
                type: number
                title: Price amount
                example: 10
              price_currency:
                $ref: '#/components/schemas/Currency'
              stockable:
                title: Stockable
                type: boolean
                example: false
              present_at_all_locations:
                title: Present at all locations
                type: boolean
                example: false
              version:
                $ref: '#/components/schemas/UpdatedBy'
              updated_at:
                $ref: '#/components/schemas/UpdatedAt'
              created_at:
                $ref: '#/components/schemas/CreatedAt'
          example:
            - id: '12345'
              name: Food
              sku: '11910345'
              item_id: '12345'
              sequence: 0
              pricing_type: fixed
              price_amount: 10
              price_currency: USD
              image_ids:
                - '12345'
                - '67890'
        available:
          $ref: '#/components/schemas/Available'
        hidden:
          $ref: '#/components/schemas/Hidden'
        version:
          $ref: '#/components/schemas/UpdatedBy'
        deleted:
          $ref: '#/components/schemas/Deleted'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateItemResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Items
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateModifierResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Modifiers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteModifierResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Modifiers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetModifierResponse:
      x-graphql-type-name: Modifier
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Modifiers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Modifier'
    GetModifiersResponse:
      x-graphql-type-name: ModifierList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Modifiers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Modifier'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Modifier:
      type: object
      additionalProperties: false
      required:
        - name
        - modifier_group_id
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          title: Name
          type: string
          example: Modifier
        alternate_name:
          title: Alternate name
          type: string
          example: Modifier New
        price_amount:
          type: number
          title: Price amount
          example: 10
        currency:
          $ref: '#/components/schemas/Currency'
        modifier_group_id:
          type: string
          title: Modifier group ID
          example: '123'
        available:
          $ref: '#/components/schemas/Available'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateModifierResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: Modifiers
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateModifierGroupResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: ModifierGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteModifierGroupResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: ModifierGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetModifierGroupResponse:
      x-graphql-type-name: ModifierGroup
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: ModifierGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/ModifierGroup'
    GetModifierGroupsResponse:
      x-graphql-type-name: ModifierGroupList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: ModifierGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModifierGroup'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    ModifierGroup:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          title: Name
          type: string
          example: Modifier
        alternate_name:
          title: Alternate name
          type: string
          example: Modifier New
        minimum_required:
          type: integer
          title: Minimum required
          example: 1
        maximum_allowed:
          type: integer
          title: Maximum allowed
          example: 5
        selection_type:
          type: string
          x-apideck-enum-id: modifier-groups.selection_type
          enum:
            - single
            - multiple
          title: Indicates whether multiple options from the modifier group can be applied to a single or multiple modifiers
          example: single
        present_at_all_locations:
          title: Present at all locations
          type: boolean
          example: false
        modifiers:
          type: array
          items:
            properties:
              id:
                title: ID
                type: string
                example: '12345'
              name:
                title: Name
                type: string
                example: Modifier
              alternate_name:
                title: Alternate name
                type: string
                example: Modifier New
              price_amount:
                type: number
                title: Price amount
                example: 10
              currency:
                $ref: '#/components/schemas/Currency'
              available:
                $ref: '#/components/schemas/Available'
        deleted:
          $ref: '#/components/schemas/Deleted'
        row_version:
          $ref: '#/components/schemas/RowVersion'
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateModifierGroupResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: square
        resource:
          type: string
          description: Unified API resource name
          example: ModifierGroups
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    ServiceCharges:
      type: array
      description: Optional service charges or gratuity tip applied to the order.
      items:
        $ref: '#/components/schemas/ServiceCharge'
    ServiceCharge:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Service charge name
          example: Charge for delivery
        amount:
          title: Amount (in cents)
          type: number
          example: 27500
        percentage:
          type: number
          description: Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
          example: 12.5
        currency:
          $ref: '#/components/schemas/Currency'
        active:
          $ref: '#/components/schemas/Active'
        type:
          type: string
          description: The type of the service charge.
          x-apideck-enum-id: service-charges.type
          enum:
            - auto_gratuity
            - custom
    CreateOrderTypeResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: OrderTypes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteOrderTypeResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: OrderTypes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetOrderTypeResponse:
      x-graphql-type-name: OrderType
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: OrderTypes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/OrderType'
    GetOrderTypesResponse:
      x-graphql-type-name: OrderTypeList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: OrderTypes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderType'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    OrderType:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          title: Order type name
          type: string
          example: Default order type
        default:
          title: Default
          type: boolean
          example: true
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateOrderTypeResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: OrderTypes
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    CreateTenderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Tenders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    DeleteTenderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Tenders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    GetTenderResponse:
      x-graphql-type-name: Tender
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Tenders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/Tender'
    GetTendersResponse:
      x-graphql-type-name: TenderList
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Tenders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tender'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Tender:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/Id'
        key:
          type: string
          example: com.clover.tender.cash
          nullable: true
        label:
          type: string
          example: Cash
          nullable: true
        active:
          $ref: '#/components/schemas/Active'
        hidden:
          $ref: '#/components/schemas/Hidden'
        editable:
          $ref: '#/components/schemas/Hidden'
        opens_cash_drawer:
          type: boolean
          description: If this tender opens the cash drawer
          default: true
        allows_tipping:
          type: boolean
          description: Allow tipping on payment from tender
          default: true
        updated_by:
          $ref: '#/components/schemas/UpdatedBy'
        created_by:
          $ref: '#/components/schemas/CreatedBy'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    UpdateTenderResponse:
      type: object
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        service:
          type: string
          description: Apideck ID of service provider
          example: clover
        resource:
          type: string
          description: Unified API resource name
          example: Tenders
        operation:
          type: string
          description: Operation performed
          example: one
        data:
          $ref: '#/components/schemas/UnifiedId'
    ModifierGroupFilter:
      type: object
      x-graphql-type-name: ModifierGroupFilter
      example:
        modifier_group_id: '1234'
      properties:
        modifier_group_id:
          type: string
          description: Id of the job to filter on
          example: '1234'
      additionalProperties: false
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Orders
    description: ''
    x-apideck-resource-id: orders
    x-apideck-model:
      $ref: '#/components/schemas/Order'
  - name: Payments
    description: ''
    x-apideck-resource-id: payments
    x-apideck-model:
      $ref: '#/components/schemas/PosPayment'
  - name: Merchants
    description: ''
    x-apideck-resource-id: merchants
    x-apideck-model:
      $ref: '#/components/schemas/Merchant'
  - name: Locations
    description: ''
    x-apideck-resource-id: locations
    x-apideck-model:
      $ref: '#/components/schemas/Location'
  - name: Items
    description: ''
    x-apideck-resource-id: items
    x-apideck-model:
      $ref: '#/components/schemas/Item'
  - name: Modifiers
    description: ''
    x-apideck-resource-id: modifiers
    x-apideck-model:
      $ref: '#/components/schemas/Modifier'
  - name: Modifier Groups
    description: ''
    x-apideck-resource-id: modifier-groups
    x-apideck-model:
      $ref: '#/components/schemas/ModifierGroup'
  - name: Order Types
    description: ''
    x-apideck-resource-id: order-types
    x-apideck-model:
      $ref: '#/components/schemas/OrderType'
  - name: Tenders
    description: ''
    x-apideck-resource-id: tenders
    x-apideck-model:
      $ref: '#/components/schemas/Tender'
paths:
  /pos/orders:
    get:
      tags:
        - Orders
      x-graphql-field-name: orders
      operationId: ordersAll
      summary: List Orders
      description: List Orders
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/locationId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetOrdersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.ordersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Orders
      operationId: ordersAdd
      summary: Create Order
      description: Create Order
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          $ref: '#/components/responses/CreateOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              order: {
                order_number: '1F',
                order_date: '2022-08-12',
                closed_date: '2022-08-13',
                reference_id: 'my-order-001',
                status: 'open',
                payment_status: 'open',
                currency: 'USD',
                title: 'string',
                note: 'string',
                merchant_id: '12345',
                customer_id: '12345',
                employee_id: '12345',
                location_id: '12345',
                order_type_id: '12345',
                table: '1F',
                seat: '23F',
                total_amount: 27.5,
                total_tip: 7,
                total_tax: 2.75,
                total_discount: 3,
                total_refund: 0,
                total_service_charge: 0,
                refunded: false,
                customers: [
                  {
                    first_name: 'Elon',
                    middle_name: 'D.',
                    last_name: 'Musk',
                    phone_numbers: [
                      {
                        id: '12345',
                        country_code: '1',
                        area_code: '323',
                        number: '111-111-1111',
                        extension: '105',
                        type: 'primary'
                      }
                    ],
                    emails: [
                      {
                        id: '123',
                        email: 'elon@musk.com',
                        type: 'primary'
                      }
                    ]
                  }
                ],
                fulfillments: [
                  {
                    id: '12345',
                    status: 'proposed',
                    type: 'shipment',
                    pickup_details: {
                      auto_complete_duration: 'P1W3D',
                      cancel_reason: 'Not hungry',
                      expires_at: '2016-09-04T23:59:33.123Z',
                      schedule_type: 'scheduled',
                      pickup_at: '2016-09-04T23:59:33.123Z',
                      pickup_window_duration: 'P1W3D',
                      prep_time_duration: 'P1W3D',
                      note: 'Pickup in the back.',
                      placed_at: '2016-09-04T23:59:33.123Z',
                      rejected_at: '2016-09-04T23:59:33.123Z',
                      ready_at: '2016-09-04T23:59:33.123Z',
                      expired_at: '2016-09-04T23:59:33.123Z',
                      picked_up_at: '2016-09-04T23:59:33.123Z',
                      canceled_at: '2016-09-04T23:59:33.123Z',
                      is_curbside_pickup: true,
                      curbside_pickup_details: {
                        curbside_details: 'string',
                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'
                      },
                      recipient: {
                        customer_id: '12345',
                        address: [Object],
                        phone_number: [Object],
                        email: [Object]
                      }
                    },
                    shipment_details: {}
                  }
                ],
                line_items: [
                  {
                    name: 'New York Strip Steak',
                    item: {},
                    total_tax: 2000,
                    total_discount: 3000,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    applied_taxes: [
                      {
                        tax_id: 'sales-tax',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    applied_discounts: [
                      {
                        discount_id: '12345',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    modifiers: [
                      {
                        name: 'New York Strip Steak - no cheese',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ]
                  }
                ],
                payments: [
                  {
                    amount: 27500,
                    currency: 'USD'
                  }
                ],
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ],
                refunds: [
                  {
                    amount: 27500,
                    currency: 'USD',
                    reason: 'The reason for the refund being issued.',
                    status: 'pending'
                  }
                ],
                taxes: [
                  {
                    id: 'state-sales-tax',
                    name: 'State Sales Tax',
                    amount: 27500,
                    currency: 'USD',
                    percentage: 15,
                    scope: 'order',
                    type: 'unknown',
                    auto_applied: true
                  }
                ],
                discounts: [
                  {
                    name: '10% off',
                    type: 'fixed_percentage',
                    amount: 27500,
                    currency: 'USD',
                    scope: 'order'
                  }
                ],
                tenders: [
                  {
                    name: '10% off',
                    type: 'cash',
                    note: 'An optional note associated with the tender at the time of payment.',
                    amount: 27500,
                    currency: 'USD',
                    total_amount: 27.5,
                    total_tip: 7,
                    total_processing_fee: 0,
                    total_tax: 2.75,
                    total_discount: 3,
                    total_refund: 0,
                    total_service_charge: 0,
                    buyer_tendered_cash_amount: 27500,
                    change_back_cash_amount: 27500,
                    card: {
                      bin: '41111',
                      card_brand: 'visa',
                      card_type: 'credit',
                      prepaid_type: 'prepaid',
                      cardholder_name: 'John Doe',
                      customer_id: '12345',
                      merchant_id: '12345',
                      exp_month: 1,
                      exp_year: 2022,
                      fingerprint:
                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',
                      last_4: 'The last 4 digits of the card number.',
                      enabled: true,
                      billing_address: {
                        id: '123',
                        type: 'primary',
                        string: '25 Spring Street, Blackburn, VIC 3130',
                        name: 'HQ US',
                        line1: 'Main street',
                        line2: 'apt #',
                        line3: 'Suite #',
                        line4: 'delivery instructions',
                        street_number: '25',
                        city: 'San Francisco',
                        state: 'CA',
                        postal_code: '94104',
                        country: 'US',
                        latitude: '40.759211',
                        longitude: '-73.984638',
                        county: 'Santa Clara',
                        contact_name: 'Elon Musk',
                        salutation: 'Mr',
                        phone_number: '111-111-1111',
                        fax: '122-111-1111',
                        email: 'elon@musk.com',
                        website: 'https://elonmusk.com',
                        row_version: '1-12345'
                      },
                      reference_id: 'card-001',
                      version: '230320320320'
                    },
                    card_status: 'authorized',
                    card_entry_method: 'swiped'
                  }
                ],
                voided: false,
                version: '230320320320'
              }
            }

            try {
              const { data } = await apideck.pos.ordersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/orders/{id}':
    get:
      tags:
        - Orders
      operationId: ordersOne
      summary: Get Order
      description: Get Order
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.ordersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Orders
      operationId: ordersUpdate
      summary: Update Order
      description: Update Order
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          $ref: '#/components/responses/UpdateOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              order: {
                order_number: '1F',
                order_date: '2022-08-12',
                closed_date: '2022-08-13',
                reference_id: 'my-order-001',
                status: 'open',
                payment_status: 'open',
                currency: 'USD',
                title: 'string',
                note: 'string',
                merchant_id: '12345',
                customer_id: '12345',
                employee_id: '12345',
                location_id: '12345',
                order_type_id: '12345',
                table: '1F',
                seat: '23F',
                total_amount: 27.5,
                total_tip: 7,
                total_tax: 2.75,
                total_discount: 3,
                total_refund: 0,
                total_service_charge: 0,
                refunded: false,
                customers: [
                  {
                    first_name: 'Elon',
                    middle_name: 'D.',
                    last_name: 'Musk',
                    phone_numbers: [
                      {
                        id: '12345',
                        country_code: '1',
                        area_code: '323',
                        number: '111-111-1111',
                        extension: '105',
                        type: 'primary'
                      }
                    ],
                    emails: [
                      {
                        id: '123',
                        email: 'elon@musk.com',
                        type: 'primary'
                      }
                    ]
                  }
                ],
                fulfillments: [
                  {
                    id: '12345',
                    status: 'proposed',
                    type: 'shipment',
                    pickup_details: {
                      auto_complete_duration: 'P1W3D',
                      cancel_reason: 'Not hungry',
                      expires_at: '2016-09-04T23:59:33.123Z',
                      schedule_type: 'scheduled',
                      pickup_at: '2016-09-04T23:59:33.123Z',
                      pickup_window_duration: 'P1W3D',
                      prep_time_duration: 'P1W3D',
                      note: 'Pickup in the back.',
                      placed_at: '2016-09-04T23:59:33.123Z',
                      rejected_at: '2016-09-04T23:59:33.123Z',
                      ready_at: '2016-09-04T23:59:33.123Z',
                      expired_at: '2016-09-04T23:59:33.123Z',
                      picked_up_at: '2016-09-04T23:59:33.123Z',
                      canceled_at: '2016-09-04T23:59:33.123Z',
                      is_curbside_pickup: true,
                      curbside_pickup_details: {
                        curbside_details: 'string',
                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'
                      },
                      recipient: {
                        customer_id: '12345',
                        address: [Object],
                        phone_number: [Object],
                        email: [Object]
                      }
                    },
                    shipment_details: {}
                  }
                ],
                line_items: [
                  {
                    name: 'New York Strip Steak',
                    item: {},
                    total_tax: 2000,
                    total_discount: 3000,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    applied_taxes: [
                      {
                        tax_id: 'sales-tax',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    applied_discounts: [
                      {
                        discount_id: '12345',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    modifiers: [
                      {
                        name: 'New York Strip Steak - no cheese',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ]
                  }
                ],
                payments: [
                  {
                    amount: 27500,
                    currency: 'USD'
                  }
                ],
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ],
                refunds: [
                  {
                    amount: 27500,
                    currency: 'USD',
                    reason: 'The reason for the refund being issued.',
                    status: 'pending'
                  }
                ],
                taxes: [
                  {
                    id: 'state-sales-tax',
                    name: 'State Sales Tax',
                    amount: 27500,
                    currency: 'USD',
                    percentage: 15,
                    scope: 'order',
                    type: 'unknown',
                    auto_applied: true
                  }
                ],
                discounts: [
                  {
                    name: '10% off',
                    type: 'fixed_percentage',
                    amount: 27500,
                    currency: 'USD',
                    scope: 'order'
                  }
                ],
                tenders: [
                  {
                    name: '10% off',
                    type: 'cash',
                    note: 'An optional note associated with the tender at the time of payment.',
                    amount: 27500,
                    currency: 'USD',
                    total_amount: 27.5,
                    total_tip: 7,
                    total_processing_fee: 0,
                    total_tax: 2.75,
                    total_discount: 3,
                    total_refund: 0,
                    total_service_charge: 0,
                    buyer_tendered_cash_amount: 27500,
                    change_back_cash_amount: 27500,
                    card: {
                      bin: '41111',
                      card_brand: 'visa',
                      card_type: 'credit',
                      prepaid_type: 'prepaid',
                      cardholder_name: 'John Doe',
                      customer_id: '12345',
                      merchant_id: '12345',
                      exp_month: 1,
                      exp_year: 2022,
                      fingerprint:
                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',
                      last_4: 'The last 4 digits of the card number.',
                      enabled: true,
                      billing_address: {
                        id: '123',
                        type: 'primary',
                        string: '25 Spring Street, Blackburn, VIC 3130',
                        name: 'HQ US',
                        line1: 'Main street',
                        line2: 'apt #',
                        line3: 'Suite #',
                        line4: 'delivery instructions',
                        street_number: '25',
                        city: 'San Francisco',
                        state: 'CA',
                        postal_code: '94104',
                        country: 'US',
                        latitude: '40.759211',
                        longitude: '-73.984638',
                        county: 'Santa Clara',
                        contact_name: 'Elon Musk',
                        salutation: 'Mr',
                        phone_number: '111-111-1111',
                        fax: '122-111-1111',
                        email: 'elon@musk.com',
                        website: 'https://elonmusk.com',
                        row_version: '1-12345'
                      },
                      reference_id: 'card-001',
                      version: '230320320320'
                    },
                    card_status: 'authorized',
                    card_entry_method: 'swiped'
                  }
                ],
                voided: false,
                version: '230320320320'
              }
            }

            try {
              const { data } = await apideck.pos.ordersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Orders
      operationId: ordersDelete
      summary: Delete Order
      description: Delete Order
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.ordersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/orders/{id}/pay':
    post:
      tags:
        - Orders
      operationId: ordersPay
      summary: Pay Order
      description: Pay Order
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          $ref: '#/components/responses/CreateOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              order: {
                order_number: '1F',
                order_date: '2022-08-12',
                closed_date: '2022-08-13',
                reference_id: 'my-order-001',
                status: 'open',
                payment_status: 'open',
                currency: 'USD',
                title: 'string',
                note: 'string',
                merchant_id: '12345',
                customer_id: '12345',
                employee_id: '12345',
                location_id: '12345',
                order_type_id: '12345',
                table: '1F',
                seat: '23F',
                total_amount: 27.5,
                total_tip: 7,
                total_tax: 2.75,
                total_discount: 3,
                total_refund: 0,
                total_service_charge: 0,
                refunded: false,
                customers: [
                  {
                    first_name: 'Elon',
                    middle_name: 'D.',
                    last_name: 'Musk',
                    phone_numbers: [
                      {
                        id: '12345',
                        country_code: '1',
                        area_code: '323',
                        number: '111-111-1111',
                        extension: '105',
                        type: 'primary'
                      }
                    ],
                    emails: [
                      {
                        id: '123',
                        email: 'elon@musk.com',
                        type: 'primary'
                      }
                    ]
                  }
                ],
                fulfillments: [
                  {
                    id: '12345',
                    status: 'proposed',
                    type: 'shipment',
                    pickup_details: {
                      auto_complete_duration: 'P1W3D',
                      cancel_reason: 'Not hungry',
                      expires_at: '2016-09-04T23:59:33.123Z',
                      schedule_type: 'scheduled',
                      pickup_at: '2016-09-04T23:59:33.123Z',
                      pickup_window_duration: 'P1W3D',
                      prep_time_duration: 'P1W3D',
                      note: 'Pickup in the back.',
                      placed_at: '2016-09-04T23:59:33.123Z',
                      rejected_at: '2016-09-04T23:59:33.123Z',
                      ready_at: '2016-09-04T23:59:33.123Z',
                      expired_at: '2016-09-04T23:59:33.123Z',
                      picked_up_at: '2016-09-04T23:59:33.123Z',
                      canceled_at: '2016-09-04T23:59:33.123Z',
                      is_curbside_pickup: true,
                      curbside_pickup_details: {
                        curbside_details: 'string',
                        buyer_arrived_at: '2016-09-04T23:59:33.123Z'
                      },
                      recipient: {
                        customer_id: '12345',
                        address: [Object],
                        phone_number: [Object],
                        email: [Object]
                      }
                    },
                    shipment_details: {}
                  }
                ],
                line_items: [
                  {
                    name: 'New York Strip Steak',
                    item: {},
                    total_tax: 2000,
                    total_discount: 3000,
                    total_amount: 27500,
                    quantity: 1,
                    unit_price: 27500.5,
                    applied_taxes: [
                      {
                        tax_id: 'sales-tax',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    applied_discounts: [
                      {
                        discount_id: '12345',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ],
                    modifiers: [
                      {
                        name: 'New York Strip Steak - no cheese',
                        amount: 27500,
                        currency: 'USD'
                      }
                    ]
                  }
                ],
                payments: [
                  {
                    amount: 27500,
                    currency: 'USD'
                  }
                ],
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ],
                refunds: [
                  {
                    amount: 27500,
                    currency: 'USD',
                    reason: 'The reason for the refund being issued.',
                    status: 'pending'
                  }
                ],
                taxes: [
                  {
                    id: 'state-sales-tax',
                    name: 'State Sales Tax',
                    amount: 27500,
                    currency: 'USD',
                    percentage: 15,
                    scope: 'order',
                    type: 'unknown',
                    auto_applied: true
                  }
                ],
                discounts: [
                  {
                    name: '10% off',
                    type: 'fixed_percentage',
                    amount: 27500,
                    currency: 'USD',
                    scope: 'order'
                  }
                ],
                tenders: [
                  {
                    name: '10% off',
                    type: 'cash',
                    note: 'An optional note associated with the tender at the time of payment.',
                    amount: 27500,
                    currency: 'USD',
                    total_amount: 27.5,
                    total_tip: 7,
                    total_processing_fee: 0,
                    total_tax: 2.75,
                    total_discount: 3,
                    total_refund: 0,
                    total_service_charge: 0,
                    buyer_tendered_cash_amount: 27500,
                    change_back_cash_amount: 27500,
                    card: {
                      bin: '41111',
                      card_brand: 'visa',
                      card_type: 'credit',
                      prepaid_type: 'prepaid',
                      cardholder_name: 'John Doe',
                      customer_id: '12345',
                      merchant_id: '12345',
                      exp_month: 1,
                      exp_year: 2022,
                      fingerprint:
                        ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',
                      last_4: 'The last 4 digits of the card number.',
                      enabled: true,
                      billing_address: {
                        id: '123',
                        type: 'primary',
                        string: '25 Spring Street, Blackburn, VIC 3130',
                        name: 'HQ US',
                        line1: 'Main street',
                        line2: 'apt #',
                        line3: 'Suite #',
                        line4: 'delivery instructions',
                        street_number: '25',
                        city: 'San Francisco',
                        state: 'CA',
                        postal_code: '94104',
                        country: 'US',
                        latitude: '40.759211',
                        longitude: '-73.984638',
                        county: 'Santa Clara',
                        contact_name: 'Elon Musk',
                        salutation: 'Mr',
                        phone_number: '111-111-1111',
                        fax: '122-111-1111',
                        email: 'elon@musk.com',
                        website: 'https://elonmusk.com',
                        row_version: '1-12345'
                      },
                      reference_id: 'card-001',
                      version: '230320320320'
                    },
                    card_status: 'authorized',
                    card_entry_method: 'swiped'
                  }
                ],
                voided: false,
                version: '230320320320'
              }
            }

            try {
              const { data } = await apideck.pos.ordersPay(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/payments:
    get:
      tags:
        - Payments
      x-graphql-field-name: payments
      operationId: paymentsAll
      summary: List Payments
      description: List Payments
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetPosPaymentsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.paymentsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Payments
      operationId: paymentsAdd
      summary: Create Payment
      description: Create Payment
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosPayment'
      responses:
        '201':
          $ref: '#/components/responses/CreatePosPaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              payment: {
                source_id: '12345',
                order_id: '12345',
                merchant_id: '12345',
                customer_id: '12345',
                employee_id: '12345',
                location_id: '12345',
                device_id: '12345',
                tender_id: '12345',
                external_payment_id: '12345',
                idempotency_key: 'random_string',
                amount: 27.5,
                currency: 'USD',
                tip: 7,
                tax: 20,
                total: 37.5,
                app_fee: 3,
                change_back_cash_amount: 20,
                approved: 37.5,
                refunded: 37.5,
                processing_fees: [
                  {
                    amount: 1.05,
                    effective_at: '2020-09-30T07:43:32.000Z',
                    processing_type: 'initial'
                  }
                ],
                source: 'external',
                status: 'approved',
                cash: {
                  amount: null,
                  charge_back_amount: null
                },
                card_details: {
                  card: {
                    bin: '41111',
                    card_brand: 'visa',
                    card_type: 'credit',
                    prepaid_type: 'prepaid',
                    cardholder_name: 'John Doe',
                    customer_id: '12345',
                    merchant_id: '12345',
                    exp_month: 1,
                    exp_year: 2022,
                    fingerprint:
                      ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',
                    last_4: 'The last 4 digits of the card number.',
                    enabled: true,
                    billing_address: {
                      id: '123',
                      type: 'primary',
                      string: '25 Spring Street, Blackburn, VIC 3130',
                      name: 'HQ US',
                      line1: 'Main street',
                      line2: 'apt #',
                      line3: 'Suite #',
                      line4: 'delivery instructions',
                      street_number: '25',
                      city: 'San Francisco',
                      state: 'CA',
                      postal_code: '94104',
                      country: 'US',
                      latitude: '40.759211',
                      longitude: '-73.984638',
                      county: 'Santa Clara',
                      contact_name: 'Elon Musk',
                      salutation: 'Mr',
                      phone_number: '111-111-1111',
                      fax: '122-111-1111',
                      email: 'elon@musk.com',
                      website: 'https://elonmusk.com',
                      row_version: '1-12345'
                    },
                    reference_id: 'card-001',
                    version: '230320320320'
                  }
                },
                bank_account: {
                  bank_name: 'string',
                  transfer_type: 'string',
                  account_ownership_type: 'string',
                  fingerprint: 'string',
                  country: 'US',
                  statement_description: 'string',
                  ach_details: {
                    routing_number: 'string',
                    account_number_suffix: 'stri',
                    account_type: 'string'
                  }
                },
                wallet: {
                  status: 'authorized'
                },
                external_details: {
                  type: 'check',
                  source: 'string',
                  source_id: 'string',
                  source_fee_amount: 2.5
                },
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.pos.paymentsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/payments/{id}':
    get:
      tags:
        - Payments
      operationId: paymentsOne
      summary: Get Payment
      description: Get Payment
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetPosPaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.paymentsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Payments
      operationId: paymentsUpdate
      summary: Update Payment
      description: Update Payment
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosPayment'
      responses:
        '200':
          $ref: '#/components/responses/UpdatePosPaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              payment: {
                source_id: '12345',
                order_id: '12345',
                merchant_id: '12345',
                customer_id: '12345',
                employee_id: '12345',
                location_id: '12345',
                device_id: '12345',
                tender_id: '12345',
                external_payment_id: '12345',
                idempotency_key: 'random_string',
                amount: 27.5,
                currency: 'USD',
                tip: 7,
                tax: 20,
                total: 37.5,
                app_fee: 3,
                change_back_cash_amount: 20,
                approved: 37.5,
                refunded: 37.5,
                processing_fees: [
                  {
                    amount: 1.05,
                    effective_at: '2020-09-30T07:43:32.000Z',
                    processing_type: 'initial'
                  }
                ],
                source: 'external',
                status: 'approved',
                cash: {
                  amount: null,
                  charge_back_amount: null
                },
                card_details: {
                  card: {
                    bin: '41111',
                    card_brand: 'visa',
                    card_type: 'credit',
                    prepaid_type: 'prepaid',
                    cardholder_name: 'John Doe',
                    customer_id: '12345',
                    merchant_id: '12345',
                    exp_month: 1,
                    exp_year: 2022,
                    fingerprint:
                      ' Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.',
                    last_4: 'The last 4 digits of the card number.',
                    enabled: true,
                    billing_address: {
                      id: '123',
                      type: 'primary',
                      string: '25 Spring Street, Blackburn, VIC 3130',
                      name: 'HQ US',
                      line1: 'Main street',
                      line2: 'apt #',
                      line3: 'Suite #',
                      line4: 'delivery instructions',
                      street_number: '25',
                      city: 'San Francisco',
                      state: 'CA',
                      postal_code: '94104',
                      country: 'US',
                      latitude: '40.759211',
                      longitude: '-73.984638',
                      county: 'Santa Clara',
                      contact_name: 'Elon Musk',
                      salutation: 'Mr',
                      phone_number: '111-111-1111',
                      fax: '122-111-1111',
                      email: 'elon@musk.com',
                      website: 'https://elonmusk.com',
                      row_version: '1-12345'
                    },
                    reference_id: 'card-001',
                    version: '230320320320'
                  }
                },
                bank_account: {
                  bank_name: 'string',
                  transfer_type: 'string',
                  account_ownership_type: 'string',
                  fingerprint: 'string',
                  country: 'US',
                  statement_description: 'string',
                  ach_details: {
                    routing_number: 'string',
                    account_number_suffix: 'stri',
                    account_type: 'string'
                  }
                },
                wallet: {
                  status: 'authorized'
                },
                external_details: {
                  type: 'check',
                  source: 'string',
                  source_id: 'string',
                  source_fee_amount: 2.5
                },
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.pos.paymentsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Payments
      operationId: paymentsDelete
      summary: Delete Payment
      description: Delete Payment
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeletePosPaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.paymentsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/merchants:
    get:
      tags:
        - Merchants
      x-graphql-field-name: merchants
      operationId: merchantsAll
      summary: List Merchants
      description: List Merchants
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetMerchantsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.merchantsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Merchants
      operationId: merchantsAdd
      summary: Create Merchant
      description: Create Merchant
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
      responses:
        '201':
          $ref: '#/components/responses/CreateMerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              merchant: {
                name: 'Dunkin Donuts',
                address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                owner_id: '12345',
                main_location_id: '12345',
                status: 'active',
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ],
                language: 'EN',
                currency: 'USD'
              }
            }

            try {
              const { data } = await apideck.pos.merchantsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/merchants/{id}':
    get:
      tags:
        - Merchants
      operationId: merchantsOne
      summary: Get Merchant
      description: Get Merchant
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetMerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.merchantsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Merchants
      operationId: merchantsUpdate
      summary: Update Merchant
      description: Update Merchant
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
      responses:
        '200':
          $ref: '#/components/responses/UpdateMerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              merchant: {
                name: 'Dunkin Donuts',
                address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                owner_id: '12345',
                main_location_id: '12345',
                status: 'active',
                service_charges: [
                  {
                    name: 'Charge for delivery',
                    amount: 27500,
                    percentage: 12.5,
                    currency: 'USD',
                    active: true,
                    type: 'auto_gratuity'
                  }
                ],
                language: 'EN',
                currency: 'USD'
              }
            }

            try {
              const { data } = await apideck.pos.merchantsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Merchants
      operationId: merchantsDelete
      summary: Delete Merchant
      description: Delete Merchant
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteMerchantResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.merchantsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/locations:
    get:
      tags:
        - Locations
      x-graphql-field-name: locations
      operationId: locationsAll
      summary: List Locations
      description: List Locations
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetLocationsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.locationsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Locations
      operationId: locationsAdd
      summary: Create Location
      description: Create Location
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '201':
          $ref: '#/components/responses/CreateLocationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              location: {
                name: 'Dunkin Donuts',
                business_name: 'Dunkin Donuts LLC',
                address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                status: 'active',
                merchant_id: '12345',
                currency: 'USD'
              }
            }

            try {
              const { data } = await apideck.pos.locationsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/locations/{id}':
    get:
      tags:
        - Locations
      operationId: locationsOne
      summary: Get Location
      description: Get Location
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetLocationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.locationsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Locations
      operationId: locationsUpdate
      summary: Update Location
      description: Update Location
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          $ref: '#/components/responses/UpdateLocationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              location: {
                name: 'Dunkin Donuts',
                business_name: 'Dunkin Donuts LLC',
                address: {
                  id: '123',
                  type: 'primary',
                  string: '25 Spring Street, Blackburn, VIC 3130',
                  name: 'HQ US',
                  line1: 'Main street',
                  line2: 'apt #',
                  line3: 'Suite #',
                  line4: 'delivery instructions',
                  street_number: '25',
                  city: 'San Francisco',
                  state: 'CA',
                  postal_code: '94104',
                  country: 'US',
                  latitude: '40.759211',
                  longitude: '-73.984638',
                  county: 'Santa Clara',
                  contact_name: 'Elon Musk',
                  salutation: 'Mr',
                  phone_number: '111-111-1111',
                  fax: '122-111-1111',
                  email: 'elon@musk.com',
                  website: 'https://elonmusk.com',
                  row_version: '1-12345'
                },
                status: 'active',
                merchant_id: '12345',
                currency: 'USD'
              }
            }

            try {
              const { data } = await apideck.pos.locationsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Locations
      operationId: locationsDelete
      summary: Delete Location
      description: Delete Location
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteLocationResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.locationsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/items:
    get:
      tags:
        - Items
      x-graphql-field-name: items
      operationId: itemsAll
      summary: List Items
      description: List Items
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetItemsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.itemsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Items
      operationId: itemsAdd
      summary: Create Item
      description: Create Item
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          $ref: '#/components/responses/CreateItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              item: {
                id: '#cocoa',
                idempotency_key: 'random_string',
                name: 'Cocoa',
                description: 'Hot Chocolate',
                abbreviation: 'Ch',
                product_type: 'regular',
                price_amount: 10,
                pricing_type: 'fixed',
                price_currency: 'USD',
                cost: 2,
                tax_ids: ['12345', '67890'],
                absent_at_location_ids: ['12345', '67890'],
                present_at_all_locations: false,
                sku: '11910345',
                code: '11910345',
                categories: [
                  {
                    id: '12345',
                    name: 'Food',
                    image_ids: ['12345', '67890']
                  }
                ],
                options: [
                  {
                    id: '12345',
                    name: 'Option 1',
                    attribute_id: '12345'
                  }
                ],
                variations: [
                  {
                    id: '12345',
                    name: 'Food',
                    sku: '11910345',
                    item_id: '12345',
                    sequence: 0,
                    pricing_type: 'fixed',
                    price_amount: 10,
                    price_currency: 'USD',
                    image_ids: ['12345', '67890']
                  }
                ],
                available: true,
                hidden: true,
                deleted: true
              }
            }

            try {
              const { data } = await apideck.pos.itemsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/items/{id}':
    get:
      tags:
        - Items
      operationId: itemsOne
      summary: Get Item
      description: Get Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.itemsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Items
      operationId: itemsUpdate
      summary: Update Item
      description: Update Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          $ref: '#/components/responses/UpdateItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              item: {
                id: '#cocoa',
                idempotency_key: 'random_string',
                name: 'Cocoa',
                description: 'Hot Chocolate',
                abbreviation: 'Ch',
                product_type: 'regular',
                price_amount: 10,
                pricing_type: 'fixed',
                price_currency: 'USD',
                cost: 2,
                tax_ids: ['12345', '67890'],
                absent_at_location_ids: ['12345', '67890'],
                present_at_all_locations: false,
                sku: '11910345',
                code: '11910345',
                categories: [
                  {
                    id: '12345',
                    name: 'Food',
                    image_ids: ['12345', '67890']
                  }
                ],
                options: [
                  {
                    id: '12345',
                    name: 'Option 1',
                    attribute_id: '12345'
                  }
                ],
                variations: [
                  {
                    id: '12345',
                    name: 'Food',
                    sku: '11910345',
                    item_id: '12345',
                    sequence: 0,
                    pricing_type: 'fixed',
                    price_amount: 10,
                    price_currency: 'USD',
                    image_ids: ['12345', '67890']
                  }
                ],
                available: true,
                hidden: true,
                deleted: true
              }
            }

            try {
              const { data } = await apideck.pos.itemsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Items
      operationId: itemsDelete
      summary: Delete Item
      description: Delete Item
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.itemsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/modifiers:
    get:
      tags:
        - Modifiers
      x-graphql-field-name: modifiers
      operationId: modifiersAll
      summary: List Modifiers
      description: List Modifiers
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetModifiersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifiersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Modifiers
      operationId: modifiersAdd
      summary: Create Modifier
      description: Create Modifier
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Modifier'
      responses:
        '201':
          $ref: '#/components/responses/CreateModifierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              modifier: {
                name: 'Modifier',
                alternate_name: 'Modifier New',
                price_amount: 10,
                currency: 'USD',
                modifier_group_id: '123',
                available: true
              }
            }

            try {
              const { data } = await apideck.pos.modifiersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/modifiers/{id}':
    get:
      tags:
        - Modifiers
      operationId: modifiersOne
      summary: Get Modifier
      description: Get Modifier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/modifierGroupFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetModifierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifiersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Modifiers
      operationId: modifiersUpdate
      summary: Update Modifier
      description: Update Modifier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Modifier'
      responses:
        '200':
          $ref: '#/components/responses/UpdateModifierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              modifier: {
                name: 'Modifier',
                alternate_name: 'Modifier New',
                price_amount: 10,
                currency: 'USD',
                modifier_group_id: '123',
                available: true
              }
            }

            try {
              const { data } = await apideck.pos.modifiersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Modifiers
      operationId: modifiersDelete
      summary: Delete Modifier
      description: Delete Modifier
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/modifierGroupFilter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteModifierResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifiersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/modifier-groups:
    get:
      tags:
        - Modifier Groups
      x-graphql-field-name: modifierGroups
      operationId: modifierGroupsAll
      summary: List Modifier Groups
      description: List Modifier Groups
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetModifierGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifierGroupsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Modifier Groups
      operationId: modifierGroupsAdd
      summary: Create Modifier Group
      description: Create Modifier Group
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifierGroup'
      responses:
        '201':
          $ref: '#/components/responses/CreateModifierGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              modifierGroup: {
                name: 'Modifier',
                alternate_name: 'Modifier New',
                minimum_required: 1,
                maximum_allowed: 5,
                selection_type: 'single',
                present_at_all_locations: false,
                modifiers: [
                  {
                    id: '12345',
                    name: 'Modifier',
                    alternate_name: 'Modifier New',
                    price_amount: 10,
                    currency: 'USD',
                    available: true
                  }
                ],
                deleted: true,
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.pos.modifierGroupsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/modifier-groups/{id}':
    get:
      tags:
        - Modifier Groups
      operationId: modifierGroupsOne
      summary: Get Modifier Group
      description: Get Modifier Group
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetModifierGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifierGroupsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Modifier Groups
      operationId: modifierGroupsUpdate
      summary: Update Modifier Group
      description: Update Modifier Group
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifierGroup'
      responses:
        '200':
          $ref: '#/components/responses/UpdateModifierGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              modifierGroup: {
                name: 'Modifier',
                alternate_name: 'Modifier New',
                minimum_required: 1,
                maximum_allowed: 5,
                selection_type: 'single',
                present_at_all_locations: false,
                modifiers: [
                  {
                    id: '12345',
                    name: 'Modifier',
                    alternate_name: 'Modifier New',
                    price_amount: 10,
                    currency: 'USD',
                    available: true
                  }
                ],
                deleted: true,
                row_version: '1-12345'
              }
            }

            try {
              const { data } = await apideck.pos.modifierGroupsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Modifier Groups
      operationId: modifierGroupsDelete
      summary: Delete Modifier Group
      description: Delete Modifier Group
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteModifierGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.modifierGroupsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/order-types:
    get:
      tags:
        - Order Types
      x-graphql-field-name: orderTypes
      operationId: orderTypesAll
      summary: List Order Types
      description: List Order Types
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetOrderTypesResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.orderTypesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Order Types
      operationId: orderTypesAdd
      summary: Create Order Type
      description: Create Order Type
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderType'
      responses:
        '201':
          $ref: '#/components/responses/CreateOrderTypeResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              orderType: {
                name: 'Default order type',
                default: true
              }
            }

            try {
              const { data } = await apideck.pos.orderTypesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/order-types/{id}':
    get:
      tags:
        - Order Types
      operationId: orderTypesOne
      summary: Get Order Type
      description: Get Order Type
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetOrderTypeResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.orderTypesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Order Types
      operationId: orderTypesUpdate
      summary: Update Order Type
      description: Update Order Type
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderType'
      responses:
        '200':
          $ref: '#/components/responses/UpdateOrderTypeResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              orderType: {
                name: 'Default order type',
                default: true
              }
            }

            try {
              const { data } = await apideck.pos.orderTypesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Order Types
      operationId: orderTypesDelete
      summary: Delete Order Type
      description: Delete Order Type
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteOrderTypeResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.orderTypesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /pos/tenders:
    get:
      tags:
        - Tenders
      x-graphql-field-name: tenders
      operationId: tendersAll
      summary: List Tenders
      description: List Tenders
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTendersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.tendersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Tenders
      operationId: tendersAdd
      summary: Create Tender
      description: Create Tender
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tender'
      responses:
        '201':
          $ref: '#/components/responses/CreateTenderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              tender: {
                key: 'com.clover.tender.cash',
                label: 'Cash',
                active: true,
                hidden: true,
                editable: true,
                opens_cash_drawer: true,
                allows_tipping: true
              }
            }

            try {
              const { data } = await apideck.pos.tendersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/pos/tenders/{id}':
    get:
      tags:
        - Tenders
      operationId: tendersOne
      summary: Get Tender
      description: Get Tender
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetTenderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.tendersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Tenders
      operationId: tendersUpdate
      summary: Update Tender
      description: Update Tender
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tender'
      responses:
        '200':
          $ref: '#/components/responses/UpdateTenderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              tender: {
                key: 'com.clover.tender.cash',
                label: 'Cash',
                active: true,
                hidden: true,
                editable: true,
                opens_cash_drawer: true,
                allows_tipping: true
              }
            }

            try {
              const { data } = await apideck.pos.tendersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Tenders
      operationId: tendersDelete
      summary: Delete Tender
      description: Delete Tender
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/consumerId'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteTenderResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: pos
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.pos.tendersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  OrderCreated:
    post:
      summary: Order created
      description: Order created
      operationId: orderCreated
      x-apideck-event-type: pos.order.created
      x-apideck-upcoming: true
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  OrderUpdated:
    post:
      summary: Order updated
      description: Order updated
      operationId: orderUpdated
      x-apideck-event-type: pos.order.updated
      x-apideck-upcoming: true
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  OrderDeleted:
    post:
      summary: Order deleted
      description: Order deleted
      operationId: orderDeleted
      x-apideck-event-type: pos.order.deleted
      x-apideck-upcoming: true
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  PosPaymentDeleted:
    post:
      summary: PosPayment deleted
      description: PosPayment deleted
      operationId: paymentDeleted
      x-apideck-event-type: pos.payment.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  PosPaymentCreated:
    post:
      summary: PosPayment created
      description: PosPayment created
      operationId: paymentCreated
      x-apideck-event-type: pos.payment.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  PosPaymentUpdated:
    post:
      summary: PosPayment updated
      description: PosPayment updated
      operationId: paymentUpdated
      x-apideck-event-type: pos.payment.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  MerchantUpdated:
    post:
      summary: Merchant updated
      description: Merchant updated
      operationId: merchantUpdated
      x-apideck-event-type: pos.merchant.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  MerchantCreated:
    post:
      summary: Merchant created
      description: Merchant created
      operationId: merchantCreated
      x-apideck-event-type: pos.merchant.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  MerchantDeleted:
    post:
      summary: Merchant deleted
      description: Merchant deleted
      operationId: merchantDeleted
      x-apideck-event-type: pos.merchant.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LocationCreated:
    post:
      summary: Location created
      description: Location created
      operationId: locationCreated
      x-apideck-event-type: pos.location.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LocationUpdated:
    post:
      summary: Location updated
      description: Location updated
      operationId: locationUpdated
      x-apideck-event-type: pos.location.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  LocationDeleted:
    post:
      summary: Location deleted
      description: Location deleted
      operationId: locationDeleted
      x-apideck-event-type: pos.location.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ItemCreated:
    post:
      summary: Item created
      description: Item created
      operationId: itemCreated
      x-apideck-event-type: pos.item.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ItemDeleted:
    post:
      summary: Item deleted
      description: Item deleted
      operationId: itemDeleted
      x-apideck-event-type: pos.item.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ItemUpdated:
    post:
      summary: Item updated
      description: Item updated
      operationId: itemUpdated
      x-apideck-event-type: pos.item.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierCreated:
    post:
      summary: Modifier created
      description: Modifier created
      operationId: modifierCreated
      x-apideck-event-type: pos.modifier.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierUpdated:
    post:
      summary: Modifier updated
      description: Modifier updated
      operationId: modifierUpdated
      x-apideck-event-type: pos.modifier.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierDeleted:
    post:
      summary: Modifier deleted
      description: Modifier deleted
      operationId: modifierDeleted
      x-apideck-event-type: pos.modifier.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierGroupDeleted:
    post:
      summary: Modifier Group deleted
      description: Modifier Group deleted
      operationId: modifierGroupDeleted
      x-apideck-event-type: pos.modifier-group.deleted
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierGroupCreated:
    post:
      summary: Modifier Group created
      description: Modifier Group created
      operationId: modifierGroupCreated
      x-apideck-event-type: pos.modifier-group.created
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ModifierGroupUpdated:
    post:
      summary: Modifier Group updated
      description: Modifier Group updated
      operationId: modifierGroupUpdated
      x-apideck-event-type: pos.modifier-group.updated
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosWebhookEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
