openapi: 3.0.3
info:
  version: 2.1.0
  title: Proxy API
  description: Welcome to the Proxy API
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://unify.apideck.com'
    description: Production server
tags:
  - name: Execute
    description: ''
components:
  parameters:
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    x-apideck-app-id:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
    x-apideck-consumer-id:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    x-apideck-service-id:
      name: x-apideck-service-id
      in: header
      required: true
      description: 'Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.'
      example: close
      schema:
        type: string
    x-apideck-downstream-url:
      name: x-apideck-downstream-url
      in: header
      description: Downstream URL
      example: 'https://api.close.com/api/v1/lead'
      required: true
      schema:
        type: string
    x-apideck-downstream-method:
      name: x-apideck-downstream-method
      in: header
      description: 'Downstream method. If not provided the upstream method will be inherited,'
      example: GET
      required: false
      schema:
        type: string
    x-apideck-downstream-authorization:
      name: x-apideck-downstream-authorization
      in: header
      description: Downstream authorization header. This will skip the Vault token injection.
      example: Bearer XXXXXXXXXXXXXXXXX
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: true
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: number
                description: HTTP status code
                example: 401
              error:
                type: string
                description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
                example: Unauthorized
              typeName:
                type: string
                description: The type of error returned
                example: UnauthorizedError
              message:
                type: string
                description: A human-readable message providing more details about the error.
                example: Unauthorized Request
              detail:
                anyOf:
                  - type: string
                  - type: object
                description: Contains parameter or domain specific information related to the error and why it occured.
                example: Failed to generate valid JWT Session. Verify applicationId is correct
              ref:
                type: string
                description: Link to documentation of error type
                example: 'https://developers.apideck.com/errors#unauthorizederror'
    ProxyError:
      description: Proxy error
      headers:
        x-apideck-downstream-error:
          schema:
            type: boolean
            description: Indicates if the error returned in the body is from the downstream
      content:
        application/json:
          schema: {}
    Ok:
      description: Ok
      content:
        application/json:
          schema: {}
          example: {}
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
    applicationId:
      type: apiKey
      in: header
      name: x-apideck-app-id
      description: The ID of your Unify application
security:
  - apiKey: []
    applicationId: []
paths:
  /proxy:
    get:
      summary: GET
      operationId: getProxy
      description: |
        Proxies a downstream GET request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      tags:
        - Execute
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/x-apideck-downstream-url'
        - $ref: '#/components/parameters/x-apideck-downstream-authorization'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/ProxyError'
    post:
      summary: POST
      operationId: postProxy
      description: |
        Proxies a downstream POST request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      tags:
        - Execute
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/x-apideck-downstream-url'
        - $ref: '#/components/parameters/x-apideck-downstream-authorization'
      security:
        - apiKey: []
      requestBody:
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: {}
              example:
                name: Bluth Company
                url: 'http://thebluthcompany.tumblr.com/'
                description: Best. Show. Ever.
                contacts:
                  - name: Gob
                    title: Sr. Vice President
                    emails:
                      - type: office
                        email: gob@example.com
                    phones:
                      - type: office
                        phone: '8004445555'
                addresses:
                  - label: business
                    address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    state: CA
                    zipcode: '94103'
                    country: US
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/ProxyError'
    put:
      summary: PUT
      operationId: putProxy
      description: |
        Proxies a downstream PUT request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      tags:
        - Execute
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/x-apideck-downstream-url'
        - $ref: '#/components/parameters/x-apideck-downstream-authorization'
      security:
        - apiKey: []
      requestBody:
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: {}
              example:
                name: Rich Company
                url: 'http://therichcompany.tumblr.com/'
                description: Best. Show. Ever.
                contacts:
                  - name: Gob
                    title: Sr. Vice President
                    emails:
                      - type: office
                        email: gob@example.com
                    phones:
                      - type: office
                        phone: '8004445555'
                addresses:
                  - label: business
                    address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    state: CA
                    zipcode: '94103'
                    country: US
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/ProxyError'
    patch:
      summary: PATCH
      operationId: patchProxy
      description: |
        Proxies a downstream PATCH request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      tags:
        - Execute
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/x-apideck-downstream-url'
        - $ref: '#/components/parameters/x-apideck-downstream-authorization'
      security:
        - apiKey: []
      requestBody:
        description: Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: {}
              example:
                name: Bluth Company
                url: 'http://thebluthcompany.tumblr.com/'
                description: Best. Show. Ever.
                contacts:
                  - name: Gob
                    title: Sr. Vice President
                    emails:
                      - type: office
                        email: gob@example.com
                    phones:
                      - type: office
                        phone: '8004445555'
                addresses:
                  - label: business
                    address_1: 747 Howard St
                    address_2: Room 3
                    city: San Francisco
                    state: CA
                    zipcode: '94103'
                    country: US
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/ProxyError'
    delete:
      summary: DELETE
      operationId: deleteProxy
      description: |
        Proxies a downstream DELETE request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
      tags:
        - Execute
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-service-id'
        - $ref: '#/components/parameters/x-apideck-downstream-url'
        - $ref: '#/components/parameters/x-apideck-downstream-authorization'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/ProxyError'
