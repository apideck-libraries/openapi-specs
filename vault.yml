openapi: 3.0.3
info:
  version: 8.85.0
  title: Vault API
  description: "Welcome to the Vault API \U0001F44B\n\nWhen you're looking to connect to an API, the first step is authentication.\n\nVault helps you handle OAuth flows, store API keys, and refresh access tokens from users (called consumers in Apideck).\n\n## Base URL\n\nThe base URL for all API requests is `https://unify.apideck.com`\n\n## Get Started\n\nTo use the Apideck APIs, you need to sign up for free at [https://app.apideck.com/signup](). Follow the steps below to get started.\n\n- [Create a free account.](https://app.apideck.com/signup)\n- Go to the [Dashboard](https://app.apideck.com/unify/unified-apis/dashboard).\n- Get your API key and the application ID.\n- Select and configure the integrations you want to make available to your users. Through the Unify dashboard, you can configure which connectors you want to support as integrations.\n- Retrieve the client_id and client_secret for the integration you want to activate (Only needed for OAuth integrations).\n- Soon, you can skip the previous step and use the Apideck sandbox credentials to get you started instead (upcoming)\n- Register the redirect URI for the example app (https://unify.apideck.com/vault/callback) in the list of redirect URIs under your app's settings\n- Use the [publishing guides](/app-listing-requirements) to get your integration listed across app marketplaces.\n\n### Hosted Vault\n\nHosted Vault (vault.apideck.com) is a no-code solution, so you don't need to build your own UI to handle the integration settings and authentication.\n\n![Hosted Vault - Integrations portal](https://github.com/apideck-samples/integration-settings/raw/master/public/img/vault.png)\n\nBehind the scenes, Hosted Vault implements the Vault API endpoints and handles the following features for your customers:\n\n- Add a connection\n- Handle the OAuth flow\n- Configure connection settings per integration\n- Manage connections\n- Discover and propose integration options\n- Search for integrations (upcoming)\n- Give integration suggestions based on provided metadata (email or website) when creating the session (upcoming)\n\nTo use Hosted Vault, you will need to first [**create a session**](https://developers.apideck.com/apis/vault/reference#operation/sessionsCreate). This can be achieved by making a POST request to the Vault API to create a valid session for a user, hereafter referred to as the consumer ID.\n\nExample using curl:\n\n```\ncurl -X POST https://unify.apideck.com/vault/sessions\n    -H \"Content-Type: application/json\"\n    -H \"Authorization: Bearer <your-api-key>\"\n    -H \"X-APIDECK-CONSUMER-ID: <consumer-id>\"\n    -H \"X-APIDECK-APP-ID: <application-id>\"\n    -d '{\"consumer_metadata\": { \"account_name\" : \"Sample\", \"user_name\": \"Sand Box\", \"email\": \"sand@box.com\", \"image\": \"https://unavatar.now.sh/jake\" }, \"theme\": { \"vault_name\": \"Intercom\", \"primary_color\": \"#286efa\", \"sidepanel_background_color\": \"#286efa\",\"sidepanel_text_color\": \"#FFFFFF\", \"favicon\": \"https://res.cloudinary.com/apideck/icons/intercom\" }}'\n```\n\n### Vault API\n\n_Beware, this is strategy takes more time to implement in comparison to Hosted Vault._\n\nIf you are building your integration settings UI manually, you can call the Vault API directly.\n\nThe Vault API is for those who want to completely white label the in-app integrations overview and authentication experience. All the available endpoints are listed below.\n\nThrough the API, your customers authenticate directly in your app, where Vault will still take care of redirecting to the auth provider and back to your app.\n\nIf you're already storing access tokens, we will help you migrate through our Vault Migration API (upcoming).\n\n## Domain model\n\nAt its core, a domain model creates a web of interconnected entities.\n\nOur domain model contains five main entity types: Consumer (user, account, team, machine), Application, Connector, Integration, and Connection.\n\n## Connection state\n\nThe connection state is computed based on the connection flow below.\n\n![](https://developers.apideck.com/api-references/vault/connection-flow.png)\n\n## Unify and Proxy integration\n\nThe only thing you need to use the Unify APIs and Proxy is the consumer id; thereafter, Vault will do the look-up in the background to handle the token injection before performing the API call(s).\n\n## Headers\n\nCustom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.\n\n| Name                  | Type    | Required | Description                                                                                                                                                    |\n| --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| x-apideck-app-id      | String  | Yes      | The id of your Unify application. Available at https://app.apideck.com/api-keys.                                                                               |\n| x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |\n| x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |\n\n## Sandbox (upcoming)\n\nThe sandbox is pre-loaded with data similar to a real-life integrations setup. You can use the preconfigured OAauth configured connectors for testing purposes and can skip this step by using the Apideck sandbox credentials to get you started.\n\n## Guides\n\n- [How to build an integrations UI with Vault](https://github.com/apideck-samples/integration-settings)\n- How to configure the OAuth credentials for integration providers (COMING SOON)\n\n## FAQ\n\n**What purpose does Vault serve? Can I just handle the authentication and access token myself?**\nYou can store everything yourself, but that defeats the purpose of using Apideck Unify. Handling tokens for multiple providers can quickly become very complex.\n\n### Is my data secure?\n\nVault employs data minimization, therefore only requesting the minimum amount of scopes needed to perform an API request.\n\n### How do I migrate existing data?\n\nUsing our migration API, you can migrate the access tokens and accounts to Apideck Vault. (COMING SOON)\n\n### Can I use Vault in combination with existing integrations?\n\nYes, you can. The flexibility of Unify allows you to quickly the use cases you need while keeping a gradual migration path based on your timeline and requirements.\n\n### How does Vault work for Apideck Ecosystem customers?\n\nOnce logged in, pick your ecosystem; on the left-hand side of the screen, you'll have the option to create an application underneath the Unify section.\n\n### How to integrate Apideck Vault\n\nThis section covers everything you need to know to authenticate your customers through Vault.\nVault provides **three auth strategies** to use API tokens from your customers:\n\n- Vault API\n- Hosted Vault\n- Apideck Ecosystem _(COMING SOON)_\n\nYou can also opt to bypass Vault and still take care of authentication flows yourself. Make sure to put the right safeguards in place to protect your customers' tokens and other sensitive data.\n\n### What auth types does Vault support?\n\nWhat auth strategies does Vault handle? We currently support three flows so your customers can activate an integration.\n\n#### API keys\n\nFor Services supporting the API key strategy, you can use Hosted Vault will need to provide an in-app form where users can configure their API keys provided by the integration service.\n\n#### OAuth 2.0\n\n##### Authorization Code Grant Type Flow\n\nVault handles the complete Authorization Code Grant Type Flow for you. This flow only supports browser-based (passive) authentication because most identity providers don't allow entering a username and password to be entered into applications that they don't own.\n\nCertain connectors require an OAuth redirect authentication flow, where the end-user is redirected to the provider's website or mobile app to authenticate.\n\nThis is being handled by the `/authorize` endpoint.\n\n#### Basic auth\n\nBasic authentication is a simple authentication scheme built into the HTTP protocol. The required fields to complete basic auth are handled by Hosted Vault or by updating the connection through the Vault API below.\n\n"
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  x-apideck-api: vault
  x-apideck-sdk-support: true
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Apideck Developer Docs
  url: 'https://developers.apideck.com'
servers:
  - url: 'https://unify.apideck.com'
    description: Production server
tags:
  - name: Sessions
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Session'
  - name: Connections
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Connection'
  - name: Consumers
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Consumer'
  - name: Logs
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Log'
components:
  parameters:
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    x-apideck-app-id:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
    x-apideck-consumer-id:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    x-apideck-service-id:
      name: x-apideck-service-id
      in: header
      required: true
      description: 'Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.'
      schema:
        type: string
    unified_api:
      name: unified_api
      in: path
      required: true
      description: Unified API
      schema:
        type: string
      example: crm
    service_id:
      name: service_id
      in: path
      description: Service ID of the resource to return
      required: true
      schema:
        type: string
      example: pipedrive
    application_id:
      name: application_id
      in: path
      description: Application ID of the resource to return
      required: true
      schema:
        type: string
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
    consumer_id:
      name: consumer_id
      in: path
      description: ID of the consumer to return
      required: true
      schema:
        type: string
      example: test_user_id
    x-apideck-downstream-url:
      name: x-apideck-downstream-url
      in: header
      description: Downstream URL
      example: 'https://api.twilio.com'
      required: true
      schema:
        type: string
    x-apideck-downstream-method:
      name: x-apideck-downstream-method
      in: header
      description: 'Downstream method. If not provided the upstream method will be inherited,'
      example: POST
      required: false
      schema:
        type: string
    x-apideck-downstream-authorization:
      name: x-apideck-downstream-authorization
      in: header
      description: Downstream authorization header. This will skip the Vault token injection.
      example: Bearer XXXXXXXXXXXXXXXXX
      required: false
      schema:
        type: string
    api:
      name: api
      in: query
      description: Scope results to Unified API
      schema:
        type: string
      example: crm
    resource:
      name: resource
      in: path
      required: true
      description: Resource Name
      schema:
        type: string
      example: leads
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: false
    limit:
      name: limit
      in: query
      description: Number of records to return
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    filter:
      name: filter
      in: query
      description: Filter results
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/LogsFilter'
    redirect_uri:
      name: redirect_uri
      in: query
      description: URL to redirect back to after authorization. When left empty the default configured redirect uri will be used.
      required: true
      schema:
        type: string
      example: 'http://example.com/integrations'
    state:
      name: state
      in: query
      description: An opaque value the applications adds to the initial request that the authorization server includes when redirecting the back to the application. This value must be used by the application to prevent CSRF attacks.
      required: true
      schema:
        type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsInVuaWZpZWRfYXBpIjoiZGVmYXVsdCIsInNlcnZpY2VfaWQiOiJ0ZWFtbGVhZGVyIiwiYXBwbGljYXRpb25faWQiOiIxMTExIiwiaWF0IjoxNjIyMTI2Nzg3fQ.97_pn1UAXc7mctXBdr15czUNO1jjdQ9sJUOIE_Myzbk
    code:
      name: code
      in: query
      description: An authorization code from the connector which Apideck Vault will later exchange for an access token.
      required: true
      schema:
        type: string
      example: g0ZGZmNjVmOWI
    configured:
      name: configured
      in: query
      description: Scopes results to connections that have been configured or not
      schema:
        type: boolean
      example: true
    scope:
      name: scope
      in: query
      description: One or more OAuth scopes to request from the connector. OAuth scopes control the set of resources and operations that are allowed after authorization. Refer to the connector's documentation for the available scopes.
      schema:
        type: array
        items:
          type: string
      style: spaceDelimited
      explode: false
      example:
        - openid
        - 'leads:write'
        - 'profile:read'
    start_datetime:
      name: start_datetime
      in: query
      description: Scopes results to requests that happened after datetime
      required: true
      schema:
        type: string
      example: '2021-05-01T12:00:00.000Z'
    end_datetime:
      name: end_datetime
      in: query
      description: Scopes results to requests that happened before datetime
      required: true
      schema:
        type: string
      example: '2021-05-30T12:00:00.000Z'
  schemas:
    AuthType:
      type: string
      x-apideck-enum-id: auth_types
      enum:
        - oauth2
        - apiKey
        - basic
        - custom
        - none
      example: oauth2
      description: Type of authorization used by the connector
      readOnly: true
    BadRequestResponse:
      type: object
      x-apideck-schema-id: BadRequest
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestvalidationerror'
    Connection:
      type: object
      x-apideck-schema-id: Connection
      properties:
        id:
          type: string
          description: The unique identifier of the connection.
          example: crm+salesforce
          readOnly: true
        service_id:
          type: string
          description: The ID of the service this connection belongs to.
          example: salesforce
          readOnly: true
        name:
          type: string
          description: The name of the connection
          example: Salesforce
          readOnly: true
        tag_line:
          type: string
          example: 'CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial.'
          readOnly: true
        unified_api:
          type: string
          description: The unified API category where the connection belongs to.
          example: crm
          readOnly: true
        state:
          $ref: '#/components/schemas/ConnectionState'
        auth_type:
          $ref: '#/components/schemas/AuthType'
        oauth_grant_type:
          $ref: '#/components/schemas/OAuthGrantType'
        status:
          type: string
          description: Status of the connection.
          x-apideck-enum-id: connections.status
          enum:
            - live
            - upcoming
            - requested
          readOnly: true
        enabled:
          type: boolean
          description: Whether the connection is enabled or not. You can enable or disable a connection using the Update Connection API.
          example: true
        website:
          type: string
          description: The website URL of the connection
          example: 'https://www.salesforce.com'
          readOnly: true
        icon:
          type: string
          description: 'A visual icon of the connection, that will be shown in the Vault'
          example: 'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
          readOnly: true
        logo:
          type: string
          description: 'The logo of the connection, that will be shown in the Vault'
          example: 'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
          readOnly: true
        authorize_url:
          type: string
          example: 'https://unify.apideck.com/vault/authorize/salesforce/<application-id>?state=<state>'
          description: "The OAuth redirect URI. Redirect your users to this URI to let them authorize your app in the connector's UI. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI."
          nullable: true
          readOnly: true
        revoke_url:
          type: string
          nullable: true
          description: "The OAuth revoke URI. Redirect your users to this URI to revoke this connection. Before you can use this URI, you must add `redirect_uri` as a query parameter. Your users will be redirected to this `redirect_uri` after they granted access to your app in the connector's UI."
          readOnly: true
          example: 'https://unify.apideck.com/vault/revoke/salesforce/<application-id>?state=<state>'
        settings:
          type: object
          description: Connection settings. Values will persist to `form_fields` with corresponding id
          additionalProperties: true
          properties: {}
          nullable: true
          example:
            instance_url: 'https://eu28.salesforce.com'
            api_key: 12345xxxxxx
        metadata:
          type: object
          description: Attach your own consumer specific metadata
          additionalProperties: true
          properties: {}
          nullable: true
          example:
            account:
              name: My Company
              id: c01458a5-7276-41ce-bc19-639906b0450a
            plan: enterprise
        form_fields:
          type: array
          description: The settings that are wanted to create a connection.
          items:
            $ref: '#/components/schemas/FormField'
          example:
            - id: instance_url
              label: Instance url
              value: 'https://eu28.salesforce.com'
              placeholder: ''
              mask: false
              type: text
              required: true
              disabled: false
              custom_field: false
              sensitive: false
            - id: api_key
              label: API Key
              value: '123455677'
              placeholder: ''
              mask: false
              type: text
              required: true
              disabled: false
              custom_field: false
              sensitive: true
          readOnly: true
        configuration:
          type: array
          items:
            type: object
            properties:
              resource:
                type: string
                example: leads
              defaults:
                type: array
                items:
                  type: object
                  properties:
                    target:
                      type: string
                      x-apideck-enum-id: connections.configuration.defaults.target
                      enum:
                        - custom_fields
                        - resource
                      example: custom_fields
                      readOnly: true
                    id:
                      type: string
                      example: ProductInterest
                    options:
                      type: array
                      items:
                        $ref: '#/components/schemas/FormFieldOption'
                    value:
                      anyOf:
                        - type: string
                          example: GC5000 series
                        - type: integer
                          example: 10
                        - type: number
                          example: 10.5
                        - type: boolean
                          example: true
                        - type: array
                          items:
                            anyOf:
                              - type: string
                                example: GC6000 series
                              - type: integer
                                example: 10
                              - type: number
                                example: 10.5
        configurable_resources:
          type: array
          items:
            type: string
          example:
            - opportunities
            - companies
            - contacts
            - leads
          readOnly: true
        resource_schema_support:
          type: array
          items:
            type: string
          readOnly: true
          example:
            - leads
        resource_settings_support:
          type: array
          items:
            type: string
          readOnly: true
          example:
            - leads
        settings_required_for_authorization:
          type: array
          items:
            type: string
          description: List of settings that are required to be configured on integration before authorization can occur
          readOnly: true
          example:
            - client_id
            - client_secret
        subscriptions:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/WebhookSubscription'
        has_guide:
          type: boolean
          readOnly: true
          description: 'Whether the connector has a guide available in the developer docs or not (https://docs.apideck.com/connectors/{service_id}/docs/consumer+connection).'
          example: true
        created_at:
          type: number
          readOnly: true
          example: 1615563533390
        updated_at:
          type: number
          example: 1616662325753
          readOnly: true
          nullable: true
    ConnectionEvent:
      type: object
      x-sdk-exclude: true
      properties:
        event_id:
          type: string
          description: Unique reference to this request event
          example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
        service_id:
          type: string
          description: Service provider identifier
          example: close
        entity_id:
          type: string
          description: The service provider's ID of the entity that triggered this event
          example: 123456ASDF
        entity_type:
          type: string
          description: The type entity that triggered this event
          example: Connection
        entity:
          $ref: '#/components/schemas/ConsumerConnection'
        event_type:
          $ref: '#/components/schemas/VaultEventType'
        execution_attempt:
          type: number
          description: The current count this request event has been attempted
          example: 2
        occurred_at:
          type: string
          description: ISO Datetime for when the original event occurred
          example: '2021-10-01T03:14:55.419Z'
    ConnectionImportData:
      type: object
      x-apideck-schema-id: ConnectionImportData
      properties:
        credentials:
          type: object
          additionalProperties: false
          required:
            - refresh_token
          properties:
            refresh_token:
              type: string
              description: The refresh token can be used to obtain a new access token.
              example: 1234567890abcdefghijklmnopqrstuvwxyz
            access_token:
              type: string
              description: Access token
              example: 1234567890abcdefghijklmnopqrstuvwxyz
            issued_at:
              type: string
              description: The datetime at which the token was issued. If omitted the token will be queued for refresh.
              nullable: true
              format: date-time
              example: '2020-01-01T00:00:00Z'
            expires_in:
              type: integer
              description: The number of seconds until the token expires. If omitted the token will be queued for refresh.
              nullable: true
              example: 3600
          example:
            access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ
        settings:
          type: object
          description: Connection settings. Values will persist to `form_fields` with corresponding id
          nullable: true
          example:
            instance_url: 'https://eu28.salesforce.com'
        metadata:
          type: object
          description: Attach your own consumer specific metadata
          additionalProperties: true
          properties: {}
          nullable: true
          example:
            account:
              name: My Company
              id: c01458a5-7276-41ce-bc19-639906b0450a
            plan: enterprise
    ConnectionMetadata:
      type: object
      x-apideck-schema-id: ConnectionMetadata
      properties:
        id:
          type: string
        name:
          type: string
    ConnectionState:
      type: string
      x-apideck-schema-id: ConnectionState
      description: '[Connection state flow](#section/Connection-state)'
      x-apideck-enum-id: connections.state
      enum:
        - available
        - callable
        - added
        - authorized
      example: authorized
      readOnly: true
    Consumer:
      type: object
      x-apideck-schema-id: Consumer
      properties:
        consumer_id:
          type: string
          example: test_consumer_id
        application_id:
          type: string
          example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
        metadata:
          $ref: '#/components/schemas/ConsumerMetadata'
        connections:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerConnection'
        services:
          type: array
          items:
            type: string
            example: salesforce
          example:
            - salesforce
            - stripe
        aggregated_request_count:
          type: number
          example: 101
        request_counts:
          $ref: '#/components/schemas/RequestCountAllocation'
        created:
          type: string
          example: '2021-05-07T12:55:42.242Z'
        modified:
          type: string
          example: '2021-05-07T12:55:42.242Z'
        request_count_updated:
          type: string
          example: '2021-05-07T12:55:42.242Z'
    ConsumerConnection:
      type: object
      x-apideck-schema-id: ConsumerConnection
      properties:
        id:
          type: string
          example: 1111+test_user_id
          readOnly: true
        name:
          type: string
          example: Salesforce
        icon:
          type: string
          example: 'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
        logo:
          type: string
          example: 'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
        website:
          type: string
          example: 'https://www.salesforce.com'
          readOnly: true
        tag_line:
          type: string
          example: 'CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial.'
          readOnly: true
        service_id:
          type: string
          example: teamleader
        unified_api:
          type: string
          example: crm
        consumer_id:
          type: string
          example: test_user_id
        auth_type:
          $ref: '#/components/schemas/AuthType'
        enabled:
          type: boolean
          example: true
        settings:
          type: object
          description: Connection settings. Values will persist to `form_fields` with corresponding id
          nullable: true
          example:
            instance_url: 'https://eu28.salesforce.com'
        metadata:
          type: object
          description: Attach your own consumer specific metadata
          additionalProperties: true
          properties: {}
          nullable: true
          example:
            account:
              name: My Company
              id: c01458a5-7276-41ce-bc19-639906b0450a
            plan: enterprise
        created_at:
          type: string
          example: '2020-09-19T12:18:37.071Z'
        updated_at:
          type: string
          example: '2020-09-19T12:18:37.071Z'
          nullable: true
        state:
          type: string
          x-apideck-enum-id: consumer.connections.state
          enum:
            - available
            - callable
            - added
            - configured
            - authorized
          example: authorized
    ConsumerMetadata:
      type: object
      x-apideck-schema-id: ConsumerMetadata
      properties:
        account_name:
          type: string
          example: SpaceX
        user_name:
          type: string
          example: Elon Musk
        email:
          type: string
          example: elon@musk.com
        image:
          type: string
          example: 'https://www.spacex.com/static/images/share.jpg'
    ConsumerRequestCountsInDateRangeResponse:
      type: object
      x-apideck-schema-id: ConsumerRequestCountsInDateRangeResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: object
          x-apideck-schema-id: ConsumerRequestCountsInDateRange
          properties:
            application_id:
              type: string
              example: '1111'
            consumer_id:
              type: string
              example: test_user_id
            start_datetime:
              type: string
              example: '2021-05-01T12:00:00.000Z'
            end_datetime:
              type: string
              example: '2021-05-10T12:00:00.000Z'
            aggregated_request_count:
              type: number
              example: 40
            request_counts:
              $ref: '#/components/schemas/RequestCountAllocation'
    ConnectionWebhook:
      type: object
      x-apideck-schema-id: Webhook
      additionalProperties: false
      required:
        - delivery_url
        - status
        - events
        - unified_api
        - execute_base_url
      properties:
        id:
          type: string
          example: '1234'
          readOnly: true
        description:
          type: string
          title: Description
          example: A description
          nullable: true
        unified_api:
          $ref: '#/components/schemas/UnifiedApiId'
        status:
          type: string
          x-graphql-type-name: WebhookStatus
          description: The status of the webhook.
          example: enabled
          x-apideck-enum-id: webhooks.status
          enum:
            - enabled
            - disabled
        delivery_url:
          type: string
          format: uri
          description: The delivery url of the webhook endpoint.
          pattern: '^(https?)://'
          example: 'https://example.com/my/webhook/endpoint'
        execute_base_url:
          type: string
          format: uri
          description: The Unify Base URL events from connectors will be sent to after service id is appended.
          pattern: '^(https?)://'
          readOnly: true
          example: 'https://unify.apideck.com/webhook/webhooks/1234/execute'
        events:
          type: array
          title: Subscribed events
          description: 'The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.'
          example:
            - vault.connection.created
            - vault.connection.updated
          items:
            x-apideck-enum-id: webhooks.event_type
            enum:
              - '*'
              - crm.activity.created
              - crm.activity.updated
              - crm.activity.deleted
              - crm.company.created
              - crm.company.updated
              - crm.company.deleted
              - crm.contact.created
              - crm.contact.updated
              - crm.contact.deleted
              - crm.lead.created
              - crm.lead.updated
              - crm.lead.deleted
              - crm.note.created
              - crm.notes.updated
              - crm.notes.deleted
              - crm.opportunity.created
              - crm.opportunity.updated
              - crm.opportunity.deleted
              - lead.lead.created
              - lead.lead.updated
              - lead.lead.deleted
              - vault.connection.created
              - vault.connection.updated
              - vault.connection.disabled
              - vault.connection.deleted
              - vault.connection.callable
              - vault.connection.token_refresh.failed
              - ats.job.created
              - ats.job.updated
              - ats.job.deleted
              - ats.applicant.created
              - ats.applicant.updated
              - ats.applicant.deleted
              - accounting.customer.created
              - accounting.customer.updated
              - accounting.customer.deleted
              - accounting.invoice.created
              - accounting.invoice.updated
              - accounting.invoice.deleted
              - accounting.invoice_item.created
              - accounting.invoice_item.updated
              - accounting.invoice_item.deleted
              - accounting.ledger_account.created
              - accounting.ledger_account.updated
              - accounting.ledger_account.deleted
              - accounting.tax_rate.created
              - accounting.tax_rate.updated
              - accounting.tax_rate.deleted
              - accounting.bill.created
              - accounting.bill.updated
              - accounting.bill.deleted
              - accounting.payment.created
              - accounting.payment.updated
              - accounting.payment.deleted
              - accounting.supplier.created
              - accounting.supplier.updated
              - accounting.supplier.deleted
              - pos.order.created
              - pos.order.updated
              - pos.order.deleted
              - pos.product.created
              - pos.product.updated
              - pos.product.deleted
              - pos.payment.created
              - pos.payment.updated
              - pos.payment.deleted
              - pos.merchant.created
              - pos.merchant.updated
              - pos.merchant.deleted
              - pos.location.created
              - pos.location.updated
              - pos.location.deleted
              - pos.item.created
              - pos.item.updated
              - pos.item.deleted
              - pos.modifier.created
              - pos.modifier.updated
              - pos.modifier.deleted
              - pos.modifier-group.created
              - pos.modifier-group.updated
              - pos.modifier-group.deleted
              - hris.employee.created
              - hris.employee.updated
              - hris.employee.deleted
              - hris.company.created
              - hris.company.updated
              - hris.company.deleted
              - file-storage.file.created
              - file-storage.file.updated
              - file-storage.file.deleted
            example: crm.company.created
            type: string
        updated_at:
          type: string
          title: Updated at (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
        created_at:
          type: string
          title: Created at (timestamp)
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
    CreateConnectionResponse:
      type: object
      x-apideck-schema-id: CreateConnectionResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 201
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Connection'
    CreateSessionResponse:
      type: object
      x-apideck-schema-id: CreateSessionResponse
      required:
        - status_code
        - status
        - data
      additionalProperties: false
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: object
          required:
            - session_uri
            - session_token
          properties:
            session_uri:
              example: 'http://vault.apideck.com/session/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj'
              readOnly: true
              type: string
            session_token:
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj
              readOnly: true
              type: string
          additionalProperties: false
    FormField:
      type: object
      x-apideck-schema-id: FormField
      x-graphql-type-name: FormField
      properties:
        id:
          type: string
          description: The unique identifier of the form field.
          example: channel
        label:
          type: string
          description: The label of the field
          example: Channel
        placeholder:
          type: string
          description: The placeholder for the form field
          example: Select a channel
          nullable: true
        description:
          type: string
          description: The description of the form field
          example: Slack channel to push notification to
          nullable: true
        type:
          enum:
            - text
            - checkbox
            - tel
            - email
            - url
            - textarea
            - select
            - filtered-select
            - multi-select
            - datetime
            - date
            - time
            - number
          example: select
        required:
          description: 'Indicates if the form field is required, which means it must be filled in before the form can be submitted'
          type: boolean
          example: true
        custom_field:
          type: boolean
          example: false
        allow_custom_values:
          title: Allow custom values
          description: Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
          type: boolean
          example: false
          default: false
        disabled:
          type: boolean
          description: Indicates if the form field is displayed in a “read-only” mode.
          nullable: true
          example: false
        hidden:
          type: boolean
          description: Indicates if the form field is not displayed but the value that is being stored on the connection.
          nullable: true
          example: false
        sensitive:
          type: boolean
          description: 'Indicates if the form field contains sensitive data, which will display the value as a masked input.'
          nullable: true
          example: false
        options:
          type: array
          items:
            $ref: '#/components/schemas/FormFieldOption'
          example:
            - label: General Channel
              value: general
    FormFieldOption:
      anyOf:
        - $ref: '#/components/schemas/SimpleFormFieldOption'
        - $ref: '#/components/schemas/FormFieldOptionGroup'
    FormFieldOptionGroup:
      type: object
      x-apideck-schema-id: FormFieldOptionGroup
      properties:
        id:
          type: string
          example: '1234'
        label:
          type: string
          example: General Channel
        options:
          type: array
          items:
            $ref: '#/components/schemas/SimpleFormFieldOption'
    GetConnectionResponse:
      type: object
      x-apideck-schema-id: GetConnectionResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Connection'
    GetConnectionsResponse:
      type: object
      x-apideck-schema-id: GetConnectionsResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
    GetConsumerResponse:
      type: object
      x-apideck-schema-id: GetConsumerResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Consumer'
    GetConsumersResponse:
      type: object
      x-apideck-schema-id: GetConsumersResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            type: object
            properties:
              consumer_id:
                type: string
                example: test_consumer_id
              application_id:
                type: string
                example: '1111'
              metadata:
                $ref: '#/components/schemas/ConsumerMetadata'
              aggregated_request_count:
                type: number
                example: 101
              request_counts:
                $ref: '#/components/schemas/RequestCountAllocation'
              created:
                type: string
                example: '2021-05-07T12:55:42.242Z'
              modified:
                type: string
                example: '2021-05-07T12:55:42.242Z'
              request_count_updated:
                type: string
                example: '2021-05-07T12:55:42.242Z'
              services:
                type: array
                items:
                  type: string
                  example: salesforce
                example:
                  - salesforce
                  - stripe
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetLogsResponse:
      type: object
      x-apideck-schema-id: GetLogsResponse
      required:
        - status_code
        - status
        - data
      x-graphql-type-name: LogList
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Log'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    Links:
      type: object
      x-apideck-schema-id: Links
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: 'https://unify.apideck.com/crm/companies'
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
          nullable: true
    Log:
      type: object
      x-apideck-schema-id: Log
      additionalProperties: false
      properties:
        api_style:
          description: Indicates if the request was made via REST or Graphql endpoint.
          example: REST
          type: string
        base_url:
          description: The Apideck base URL the request was made to.
          example: unify.apideck.com
          type: string
        child_request:
          description: Indicates whether or not this is a child or parent request.
          example: false
          type: boolean
        consumer_id:
          description: The consumer Id associated with the request.
          example: test-consumer
          type: string
        duration:
          description: The entire execution time in milliseconds it took to call the Apideck service provider.
          example: 2220.379304
          type: number
        error_message:
          description: 'If error occurred, this is brief explanation'
          example: Refresh token is invalid
          type: string
          nullable: true
        execution:
          description: The entire execution time in milliseconds it took to make the request.
          example: 2248
          type: integer
        has_children:
          description: 'When request is a parent request, this indicates if there are child requests associated.'
          example: false
          type: boolean
        http_method:
          description: HTTP Method of request.
          example: GET
          type: string
        id:
          description: UUID acting as Request Identifier.
          example: 0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f
          type: string
        latency:
          description: Latency added by making this request via Unified Api.
          example: 27.620695999999953
          type: number
        operation:
          additionalProperties: false
          description: The request as defined in OpenApi Spec.
          properties:
            id:
              description: The OpenApi Operation Id associated with the request
              example: connectionsAll
              type: string
            name:
              description: The OpenApi Operation name associated with the request
              example: Get All Connections
              type: string
          required:
            - id
            - name
          type: object
        parent_id:
          description: "When request is a child request, this UUID indicates it's parent request."
          example: 0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f
          type: string
          nullable: true
        path:
          description: The path component of the URI the request was made to.
          example: /vault/connections
          type: string
        sandbox:
          description: Indicates whether the request was made using Apidecks sandbox credentials or not.
          example: false
          type: boolean
        service:
          additionalProperties: false
          description: Apideck service provider associated with request.
          properties:
            id:
              description: Apideck service provider id.
              example: apideck-vault
              type: string
            name:
              description: Apideck service provider name.
              example: Apideck Vault
              type: string
          required:
            - id
            - name
          type: object
        source_ip:
          description: The IP address of the source of the request.
          example: 94.227.131.238
          type: string
          nullable: true
        status_code:
          description: HTTP Status code that was returned.
          example: 200
          type: integer
        success:
          description: Whether or not the request was successful.
          example: true
          type: boolean
        timestamp:
          description: ISO Date and time when the request was made.
          example: '2021-07-12T14:26:17.420Z'
          type: string
        unified_api:
          description: Which Unified Api request was made to.
          example: vault
          x-apideck-enum-id: logs.unified_api
          enum:
            - crm
            - lead
            - proxy
            - vault
            - accounting
            - hris
            - ats
            - pos
            - file-storage
            - sms
          type: string
      required:
        - id
        - parent_id
        - api_style
        - base_url
        - child_request
        - consumer_id
        - duration
        - execution
        - has_children
        - http_method
        - latency
        - operation
        - path
        - sandbox
        - service
        - status_code
        - success
        - timestamp
        - unified_api
    LogsFilter:
      type: object
      x-apideck-schema-id: LogsFilter
      x-graphql-type-name: LogsFilter
      properties:
        connector_id:
          type: string
          example: crm+salesforce
          nullable: true
        status_code:
          type: number
          example: 201
          nullable: true
        exclude_unified_apis:
          type: string
          nullable: true
          example: 'vault,proxy'
    Meta:
      type: object
      x-apideck-schema-id: Meta
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    NotFoundResponse:
      type: object
      x-apideck-schema-id: NotFound
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#entitynotfounderror'
    NotImplementedResponse:
      type: object
      x-apideck-schema-id: NotImplemented
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#mappingerror'
    OAuthGrantType:
      type: string
      x-apideck-enum-id: oauth_grant_types
      enum:
        - authorization_code
        - client_credentials
        - password
      example: authorization_code
      description: 'OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types'
      readOnly: true
    PaymentRequiredResponse:
      type: object
      x-apideck-schema-id: PaymentRequired
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestlimiterror'
    ProxyRequest:
      type: object
      x-apideck-schema-id: ProxyRequest
      properties: {}
      example:
        account_sid: ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        api_version: '2010-04-01'
        body: This is the ship that made the Kessel Run in fourteen parsecs?
        date_created: 'Thu, 30 Jul 2015 20:12:31 +0000'
        date_sent: 'Thu, 30 Jul 2015 20:12:33 +0000'
        date_updated: 'Thu, 30 Jul 2015 20:12:33 +0000'
        direction: outbound-api
        from: '+15017122661'
        messaging_service_sid: MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        num_media: '0'
        num_segments: '1'
        sid: SMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        status: sent
        subresource_uris:
          media: /2010-04-01/Accounts/ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Messages/SMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Media.json
        to: '+15558675310'
        uri: /2010-04-01/Accounts/ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/Messages/SMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.json
    RequestCountAllocation:
      type: object
      x-apideck-schema-id: RequestCountAllocation
      properties:
        unify:
          type: number
          example: 100
        proxy:
          type: number
          example: 10
        vault:
          type: number
          example: 21
    Session:
      type: object
      x-apideck-schema-id: Session
      additionalProperties: false
      properties:
        consumer_metadata:
          $ref: '#/components/schemas/ConsumerMetadata'
        custom_consumer_settings:
          additionalProperties: true
          description: Custom consumer settings that are passed as part of the session.
          example:
            feature_flag_1: true
            tax_rates:
              - id: '6'
                label: 6%
              - id: '21'
                label: 21%
          title: Custom consumer settings
          type: object
        redirect_uri:
          example: 'https://mysaas.com/dashboard'
          type: string
        settings:
          additionalProperties: false
          properties:
            unified_apis:
              type: array
              items:
                $ref: '#/components/schemas/UnifiedApiId'
              description: Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omitting this field will show all Unified APIs.
            hide_resource_settings:
              title: Hide resource settings
              default: false
              type: boolean
              description: 'A boolean that controls the display of the configurable resources for an integration. When set to true, the resource configuration options will be hidden and not shown to the user. When set to false, the resource configuration options will be displayed to the user.'
            sandbox_mode:
              title: Sandbox mode
              default: false
              type: boolean
              description: 'Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.'
            isolation_mode:
              title: Isolation mode
              type: boolean
              default: false
              description: 'Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.'
            session_length:
              title: Session Length
              default: 1h
              description: The duration of time the session is valid for (maximum 1 week).
              example: 30m
              type: string
            show_logs:
              title: Show logs
              default: true
              type: boolean
              description: 'Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.'
            show_suggestions:
              title: Show suggestions
              default: false
              type: boolean
              description: 'Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `false`.'
            show_sidebar:
              title: Show sidebar
              default: true
              type: boolean
              description: 'Configure [Vault](/apis/vault/reference#section/Get-Started) to show the sidebar. Defaults to `true`.'
            auto_redirect:
              title: Auto-redirect
              default: false
              type: boolean
              description: Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.
          type: object
          x-graphql-type-name: SessionSettings
        theme:
          properties:
            favicon:
              example: 'https://res.cloudinary.com/apideck/icons/intercom'
              type: string
            primary_color:
              example: '#286efa'
              type: string
            privacy_url:
              example: 'https://compliance.apideck.com/privacy-policy'
              type: string
            sidepanel_background_color:
              example: '#286efa'
              type: string
            sidepanel_text_color:
              example: '#FFFFFF'
              type: string
            terms_url:
              example: 'https://www.termsfeed.com/terms-conditions/957c85c1b089ae9e3219c83eff65377e'
              type: string
            vault_name:
              example: Intercom
              type: string
          type: object
    SimpleFormFieldOption:
      type: object
      x-apideck-schema-id: SimpleFormFieldOption
      properties:
        label:
          type: string
          example: General Channel
        value:
          anyOf:
            - type: string
              example: general
            - type: integer
              example: 123
            - type: number
              example: 12.5
            - type: boolean
              example: true
            - type: array
              items:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
              example:
                - team
                - general
    UnauthorizedResponse:
      type: object
      x-apideck-schema-id: Unauthorized
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnexpectedErrorResponse:
      type: object
      x-apideck-schema-id: Error
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnifiedApiId:
      description: Name of Apideck Unified API
      x-apideck-enum-id: unified_api
      enum:
        - vault
        - lead
        - crm
        - accounting
        - file-storage
        - spreadsheet
        - email
        - script
        - sms
        - team-messaging
        - ecommerce
        - payroll
        - customer-support
        - time-registration
        - transactional-email
        - form
        - csp
        - email-marketing
        - ats
        - hris
        - pos
        - project-management
        - expense-management
        - calendar
        - procurement
      example: crm
      type: string
    UnprocessableResponse:
      type: object
      x-apideck-schema-id: Unprocessable
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: 'Unprocessable request, please verify your request headers and body.'
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#invalidstateerror'
    UpdateConnectionResponse:
      type: object
      x-apideck-schema-id: UpdateConnectionResponse
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Connection'
    VaultEventType:
      type: string
      x-apideck-enum-id: vault.events
      enum:
        - '*'
        - vault.connection.created
        - vault.connection.updated
        - vault.connection.disabled
        - vault.connection.deleted
        - vault.connection.callable
        - vault.connection.token_refresh.failed
      example: vault.connection.created
    WebhookSubscription:
      type: object
      x-apideck-schema-id: WebhookSubscription
      additionalProperties: false
      readOnly: true
      properties:
        downstream_id:
          type: string
          description: The ID of the downstream service
          example: 5f5f5f5f5f5f5f5f5f5f5f5f
        unify_event_types:
          type: array
          description: The list of Unify Events this connection is subscribed to
          items:
            type: string
            description: The Unify Event Type
            example: crm.contact.created
        downstream_event_types:
          type: array
          description: The list of downstream Events this connection is subscribed to
          items:
            type: string
            description: The Downstream Event Type
            example: contacts.CREATED
        execute_url:
          type: string
          description: The URL the downstream is sending to when the event is triggered
          example: 'https://unify.apideck.com/webhook/w/{lookupIdToken}/{serviceId}?e={downstreamEventType}'
        created_at:
          type: string
          description: The date and time the webhook subscription was created downstream
          example: '2020-10-01T12:00:00.000Z'
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
      description: Bad Request
    ConsumerRequestCountsInDateRangeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerRequestCountsInDateRangeResponse'
      description: Consumers Request Counts within Date Range
    CreateConnectionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateConnectionResponse'
      description: Connection created
    Created:
      content:
        application/json:
          example: {}
          schema: {}
      description: Resource created
    CreateSessionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSessionResponse'
      description: Session created
    Deleted:
      content:
        application/json:
          example: {}
          schema: {}
      description: Resource successfully deleted
    GetConnectionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectionResponse'
      description: Connection
    GetConnectionsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConnectionsResponse'
      description: Connections
    GetConsumerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConsumerResponse'
      description: Consumer
    GetConsumersResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetConsumersResponse'
      description: Consumers
    GetLogsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetLogsResponse'
      description: Logs
    NoContent:
      content:
        application/json:
          example: {}
          schema: {}
      description: No content
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
      description: Not Implemented
    Ok:
      content:
        application/json:
          example: {}
          schema: {}
      description: Ok
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
      description: Payment Required
    ProxyError:
      content:
        application/json:
          schema: {}
      description: Proxy error
      headers:
        x-apideck-downstream-error:
          schema:
            description: Indicates if the error returned in the body is from the downstream
            type: boolean
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
      description: Unprocessable
    UpdateConnectionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConnectionResponse'
      description: Connection updated
    Updated:
      content:
        application/json:
          example: {}
          schema: {}
      description: Resource updated
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
    applicationId:
      type: apiKey
      in: header
      name: x-apideck-app-id
      description: The ID of your Unify application
security:
  - apiKey: []
    applicationId: []
paths:
  /vault/consumers:
    get:
      summary: Get all consumers
      operationId: consumersAll
      x-graphql-field-name: consumers
      description: |
        This endpoint includes all application consumers, along with an aggregated count of requests made.
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumersResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.vault.consumersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/consumers/{consumer_id}':
    get:
      summary: Get consumer
      operationId: consumersOne
      x-graphql-field-name: consumer
      description: |
        Consumer detail including their aggregated counts with the connections they have authorized.
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/consumer_id'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumerResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.vault.consumersOne({
                consumerId: 'test_user_id'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/consumers/{consumer_id}/stats':
    get:
      summary: Consumer request counts
      operationId: consumerRequestCountsAll
      x-graphql-field-name: consumerRequestCounts
      description: |
        Get consumer request counts within a given datetime range.
      tags:
        - Consumers
      parameters:
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/consumer_id'
        - $ref: '#/components/parameters/start_datetime'
        - $ref: '#/components/parameters/end_datetime'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/ConsumerRequestCountsInDateRangeResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              consumerId: 'test_user_id',
              startDatetime: '2021-05-01T12:00:00.000Z',
              endDatetime: '2021-05-30T12:00:00.000Z'
            }

            try {
              const { data } = await apideck.vault.consumerRequestCountsAll(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /vault/connections:
    get:
      summary: Get all connections
      operationId: connectionsAll
      x-graphql-field-name: connections
      description: |
        This endpoint includes all the configured integrations and contains the required assets
        to build an integrations page where your users can install integrations.
        OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
      tags:
        - Connections
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/api'
        - $ref: '#/components/parameters/configured'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectionsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.vault.connectionsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/connections/{unified_api}/{service_id}':
    get:
      tags:
        - Connections
      summary: Get connection
      description: Get a connection
      operationId: connectionsOne
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.vault.connectionsOne({
                serviceId: 'pipedrive',
                unifiedApi: 'crm'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      summary: Create connection
      operationId: connectionsAdd
      description: |
        Create an authorized connection
      tags:
        - Connections
      x-graphql-exclude: true
      x-sdk-exclude: true
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      security:
        - apiKey: []
      requestBody:
        description: Fields that need to be persisted on the resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        '200':
          $ref: '#/components/responses/CreateConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              serviceId: 'pipedrive',
              unifiedApi: 'crm',
              connection: {
                enabled: true,
                settings: {
                  instance_url: 'https://eu28.salesforce.com',
                  api_key: '12345xxxxxx'
                },
                metadata: {
                  account: {
                    name: 'My Company',
                    id: 'c01458a5-7276-41ce-bc19-639906b0450a'
                  },
                  plan: 'enterprise'
                },
                configuration: [
                  {
                    resource: 'leads',
                    defaults: [
                      {
                        id: 'ProductInterest',
                        options: [Array],
                        value: 'GC5000 series'
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.vault.connectionsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Connections
      summary: Update connection
      description: Update a connection
      operationId: connectionsUpdate
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      security:
        - apiKey: []
      requestBody:
        description: Fields that need to be updated on the resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        '200':
          $ref: '#/components/responses/UpdateConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              serviceId: 'pipedrive',
              unifiedApi: 'crm',
              connection: {
                enabled: true,
                settings: {
                  instance_url: 'https://eu28.salesforce.com',
                  api_key: '12345xxxxxx'
                },
                metadata: {
                  account: {
                    name: 'My Company',
                    id: 'c01458a5-7276-41ce-bc19-639906b0450a'
                  },
                  plan: 'enterprise'
                },
                configuration: [
                  {
                    resource: 'leads',
                    defaults: [
                      {
                        id: 'ProductInterest',
                        options: [Array],
                        value: 'GC5000 series'
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.vault.connectionsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Connections
      summary: Deletes a connection
      description: Deletes a connection
      operationId: connectionsDelete
      x-graphql-field-name: connectionsDelete
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      security:
        - apiKey: []
      responses:
        '204':
          description: Resource deleted
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.vault.connectionsDelete({
                serviceId: 'pipedrive',
                unifiedApi: 'crm'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/connections/{unified_api}/{service_id}/import':
    post:
      summary: Import connection
      operationId: connectionsImport
      description: |
        Import an authorized connection.
      tags:
        - Connections
      x-graphql-exclude: true
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      security:
        - apiKey: []
      requestBody:
        description: Fields that need to be persisted on the resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionImportData'
      responses:
        '200':
          $ref: '#/components/responses/CreateConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              serviceId: 'pipedrive',
              unifiedApi: 'crm',
              connection: {
                credentials: {
                  access_token:
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
                  refresh_token:
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ'
                },
                settings: {
                  instance_url: 'https://eu28.salesforce.com'
                },
                metadata: {
                  account: {
                    name: 'My Company',
                    id: 'c01458a5-7276-41ce-bc19-639906b0450a'
                  },
                  plan: 'enterprise'
                }
              }
            }

            try {
              const { data } = await apideck.vault.connectionsImport(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/connections/{unified_api}/{service_id}/token':
    post:
      tags:
        - Connections
      summary: Get Access Token
      operationId: connectionsToken
      x-graphql-exclude: true
      x-sdk-exclude: true
      description: |
        Get an access token for a connection and store it in Vault. Currently only supported for connections with the client_credentials OAuth grant type.

        Note that the access token will not be returned in the response. A 200 response code indicates a valid access token was stored on the connection.
      security:
        - apiKey: []
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
              additionalProperties: false
      responses:
        '200':
          $ref: '#/components/responses/GetConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              serviceId: 'pipedrive',
              unifiedApi: 'crm',
              connectionsToken: {}
            }

            try {
              const { data } = await apideck.vault.connectionsToken(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/connections/{unified_api}/{service_id}/{resource}/config':
    get:
      tags:
        - Connections
      summary: Get resource settings
      x-graphql-field-name: connectionSettings
      description: |
        This endpoint returns custom settings and their defaults required by connection for a given resource.
      operationId: connectionSettingsAll
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/unified_api'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/resource'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              unifiedApi: 'crm',
              serviceId: 'pipedrive',
              resource: 'leads'
            }

            try {
              const { data } = await apideck.vault.connectionSettingsAll(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Connections
      summary: Update settings
      description: Update default values for a connection's resource settings
      operationId: connectionSettingsUpdate
      x-graphql-field-name: connectionSettingsUpdate
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/unified_api'
        - $ref: '#/components/parameters/resource'
      security:
        - apiKey: []
      requestBody:
        description: Fields that need to be updated on the resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      responses:
        '200':
          $ref: '#/components/responses/UpdateConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              serviceId: 'pipedrive',
              unifiedApi: 'crm',
              resource: 'leads',
              connection: {
                enabled: true,
                settings: {
                  instance_url: 'https://eu28.salesforce.com',
                  api_key: '12345xxxxxx'
                },
                metadata: {
                  account: {
                    name: 'My Company',
                    id: 'c01458a5-7276-41ce-bc19-639906b0450a'
                  },
                  plan: 'enterprise'
                },
                configuration: [
                  {
                    resource: 'leads',
                    defaults: [
                      {
                        id: 'ProductInterest',
                        options: [Array],
                        value: 'GC5000 series'
                      }
                    ]
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.vault.connectionSettingsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/authorize/{service_id}/{application_id}':
    get:
      tags:
        - Connections
      summary: Authorize
      operationId: connectionsAuthorize
      x-graphql-exclude: true
      x-sdk-exclude: true
      description: |
        __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__

        Use this endpoint to authenticate a user with a connector. It will return a 301 redirect to the downstream connector endpoints.

        Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.

        Vault handles the complete Authorization Code Grant Type Flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
      parameters:
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/application_id'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/redirect_uri'
        - $ref: '#/components/parameters/scope'
      security: []
      responses:
        '301':
          description: redirect
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY'
            })

            const params = {
              serviceId: 'pipedrive',
              applicationId: 'dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX',
              state:
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsInVuaWZpZWRfYXBpIjoiZGVmYXVsdCIsInNlcnZpY2VfaWQiOiJ0ZWFtbGVhZGVyIiwiYXBwbGljYXRpb25faWQiOiIxMTExIiwiaWF0IjoxNjIyMTI2Nzg3fQ.97_pn1UAXc7mctXBdr15czUNO1jjdQ9sJUOIE_Myzbk',
              redirectUri: 'http://example.com/integrations'
            }

            try {
              const { data } = await apideck.vault.connectionsAuthorize(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/vault/revoke/{service_id}/{application_id}':
    get:
      tags:
        - Connections
      summary: Revoke connection
      operationId: connectionsRevoke
      x-graphql-exclude: true
      x-sdk-exclude: true
      description: |
        __In most cases the authorize link is provided in the ``/connections`` endpoint. Normally you don't need to manually generate these links.__

        Use this endpoint to revoke an existing OAuth connector.

        Auth links will have a state parameter included to verify the validity of the request. This is the url your users will use to activate OAuth supported integration providers.

        Vault handles the complete revoke flow for you and will redirect you to the dynamic redirect uri you have appended to the url in case this is missing the default redirect uri you have configured for your Unify application.
      parameters:
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/application_id'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/redirect_uri'
      security: []
      responses:
        '301':
          description: redirect
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY'
            })

            const params = {
              serviceId: 'pipedrive',
              applicationId: 'dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX',
              state:
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsInVuaWZpZWRfYXBpIjoiZGVmYXVsdCIsInNlcnZpY2VfaWQiOiJ0ZWFtbGVhZGVyIiwiYXBwbGljYXRpb25faWQiOiIxMTExIiwiaWF0IjoxNjIyMTI2Nzg3fQ.97_pn1UAXc7mctXBdr15czUNO1jjdQ9sJUOIE_Myzbk',
              redirectUri: 'http://example.com/integrations'
            }

            try {
              const { data } = await apideck.vault.connectionsRevoke(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /vault/callback:
    get:
      tags:
        - Connections
      summary: Callback
      operationId: connectionsCallback
      x-graphql-exclude: true
      x-sdk-exclude: true
      description: |
        This endpoint gets called after the triggering the authorize flow.

        Callback links need a state and code parameter to verify the validity of the request.
      parameters:
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/code'
      security: []
      responses:
        '301':
          description: callback
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY'
            })

            const params = {
              state:
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsInVuaWZpZWRfYXBpIjoiZGVmYXVsdCIsInNlcnZpY2VfaWQiOiJ0ZWFtbGVhZGVyIiwiYXBwbGljYXRpb25faWQiOiIxMTExIiwiaWF0IjoxNjIyMTI2Nzg3fQ.97_pn1UAXc7mctXBdr15czUNO1jjdQ9sJUOIE_Myzbk',
              code: 'g0ZGZmNjVmOWI'
            }

            try {
              const { data } = await apideck.vault.connectionsCallback(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /vault/sessions:
    post:
      summary: Create Session
      operationId: sessionsCreate
      description: |
        Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
        url to allow temporary access to manage their integrations and settings.

        Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
      tags:
        - Sessions
      parameters:
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/x-apideck-app-id'
      security:
        - apiKey: []
      requestBody:
        description: Additional redirect uri and/or consumer metadata
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          $ref: '#/components/responses/CreateSessionResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              session: {
                consumer_metadata: {
                  account_name: 'SpaceX',
                  user_name: 'Elon Musk',
                  email: 'elon@musk.com',
                  image: 'https://www.spacex.com/static/images/share.jpg'
                },
                custom_consumer_settings: {
                  feature_flag_1: true,
                  tax_rates: [
                    {
                      id: '6',
                      label: '6%'
                    },
                    {
                      id: '21',
                      label: '21%'
                    }
                  ]
                },
                redirect_uri: 'https://mysaas.com/dashboard',
                settings: {
                  unified_apis: ['crm'],
                  hide_resource_settings: false,
                  sandbox_mode: false,
                  isolation_mode: false,
                  session_length: '30m',
                  show_logs: true,
                  show_suggestions: false,
                  show_sidebar: true,
                  auto_redirect: false
                },
                theme: {
                  favicon: 'https://res.cloudinary.com/apideck/icons/intercom',
                  primary_color: '#286efa',
                  privacy_url: 'https://compliance.apideck.com/privacy-policy',
                  sidepanel_background_color: '#286efa',
                  sidepanel_text_color: '#FFFFFF',
                  terms_url: 'https://www.termsfeed.com/terms-conditions/957c85c1b089ae9e3219c83eff65377e',
                  vault_name: 'Intercom'
                }
              }
            }

            try {
              const { data } = await apideck.vault.sessionsCreate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /vault/logs:
    get:
      summary: Get all consumer request logs
      operationId: logsAll
      x-graphql-field-name: logs
      description: |
        This endpoint includes all consumer request logs.
      tags:
        - Logs
      parameters:
        - $ref: '#/components/parameters/x-apideck-app-id'
        - $ref: '#/components/parameters/x-apideck-consumer-id'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetLogsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: vault
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.vault.logsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  x-sdk-exclude: true
  ConnectionCreated:
    post:
      summary: Connection Created
      description: Connection Created
      operationId: connectionCreated
      x-apideck-event-type: vault.connection.created
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ConnectionUpdated:
    post:
      summary: Connection Updated
      description: Connection Updated
      operationId: connectionUpdated
      x-apideck-event-type: vault.connection.updated
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ConnectionDisabled:
    post:
      summary: Connection Disabled
      description: Connection Disabled
      operationId: connectionDisabled
      x-apideck-event-type: vault.connection.disabled
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ConnectionDeleted:
    post:
      summary: Connection Deleted
      description: Connection Deleted
      operationId: connectionDeleted
      x-apideck-event-type: vault.connection.deleted
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ConnectionCallable:
    post:
      summary: Connection Callable
      description: Connection Callable
      operationId: connectionCallable
      x-apideck-event-type: vault.connection.callable
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  TokenRefreshFailed:
    post:
      summary: Token Refresh Failed
      description: Attempt to refresh the connections access_token failed.
      operationId: connectionTokenRefreshFailed
      x-apideck-event-type: vault.connection.token_refresh.failed
      parameters:
        - name: x-apideck-event-type
          in: header
          required: true
          description: The type of event that was triggered
          schema:
            $ref: '#/components/schemas/VaultEventType'
      tags:
        - Webhook Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionEvent'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
