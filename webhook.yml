openapi: 3.0.3
info:
  version: 8.3.2
  title: Webhook API
  description: Welcome to the Webhook API.
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  x-apideck-api: webhook
  x-apideck-sdk-support: true
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Apideck Developer Docs
  url: 'https://developers.apideck.com'
servers:
  - url: 'https://unify.apideck.com'
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
    serviceId:
      in: path
      name: serviceId
      schema:
        type: string
      required: true
      description: Service provider ID.
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    webhookToken:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: JWT Webhook token that represents the unifiedApi and applicationId associated to the event source.
    limit:
      name: limit
      in: query
      description: Number of records to return
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
    filter:
      name: filter
      in: query
      description: Filter results
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/WebhookEventLogsFilter'
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    ExecuteWebhookResponse:
      description: Execute Webhook
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExecuteWebhookResponse'
    CreateWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWebhookResponse'
    DeleteWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteWebhookResponse'
    GetWebhookEventLogsResponse:
      description: EventLogs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWebhookEventLogsResponse'
    GetWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWebhookResponse'
    GetWebhooksResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWebhooksResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    NotImplementedResponse:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
    UnprocessableResponse:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
    UpdateWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWebhookResponse'
  schemas:
    CreateWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    CreateWebhookRequest:
      type: object
      additionalProperties: false
      required:
        - delivery_url
        - status
        - events
        - unified_api
      properties:
        description:
          $ref: '#/components/schemas/Description'
        unified_api:
          $ref: '#/components/schemas/UnifiedApiId'
        status:
          $ref: '#/components/schemas/Status'
        delivery_url:
          $ref: '#/components/schemas/DeliveryUrl'
        events:
          type: array
          title: Subscribed events
          description: 'The list of subscribed events for this webhook. [’*’] indicates that all events are enabled.'
          example:
            - vault.connection.created
            - vault.connection.updated
          items:
            $ref: '#/components/schemas/WebhookEventType'
    DeleteWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    GetWebhookEventLogsResponse:
      x-graphql-type-name: EventLogList
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebhookEventLog'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    GetWebhookResponse:
      x-graphql-type-name: Webhook
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    GetWebhooksResponse:
      x-graphql-type-name: WebhookList
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    UpdateWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    UpdateWebhookRequest:
      type: object
      additionalProperties: false
      properties:
        description:
          $ref: '#/components/schemas/Description'
        status:
          $ref: '#/components/schemas/Status'
        delivery_url:
          $ref: '#/components/schemas/DeliveryUrl'
        events:
          type: array
          title: Subscribed events
          description: 'The list of subscribed events for this webhook. [’*’] indicates that all events are enabled.'
          example:
            - vault.connection.created
            - vault.connection.updated
          items:
            $ref: '#/components/schemas/WebhookEventType'
    ExecuteWebhookEventRequest:
      type: object
      additionalProperties: true
    ExecuteWebhookEventsRequest:
      type: array
      items:
        type: object
        additionalProperties: true
    ExecuteWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        request_id:
          type: string
          description: UUID of the request received
          example: c6af9ac6-7b61-11e6-9a41-93e8deadbeef
        timestamp:
          type: string
          description: ISO Dtae time webhook event was received
          example: '2021-10-01T08:26:28.039Z'
    Webhook:
      type: object
      additionalProperties: false
      required:
        - delivery_url
        - status
        - events
        - unified_api
        - execute_base_url
      properties:
        id:
          type: string
          example: '1234'
          readOnly: true
        description:
          $ref: '#/components/schemas/Description'
        unified_api:
          $ref: '#/components/schemas/UnifiedApiId'
        status:
          $ref: '#/components/schemas/Status'
        delivery_url:
          $ref: '#/components/schemas/DeliveryUrl'
        execute_base_url:
          $ref: '#/components/schemas/ExecuteBaseUrl'
        events:
          type: array
          title: Subscribed events
          description: 'The list of subscribed events for this webhook. [’*’] indicates that all events are enabled.'
          example:
            - vault.connection.created
            - vault.connection.updated
          items:
            $ref: '#/components/schemas/WebhookEventType'
        updated_at:
          $ref: '#/components/schemas/UpdatedAt'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    WebhookEventLog:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: 1d174c4d-fe9e-4377-a76c-6da22fe9cd87
        status_code:
          description: HTTP Status code that was returned.
          example: 200
          type: integer
        success:
          description: Whether or not the request was successful.
          example: true
          type: boolean
        application_id:
          $ref: '#/components/schemas/ApplicationId'
        consumer_id:
          $ref: '#/components/schemas/ConsumerId'
        unified_api:
          $ref: '#/components/schemas/UnifiedApiId'
        service:
          additionalProperties: false
          description: Apideck service provider associated with event.
          properties:
            id:
              description: Apideck service provider id.
              example: 101-data-solution
              type: string
            name:
              description: Apideck service provider name.
              example: 101 Data Solution
              type: string
          required:
            - id
            - name
          type: object
        endpoint:
          type: string
          format: uri
          description: The URL of the webhook endpoint.
          pattern: '^(https?)://'
          example: 'https://example.com/my/webhook/endpoint'
        event_type:
          type: string
          description: Name of source event that webhook is subscribed to.
          example: vault.connection.updated
        execution_attempt:
          type: number
          description: Number of attempts webhook endpoint was called before a success was returned or eventually failed
          example: 3
        http_method:
          description: HTTP Method of request to endpoint.
          example: GET
          type: string
        timestamp:
          description: ISO Date and time when the request was made.
          example: '2021-07-12T14:26:17.420Z'
          type: string
        entity_type:
          type: string
          description: Name of the Entity described by the attributes delivered within payload
          example: Connection
        request_body:
          type: string
          description: The JSON stringified payload that was delivered to the webhook endpoint.
          example: '{"entity":{"id":"2222+test_user_id","application_id":"2222","consumer_id":"test_user_id","name":"ActiveCampaign","icon":"https://res.cloudinary.com/apideck/image/upload/v1529455970/catalog/activecampaign/icon128x128.png","logo":"https://www.activecampaign.com/site/assets/social-2x.png","unified_api":"crm","service_id":"activecampaign","auth_type":"apiKey","enabled":true,"tag_line":"Integrated email marketing, marketing automation, and small business CRM. Save time while growing your business with sales automation.","website":"https://www.activecampaign.com/","settings":{"instance_url":"https://eu28.salesforce.com","base_url":"https://updated.api-us1.com"},"metadata":{"plan":"enterprise","account":{"name":"My Company"}},"state":"callable","created_at":"2021-09-10T10:39:49.628Z","updated_at":"2021-09-10T10:39:52.715Z"},"entityType":"Connection"}'
        response_body:
          type: string
          description: The JSON stringified response that was returned from the webhook endpoint.
          example: '{"status":"OK"}'
        retry_scheduled:
          description: If the request has not hit the max retry limit and will be retried.
          example: true
          type: boolean
        attempts:
          type: array
          description: record of each attempt to call webhook endpoint
          items:
            type: object
            properties:
              timestamp:
                description: ISO Date and time when the request was made.
                example: '2021-07-12T14:26:17.420Z'
                type: string
              execution_attempt:
                type: number
                description: Number of attempts webhook endpoint was called before a success was returned or eventually failed
                example: 3
              status_code:
                description: HTTP Status code that was returned.
                example: 200
                type: integer
              success:
                description: Whether or not the request was successful.
                example: true
                type: boolean
    WebhookEventLogsFilter:
      type: object
      x-graphql-type-name: WebhookEventLogsFilter
      properties:
        exclude_apis:
          type: string
          nullable: true
          example: 'vault,proxy'
        service:
          type: object
          nullable: true
          properties:
            id:
              type: string
        consumer_id:
          type: string
          nullable: true
          example: test_user_id
        entity_type:
          type: string
          nullable: true
          example: Connection
        event_type:
          type: string
          nullable: true
          example: vault.connection.callable
    Meta:
      type: object
      description: Response metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    Links:
      type: object
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: 'https://unify.apideck.com/crm/companies'
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
          nullable: true
    NotFoundResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#entitynotfounderror'
    UnauthorizedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnprocessableResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: State did not include unified_api
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#invalidstateerror'
    BadRequestResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestbodyvalidationerror'
    PaymentRequiredResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestlimiterror'
    NotImplementedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#mappingerror'
    UnexpectedErrorResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occurred.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    ApplicationId:
      type: string
      description: ID of your Apideck Application
      example: '1111'
    ServiceId:
      type: string
      description: Service provider identifier
      example: close
    ConsumerId:
      type: string
      example: test_consumer_id
      description: Consumer identifier
    CreatedAt:
      type: string
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    UpdatedAt:
      type: string
      format: date-time
      example: '2020-09-30T07:43:32.000Z'
      readOnly: true
    UnifiedApiId:
      description: Name of Apideck Unified API
      enum:
        - vault
        - lead
        - crm
        - accounting
        - file-storage
        - spreadsheet
        - email
        - script
        - sms
        - team-messaging
        - ecommerce
        - payroll
        - customer-support
        - time-registration
        - transactional-email
        - hcm
        - form
        - csp
        - email-marketing
        - ats
        - hris
      example: crm
      type: string
    Description:
      type: string
      title: Description
      example: A description
      nullable: true
    Status:
      type: string
      description: The status of the webhook.
      example: enabled
      enum:
        - enabled
        - disabled
    DeliveryUrl:
      type: string
      format: uri
      description: The delivery url of the webhook endpoint.
      pattern: '^(https?)://'
      example: 'https://example.com/my/webhook/endpoint'
    ExecuteBaseUrl:
      type: string
      format: uri
      description: The Unify Base URL events from connectors will be sent to after service id is appended.
      pattern: '^(https?)://'
      readOnly: true
      example: 'https://unify.apideck.com/webhook/webhooks/1234/execute'
    WebhookEvent:
      type: object
      x-sdk-exclude: true
      properties:
        event_id:
          type: string
          description: Unique reference to this request event
          example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
        service_id:
          $ref: '#/components/schemas/ServiceId'
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        entity_id:
          type: string
          description: The service provider's ID of the entity that triggered this event
          example: 123456ASDF
        entity_type:
          type: string
          description: The type entity that triggered this event
          example: Company
        entity_url:
          type: string
          description: The url to retrieve entity detail.
          example: 'https://unify.apideck.com/crm/contacts/123456'
        execution_attempt:
          type: number
          description: The current count this request event has been attempted
          example: 2
        occurred_at:
          type: string
          description: ISO Datetime for when the original event occurred
          example: '2021-10-01T03:14:55.419Z'
    WebhookEventType:
      type: string
      enum:
        - '*'
        - crm.activity.created
        - crm.activity.updated
        - crm.activity.deleted
        - crm.company.created
        - crm.company.updated
        - crm.company.deleted
        - crm.contact.created
        - crm.contact.updated
        - crm.contact.deleted
        - crm.lead.created
        - crm.lead.updated
        - crm.lead.deleted
        - crm.note.created
        - crm.notes.updated
        - crm.notes.deleted
        - crm.opportunity.created
        - crm.opportunity.updated
        - crm.opportunity.deleted
        - lead.lead.created
        - lead.lead.updated
        - lead.lead.deleted
        - vault.connection.created
        - vault.connection.updated
        - vault.connection.deleted
        - vault.connection.callable
      example: crm.company.created
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Webhooks
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Webhook'
paths:
  /webhook/webhooks:
    get:
      tags:
        - Webhooks
      x-graphql-field-name: webhooks
      operationId: webhooksAll
      summary: List webhooks
      description: List webhooks
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetWebhooksResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Webhooks
      operationId: webhooksAdd
      summary: Create webhook
      description: Create webhook
      parameters:
        - $ref: '#/components/parameters/applicationId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              webhook: {
                description: 'A description',
                unified_api: 'crm',
                status: 'enabled',
                delivery_url: 'https://example.com/my/webhook/endpoint',
                events: ['vault.connection.created', 'vault.connection.updated']
              }
            }

            try {
              const { data } = await apideck.webhook.webhooksAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/webhook/webhooks/{id}':
    get:
      tags:
        - Webhooks
      operationId: webhooksOne
      summary: Get webhook
      description: Get webhook
      parameters:
        - $ref: '#/components/parameters/webhookToken'
        - $ref: '#/components/parameters/applicationId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Webhooks
      operationId: webhooksUpdate
      summary: Update webhook
      description: Update webhook
      parameters:
        - $ref: '#/components/parameters/webhookToken'
        - $ref: '#/components/parameters/applicationId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          $ref: '#/components/responses/UpdateWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              webhook: {
                description: 'A description',
                status: 'enabled',
                delivery_url: 'https://example.com/my/webhook/endpoint',
                events: ['vault.connection.created', 'vault.connection.updated']
              }
            }

            try {
              const { data } = await apideck.webhook.webhooksUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Webhooks
      operationId: webhooksDelete
      summary: Delete webhook
      description: Delete webhook
      parameters:
        - $ref: '#/components/parameters/webhookToken'
        - $ref: '#/components/parameters/applicationId'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/webhook/webhooks/{id}/execute/{serviceId}':
    post:
      tags:
        - Webhooks
      operationId: webhooksExecute
      summary: Execute a webhook
      description: Execute a webhook
      x-graphql-exclude: true
      x-sdk-exclude: true
      parameters:
        - $ref: '#/components/parameters/webhookToken'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ExecuteWebhookEventRequest'
                - $ref: '#/components/schemas/ExecuteWebhookEventsRequest'
      responses:
        '200':
          $ref: '#/components/responses/ExecuteWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY'
            })

            const params = {
              id: 'id_example',
              serviceId: 'serviceId_example',
              webhooksExecute: {}
            }

            try {
              const { data } = await apideck.webhook.webhooksExecute(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /webhook/logs:
    get:
      tags:
        - Webhooks
      x-graphql-field-name: eventLogs
      operationId: eventLogsAll
      summary: List event logs
      description: List event logs
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/filter'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetWebhookEventLogsResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.eventLogsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
