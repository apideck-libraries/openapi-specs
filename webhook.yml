openapi: 3.0.0
info:
  version: 5.6.0
  title: Webhook API
  description: Welcome to the Webhook API.
  contact:
    email: hello@apideck.com
    url: 'https://developers.apideck.com'
  x-logo:
    url: 'https://developers.apideck.com/icon.png'
  x-apideck-api: webhook
  x-apideck-sdk-support: true
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Apideck Developer Docs
  url: 'https://developers.apideck.com'
servers:
  - url: 'https://unify.apideck.com'
components:
  parameters:
    applicationId:
      name: x-apideck-app-id
      in: header
      required: true
      description: The ID of your Unify application
      schema:
        type: string
    serviceId:
      name: x-apideck-service-id
      in: header
      description: 'Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.'
      schema:
        type: string
    consumerId:
      name: x-apideck-consumer-id
      in: header
      required: true
      description: ID of the consumer which you want to get or push data from
      schema:
        type: string
    raw:
      name: raw
      in: query
      description: Include raw response. Mostly used for debugging purposes
      schema:
        type: boolean
        default: true
    id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: ID of the record you are acting upon.
    limit:
      name: limit
      in: query
      description: Number of records to return
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    cursor:
      name: cursor
      in: query
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      schema:
        type: string
        nullable: true
  responses:
    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
    CreateWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWebhookResponse'
    DeleteWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteWebhookResponse'
    GetWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWebhookResponse'
    GetWebhooksResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWebhooksResponse'
    NotFoundResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
    NotImplementedResponse:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotImplementedResponse'
    PaymentRequiredResponse:
      description: Payment Required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentRequiredResponse'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedResponse'
    UnexpectedErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnexpectedErrorResponse'
    UnprocessableResponse:
      description: Unprocessable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnprocessableResponse'
    UpdateWebhookResponse:
      description: Webhooks
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWebhookResponse'
  schemas:
    UnifiedId:
      title: UnifiedId
      required:
        - id
      properties:
        id:
          type: string
          readOnly: true
          example: '12345'
    CreateWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    DeleteWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    GetWebhookResponse:
      x-graphql-type-name: Webhook
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    GetWebhooksResponse:
      x-graphql-type-name: WebhookList
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/Links'
    UpdateWebhookResponse:
      type: object
      required:
        - status_code
        - status
        - data
      properties:
        status_code:
          type: integer
          description: HTTP Response Status Code
          example: 200
        status:
          type: string
          description: HTTP Response Status
          example: OK
        data:
          $ref: '#/components/schemas/Webhook'
    Webhook:
      type: object
      additionalProperties: false
      required:
        - url
        - status
        - events
      properties:
        id:
          type: string
          example: '1234'
          readOnly: true
        description:
          type: string
          description: An optional description of what the webhook is used for.
          example: This is a webhook. It listens to connection events
        status:
          type: string
          description: The status of the webhook.
          example: enabled
          enum:
            - enabled
            - disabled
        url:
          type: string
          format: uri
          description: The URL of the webhook endpoint.
          pattern: '^(https?)://'
          example: 'https://example.com/my/webhook/endpoint'
        updated_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2020-09-30T07:43:32.000Z'
          readOnly: true
        events:
          type: array
          title: Subscribed events
          description: 'The list of subscribed events for this webhook. [’*’] indicates that all events are enabled.'
          example:
            - vault.connection.created
            - vault.connection.updated
          items:
            type: string
            enum:
              - '*'
              - vault.connection.created
              - vault.connection.updated
    Meta:
      type: object
      description: Reponse metadata
      properties:
        items_on_page:
          type: integer
          description: Number of items returned in the data property of the response
          example: 50
        cursors:
          type: object
          description: Cursors to navigate to previous or next pages through the API
          properties:
            previous:
              type: string
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
            current:
              type: string
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
            next:
              type: string
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
    Links:
      type: object
      description: Links to navigate to previous or next pages through the API
      properties:
        previous:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
          nullable: true
        current:
          type: string
          description: Link to navigate to the current page through the API
          example: 'https://unify.apideck.com/crm/companies'
        next:
          type: string
          description: Link to navigate to the previous page through the API
          example: 'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
          nullable: true
    NotFoundResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
        type_name:
          type: string
          description: The type of error returned
          example: EntityNotFoundError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
        detail:
          anyOf:
            - type: string
              example: "Could not find widget with id: '123'"
            - type: object
              example:
                not_found:
                  entity: widget
                  id: '123'
          description: Contains parameter or domain specific information related to the error and why it occured.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#entitynotfounderror'
    UnauthorizedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
        type_name:
          type: string
          description: The type of error returned
          example: UnauthorizedError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
    UnprocessableResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
        type_name:
          type: string
          description: The type of error returned
          example: InvalidStateError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid State
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: State did not include unified_api
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#invalidstateerror'
    BadRequestResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: Missing property foobar
            - type: object
              example:
                missing:
                  - foobar: required
          description: Contains parameter or domain specific information related to the error and why it occured.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestbodyvalidationerror'
    PaymentRequiredResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
        type_name:
          type: string
          description: The type of error returned
          example: RequestLimitError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
        detail:
          type: string
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: You have reached your limit of 2000
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#requestlimiterror'
    NotImplementedResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 501
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
        type_name:
          type: string
          description: The type of error returned
          example: MappingError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
        detail:
          anyOf:
            - type: string
              example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#mappingerror'
    UnexpectedErrorResponse:
      properties:
        status_code:
          type: number
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
        type_name:
          type: string
          description: The type of error returned
          example: RequestHeadersValidationError
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: Invalid Params
        detail:
          anyOf:
            - type: string
              example: 'Missing Header: x-apideck-consumer-id'
            - type: object
              example:
                missing:
                  - x-apideck-consumer-id: required
          description: Contains parameter or domain specific information related to the error and why it occured.
        ref:
          type: string
          description: Link to documentation of error type
          example: 'https://developers.apideck.com/errors#unauthorizederror'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
security:
  - apiKey: []
tags:
  - name: Webhooks
    description: ''
    x-apideck-model:
      $ref: '#/components/schemas/Webhook'
paths:
  /webhook/webhooks:
    get:
      tags:
        - Webhooks
      x-graphql-field-name: webhooks
      operationId: webhooksAll
      summary: List webhooks
      description: List webhooks
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/cursor'
        - $ref: '#/components/parameters/limit'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetWebhooksResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    post:
      tags:
        - Webhooks
      operationId: webhooksAdd
      summary: Create webhook
      description: Create webhook
      parameters:
        - $ref: '#/components/parameters/raw'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '201':
          $ref: '#/components/responses/CreateWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              webhook: {
                description: 'This is a webhook. It listens to connection events',
                status: 'enabled',
                url: 'https://example.com/my/webhook/endpoint',
                events: ['vault.connection.created', 'vault.connection.updated']
              }
            }

            try {
              const { data } = await apideck.webhook.webhooksAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  '/webhook/webhooks/{id}':
    get:
      tags:
        - Webhooks
      operationId: webhooksOne
      summary: Get webhook
      description: Get webhook
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/GetWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      tags:
        - Webhooks
      operationId: webhooksUpdate
      summary: Update webhook
      description: Update webhook
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '200':
          $ref: '#/components/responses/UpdateWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            const params = {
              id: 'id_example',
              webhook: {
                description: 'This is a webhook. It listens to connection events',
                status: 'enabled',
                url: 'https://example.com/my/webhook/endpoint',
                events: ['vault.connection.created', 'vault.connection.updated']
              }
            }

            try {
              const { data } = await apideck.webhook.webhooksUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    delete:
      tags:
        - Webhooks
      operationId: webhooksDelete
      summary: Delete webhook
      description: Delete webhook
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/raw'
      security:
        - apiKey: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteWebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '402':
          $ref: '#/components/responses/PaymentRequiredResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '422':
          $ref: '#/components/responses/UnprocessableResponse'
        default:
          $ref: '#/components/responses/UnexpectedErrorResponse'
      x-apideck-api: webhook
      x-codeSamples:
        - lang: TypeScript
          label: Node
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID'
            })

            try {
              const { data } = await apideck.webhook.webhooksDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
x-webhooks:
  ConnectionCreated:
    post:
      summary: Connection Created
      description: Connection Created
      operationId: connectionCreated
      x-apideck-event-type: vault.connection.created
      tags:
        - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                type: object
                properties:
                  id:
                    type: string
                    example: lead+close
                    readOnly: true
                  service_id:
                    type: string
                    example: salesforce
                    readOnly: true
                  name:
                    type: string
                    example: Salesforce
                    readOnly: true
                  tag_line:
                    type: string
                    example: 'CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial.'
                    readOnly: true
                  unified_api:
                    type: string
                    example: crm
                    readOnly: true
                  website:
                    type: string
                    example: 'https://www.salesforce.com'
                    readOnly: true
                  icon:
                    type: string
                    example: 'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
                    readOnly: true
                  logo:
                    type: string
                    example: 'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
                    readOnly: true
                  settings:
                    type: object
                    description: Connection settings. Values will persist to `form_fields` with corresponding id
                    nullable: true
                    example:
                      instance_url: 'https://eu28.salesforce.com'
                  metadata:
                    type: object
                    description: Attach your own consumer specific metadata
                    additionalProperties: true
                    properties: {}
                    nullable: true
                    example:
                      account:
                        name: My Company
                        id: c01458a5-7276-41ce-bc19-639906b0450a
                      plan: enterprise
                  auth_type:
                    readOnly: true
                    type: string
                    enum:
                      - oauth2
                      - apiKey
                      - basic
                      - none
                  status:
                    type: string
                    enum:
                      - live
                      - upcoming
                      - requested
                    readOnly: true
                  form_fields:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: channel
                        label:
                          type: string
                          example: Channel
                        placeholder:
                          type: string
                          example: Select a channel
                          nullable: true
                        description:
                          type: string
                          example: Slack channel to push notification to
                          nullable: true
                        type:
                          enum:
                            - text
                            - checkbox
                            - tel
                            - email
                            - url
                            - textarea
                            - select
                            - filtered-select
                            - multi-select
                            - datetime
                            - date
                            - time
                            - number
                          example: select
                        required:
                          type: boolean
                          example: true
                        custom_field:
                          type: boolean
                          example: false
                        disabled:
                          type: boolean
                          nullable: true
                          example: false
                        options:
                          type: array
                          items:
                            $ref: '#/x-webhooks/ConnectionCreated/post/requestBody/content/application~1json/schema/properties/properties/configuration/items/properties/defaults/items/properties/options/items'
                          example:
                            - label: General Channel
                              value: general
                    example:
                      - id: instance_url
                        label: Instance url
                        value: 'https://eu28.salesforce.com'
                        placeholder: ''
                        mask: false
                        type: text
                        required: true
                        disabled: false
                        custom_field: false
                  configuration:
                    type: array
                    items:
                      type: object
                      properties:
                        resource:
                          type: string
                          example: leads
                        defaults:
                          type: array
                          items:
                            type: object
                            properties:
                              target:
                                type: string
                                enum:
                                  - custom_fields
                                  - resource
                                example: custom_fields
                                readOnly: true
                              id:
                                type: string
                                example: ProductInterest
                              options:
                                type: array
                                items:
                                  anyOf:
                                    - type: object
                                      properties:
                                        label:
                                          type: string
                                          example: General Channel
                                        value:
                                          anyOf:
                                            - type: string
                                              example: general
                                            - type: integer
                                              example: 123
                                            - type: number
                                              example: 12.5
                                            - type: boolean
                                              example: true
                                            - type: array
                                              items:
                                                anyOf:
                                                  - type: string
                                                  - type: integer
                                                  - type: number
                                              example:
                                                - team
                                                - general
                                    - type: object
                                      properties:
                                        id:
                                          type: string
                                          example: '1234'
                                        label:
                                          type: string
                                          example: General Channel
                                        options:
                                          type: array
                                          items:
                                            $ref: '#/x-webhooks/ConnectionCreated/post/requestBody/content/application~1json/schema/properties/properties/configuration/items/properties/defaults/items/properties/options/items/anyOf/0'
                              value:
                                anyOf:
                                  - type: string
                                    example: GC5000 series
                                  - type: integer
                                    example: 10
                                  - type: number
                                    example: 10.5
                                  - type: boolean
                                    example: true
                                  - type: array
                                    items:
                                      anyOf:
                                        - type: string
                                          example: GC6000 series
                                        - type: integer
                                          example: 10
                                        - type: number
                                          example: 10.5
                  configurable_resources:
                    type: array
                    items:
                      type: string
                    example:
                      - opportunities
                      - companies
                      - contacts
                      - leads
                    readOnly: true
                  resource_schema_support:
                    type: array
                    items:
                      type: string
                    readOnly: true
                    example:
                      - leads
                  resource_settings_support:
                    type: array
                    items:
                      type: string
                    readOnly: true
                    example:
                      - leads
                  settings_required_for_authorization:
                    type: array
                    items:
                      type: string
                    readOnly: true
                    example:
                      - instance_url
                  authorize_url:
                    type: string
                    example: 'https://unify.apideck.com/vault/authorize/salesforce/<application-id>?state=<state>'
                    nullable: true
                    readOnly: true
                  revoke_url:
                    type: string
                    nullable: true
                    readOnly: true
                    example: 'https://unify.apideck.com/vault/revoke/salesforce/<application-id>?state=<state>'
                  enabled:
                    type: boolean
                    example: true
                  created_at:
                    type: number
                    readOnly: true
                    example: 1615563533390
                  updated_at:
                    type: number
                    example: 1616662325753
                    readOnly: true
                    nullable: true
                  state:
                    readOnly: true
                    type: string
                    description: '[Connection state flow](#section/Connection-state)'
                    enum:
                      - available
                      - callable
                      - added
                      - authorized
                    example: authorized
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
  ConnectionUpdated:
    post:
      summary: Connection Updated
      description: Connection Updated
      operationId: connectionUpdated
      x-apideck-event-type: vault.connection.updated
      tags:
        - Connection
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                $ref: '#/x-webhooks/ConnectionCreated/post/requestBody/content/application~1json/schema/properties'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
